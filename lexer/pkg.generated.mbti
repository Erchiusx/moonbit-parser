// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/parser/lexer"

import(
  "moonbitlang/core/list"
  "moonbitlang/parser/basic"
  "moonbitlang/parser/tokens"
)

// Values
fn tokens_from_string(name? : String, start_pos? : @basic.Position, is_interpolation? : Bool, comment~ : Bool, String) -> LexResult

fn tokens_from_string_with_utf16_location(name? : String, start_pos? : @basic.Position, is_interpolation? : Bool, comment~ : Bool, String) -> LexResult

// Errors

// Types and methods
pub struct LexResult {
  tokens : Array[(@tokens.Token, @basic.Position, @basic.Position)]
  errors : Array[(@basic.Position, @basic.Position, LexicalError)]
  docstrings : Array[@list.List[(@basic.Location, @tokens.Comment)]]
}

pub enum LexicalError {
  IllegalCharacter(Char)
  UnterminatedString
  UnterminatedStringInVariableInterploation
  InterpInvalidMultilineString
  InterpInvalidComment
  InterpInvalidAttribute
  InterpMissingExpression
  InvalidEscapeSequence(String)
  InvalidDotInt(String)
  InvalidByteLiteral(String)
  Reserved_keyword(String)
}
fn LexicalError::output(Self, &Logger) -> Unit // from trait `Show`
fn LexicalError::to_string(Self) -> String // from trait `Show`
impl Show for LexicalError

// Type aliases

// Traits

