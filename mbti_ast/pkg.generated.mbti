// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/parser/mbti_ast"

import(
  "moonbitlang/core/list"
  "moonbitlang/parser/basic"
  "moonbitlang/parser/syntax"
)

// Values

// Errors

// Types and methods
pub(all) enum AliasSig {
  TypeAlias(name~ : Name, type_params~ : @list.List[TypeParamNoConstraints], type_~ : @syntax.Type, vis~ : @syntax.Visibility)
  TraitAlias(name~ : Name, trait_name~ : QualifiedName, vis~ : @syntax.Visibility)
  FnAlias(name~ : Name, type_name~ : QualifiedName, loc~ : @basic.Location)
}
impl ToJson for AliasSig

pub(all) struct ConstSig {
  name : Name
  type_ : @syntax.Type
  value : @syntax.Constant
}
impl ToJson for ConstSig

pub(all) struct FuncSig {
  attr : @list.List[(String, String?, String)]
  type_name : Name?
  name : Name
  params : @list.List[Parameter]
  return_ : (@syntax.Type, @syntax.ErrorType)
  type_params : @list.List[TypeParamWithConstraints]
}
impl ToJson for FuncSig

pub(all) enum ImplSig {
  Trait(type_params~ : @list.List[TypeParamWithConstraints], type_~ : @syntax.Type, trait_name~ : QualifiedName)
  DefaultImpl(trait_name~ : Name, method_name~ : Name)
}
impl ToJson for ImplSig

pub(all) struct Mbti {
  package_name : String
  imports : @list.List[PackageImport]
  sigs : @list.List[(Sig, @basic.Location)]
}
impl ToJson for Mbti

pub(all) struct Name {
  name : String
  loc : @basic.Location
}
impl ToJson for Name

pub(all) struct PackageImport {
  name : String
  alias_ : String?
}
impl ToJson for PackageImport

pub(all) enum Parameter {
  Positional(@syntax.Type)
  Labelled(@syntax.Label, @syntax.Type)
  Autofill(@syntax.Label, @syntax.Type)
  OptionalDefault(@syntax.Label, @syntax.Type)
  OptionalOption(@syntax.Label, @syntax.Type)
}
impl ToJson for Parameter

pub(all) struct QualifiedName {
  name : @syntax.LongIdent
  loc : @basic.Location
}
impl ToJson for QualifiedName

pub(all) enum Sig {
  Func(FuncSig)
  Type(TypeSig)
  Alias(AliasSig)
  Trait(TraitSig)
  Impl(ImplSig)
  Const(ConstSig)
  Value(ValueSig)
}
impl ToJson for Sig

pub(all) enum TraitMethodParameter {
  Positional(@syntax.Type)
  Labelled(@syntax.Label, @syntax.Type)
}
impl ToJson for TraitMethodParameter

pub(all) struct TraitMethodSig {
  name : Name
  params : @list.List[TraitMethodParameter]
  has_default : Bool
  return_ : (@syntax.Type, @syntax.ErrorType)
}
impl ToJson for TraitMethodSig

pub(all) struct TraitSig {
  name : Name
  super_traits : @list.List[QualifiedName]
  methods : @list.List[TraitMethodSig]
  vis : @syntax.Visibility
}
impl ToJson for TraitSig

pub(all) enum TypeParamNoConstraints {
  Name(Name)
  Underscore(@basic.Location)
}
impl ToJson for TypeParamNoConstraints

pub(all) struct TypeParamWithConstraints {
  name : Name
  constraints : @list.List[QualifiedName]
}
impl ToJson for TypeParamWithConstraints

pub(all) struct TypeSig {
  name : Name
  type_params : @list.List[TypeParamNoConstraints]
  components : @syntax.TypeDesc
  vis : @syntax.Visibility
}
impl ToJson for TypeSig

pub(all) struct ValueSig {
  name : Name
  type_ : @syntax.Type
}
impl ToJson for ValueSig

// Type aliases
pub typealias @syntax.Constant as Constant

pub typealias @syntax.ConstrDecl as ConstrDecl

pub typealias @syntax.ConstrId as ConstrId

pub typealias @syntax.ConstrName as ConstrName

pub typealias @syntax.ConstrParam as ConstrParam

pub typealias @syntax.ErrorType as ErrorType

pub typealias @syntax.FieldDecl as FieldDecl

pub typealias @syntax.FieldName as FieldName

pub typealias @syntax.Label as Label

pub typealias @syntax.LongIdent as QualifiedIdent

pub typealias @syntax.Type as Type

pub typealias @syntax.TypeDesc as TypeDesc

pub typealias @syntax.Visibility as Visibility

// Traits

