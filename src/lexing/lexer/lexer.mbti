// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/parser/lexing/lexer"

import(
  "moonbitlang/core/list"
  "moonbitlang/parser/lexing/tokens"
  "moonbitlang/parser/parsing/syntax_types"
)

// Values
fn tokens_from_bytes(name? : String, start_pos? : @syntax_types.Position, is_interpolation? : Bool, comment~ : Bool, Bytes) -> LexResult

// Errors

// Types and methods
pub struct LexResult {
  tokens : Array[(@tokens.Token, @syntax_types.Position, @syntax_types.Position)]
  errors : Array[(@syntax_types.Position, @syntax_types.Position, LexicalError)]
  docstrings : Array[@list.List[(@syntax_types.Location, @syntax_types.Comment)]]
}

pub enum LexicalError {
  IllegalCharacter(Char)
  UnterminatedString
  UnterminatedStringInVariableInterploation
  InterpInvalidMultilineString
  InterpInvalidComment
  InterpInvalidAttribute
  InterpMissingExpression
  InvalidEscapeSequence(String)
  InvalidDotInt(String)
  InvalidByteLiteral(String)
  Reserved_keyword(String)
}
impl Show for LexicalError

// Type aliases

// Traits

