package "moonbitlang/parser/lib/ast"

import(
  "moonbitlang/core/list"
  "moonbitlang/parser/lib/ast_types"
)

// Values
fn arrow_fn_param_to_expr(ArrowFnParam) -> Expr

fn binder_to_expr(Binder) -> Expr

fn bracket_loc(Expr) -> @ast_types.Location

fn desugar_array_augmented_set(@ast_types.Location, Var, Expr, Expr, Expr) -> Expr

fn desugar_array_get(loc~ : @ast_types.Location, Expr, Expr) -> Expr

fn desugar_array_set(loc~ : @ast_types.Location, Expr, Expr, Expr) -> Expr

fn label_to_expr(loc~ : @ast_types.Location, Label) -> Expr

fn label_to_pat(loc~ : @ast_types.Location, Label) -> Pattern

fn make_alias_pattern(loc~ : @ast_types.Location, Pattern, Binder) -> Pattern

fn make_array_expr(loc~ : @ast_types.Location, @list.T[SpreadableElem]) -> Expr

fn make_arrow_fn(@list.T[(ArrowFnParam, Type?)], Expr, loc~ : @ast_types.Location) -> Func

fn make_assign_opt(loc~ : @ast_types.Location, Expr, Expr) -> Expr?

fn make_attribute(loc~ : @ast_types.Location, id~ : String, dot_id~ : String?, raw_payload~ : String) -> @ast_types.Attribute

fn make_augmented_assign_opt(loc~ : @ast_types.Location, Var, Expr, Expr) -> Expr?

fn make_constant_expr(loc~ : @ast_types.Location, Constant) -> Expr

fn make_constant_pattern(loc~ : @ast_types.Location, Constant) -> Pattern

fn make_constr_pattern(loc~ : @ast_types.Location, Constructor, @list.T[ConstrPatArg]?, Bool) -> Pattern

fn make_double(String) -> Constant

fn make_field_def(loc~ : @ast_types.Location, Label, Expr, Bool) -> FieldDef

fn make_field_pat(loc~ : @ast_types.Location, Label, Pattern, Bool) -> FieldPat

fn make_float(String) -> Constant

fn make_ident_expr(loc~ : @ast_types.Location, Var) -> Expr

fn make_int(String) -> Constant

fn make_interp_expr(loc~ : @ast_types.Location, Array[InterpolationComponent]) -> Expr

fn make_interps(Array[InterpolationComponent]) -> @list.T[InterpElem]

fn make_legacy_type_alias(Type, Type, attrs~ : @list.T[@ast_types.Attribute], vis~ : Visibility, deriving~ : @list.T[DerivingDirective], loc~ : @ast_types.Location, doc~ : @ast_types.DocString) -> TypeDecl?

fn make_option_type(loc~ : @ast_types.Location, constr_loc~ : @ast_types.Location, Type) -> Type

fn make_record_expr(loc~ : @ast_types.Location, trailing~ : TrailingMark, TypeName?, @list.T[FieldDef]) -> Expr

fn make_tuple_expr(loc~ : @ast_types.Location, @list.T[Expr]) -> Expr

fn make_tuple_pattern(loc~ : @ast_types.Location, @list.T[Pattern]) -> Pattern

fn make_tuple_type(loc~ : @ast_types.Location, @list.T[Type]) -> Type

fn make_uminus(loc~ : @ast_types.Location, String, Expr) -> Expr

fn make_unot(loc~ : @ast_types.Location, Expr) -> Expr

fn make_uplus(loc~ : @ast_types.Location, String, Expr) -> Expr

let no_location : @ast_types.Location

// Types and methods
pub(all) enum Accessor {
  Label(Label)
  Index(tuple_index~ : Int, loc~ : @ast_types.Location)
  Newtype(loc~ : @ast_types.Location)
}
impl ToJson for Accessor

pub(all) struct AliasTarget {
  binder : Binder
  target : Label?
}
impl ToJson for AliasTarget

pub(all) enum ApplyAttr {
  NoAttr
  Exclamation
  Question
}
impl ToJson for ApplyAttr

pub(all) struct Argument {
  value : Expr
  kind : ArgumentKind
}
impl ToJson for Argument

pub(all) enum ArgumentKind {
  Positional
  Labelled(Label)
  LabelledPun(Label)
  LabelledOption(label~ : Label, question_loc~ : @ast_types.Location)
  LabelledOptionPun(label~ : Label, question_loc~ : @ast_types.Location)
}
impl ToJson for ArgumentKind

pub(all) enum ArrayPattern {
  Pattern(Pattern)
  StringSpread(String)
  BytesSpread(String)
  ConstSpread(binder~ : Binder, pkg~ : String?, loc~ : @ast_types.Location)
}
impl ToJson for ArrayPattern

pub(all) enum ArrayPatterns {
  Closed(@list.T[ArrayPattern])
  Open(@list.T[ArrayPattern], @list.T[ArrayPattern], DotDotBinder)
}
impl ToJson for ArrayPatterns

pub(all) enum ArrowFnParam {
  Named(Binder)
  Unnamed(@ast_types.Location)
}

pub(all) struct Binder {
  name : String
  loc : @ast_types.Location
}
impl ToJson for Binder

pub(all) struct Case {
  pattern : Pattern
  guard_ : Expr?
  body : Expr
}
impl ToJson for Case

pub(all) enum Constant {
  Bool(Bool)
  Byte(String)
  Bytes(String)
  Char(String)
  Int(String)
  Int64(String)
  UInt(String)
  UInt64(String)
  Float(String)
  Double(String)
  String(String)
  BigInt(String)
}
impl ToJson for Constant

pub(all) struct ConstrDecl {
  name : ConstrName
  args : @list.T[ConstrParam]?
  tag : (String, @ast_types.Location)?
  loc : @ast_types.Location
  doc : @ast_types.DocString
}
impl ToJson for ConstrDecl

pub(all) struct ConstrId {
  id : LongIdent
  loc : @ast_types.Location
}
impl ToJson for ConstrId

pub(all) struct ConstrName {
  name : String
  loc : @ast_types.Location
}
impl ToJson for ConstrName

pub(all) struct ConstrParam {
  ty : Type
  mut_ : Bool
  label : Label?
}
impl ToJson for ConstrParam

pub(all) struct ConstrPatArg {
  pat : Pattern
  kind : ArgumentKind
}
impl ToJson for ConstrPatArg

pub(all) struct Constructor {
  name : ConstrName
  extra_info : ConstructorExtraInfo
  loc : @ast_types.Location
}
impl ToJson for Constructor

pub(all) enum ConstructorExtraInfo {
  TypeName(TypeName)
  Package(String)
  NoExtraInfo
}
impl ToJson for ConstructorExtraInfo

pub(all) enum DeclBody {
  DeclBody(local_types~ : @list.T[LocalTypeDecl], expr~ : Expr)
  DeclStubs(FuncStubs)
}
impl ToJson for DeclBody

pub(all) struct DerivingDirective {
  type_name : TypeName
  args : @list.T[Argument]
  loc : @ast_types.Location
}
impl ToJson for DerivingDirective

pub(all) enum DotDotBinder {
  Underscore
  NoBinder
  BinderAs(Binder)
  Binder(Binder)
}
impl ToJson for DotDotBinder

pub(all) enum EmbeddedCode {
  CodeString(String)
  CodeMultilineString(@list.T[String])
}
impl ToJson for EmbeddedCode

pub(all) enum ErrorType {
  ErrorType(ty~ : Type)
  DefaultErrorType(loc~ : @ast_types.Location)
  NoErrorType
  Noraise(loc~ : @ast_types.Location)
  MaybeError(ty~ : Type)
}
impl ToJson for ErrorType

pub(all) enum ExceptionDecl {
  NoPayload
  SinglePayload(Type)
  EnumPayload(@list.T[ConstrDecl])
}
impl ToJson for ExceptionDecl

pub(all) enum Expr {
  Apply(func~ : Expr, args~ : @list.T[Argument], attr~ : ApplyAttr, loc~ : @ast_types.Location)
  Infix(op~ : Var, lhs~ : Expr, rhs~ : Expr, loc~ : @ast_types.Location)
  Unary(op~ : Var, expr~ : Expr, loc~ : @ast_types.Location)
  Array(exprs~ : @list.T[Expr], loc~ : @ast_types.Location)
  ArraySpread(elems~ : @list.T[SpreadableElem], loc~ : @ast_types.Location)
  ArrayGet(array~ : Expr, index~ : Expr, loc~ : @ast_types.Location)
  ArrayGetSlice(array~ : Expr, start_index~ : Expr?, end_index~ : Expr?, index_loc~ : @ast_types.Location, loc~ : @ast_types.Location)
  ArraySet(array~ : Expr, index~ : Expr, value~ : Expr, loc~ : @ast_types.Location)
  ArrayAugmentedSet(op~ : Var, array~ : Expr, index~ : Expr, value~ : Expr, loc~ : @ast_types.Location)
  Constant(c~ : Constant, loc~ : @ast_types.Location)
  MultilineString(elems~ : @list.T[MultilineStringElem], loc~ : @ast_types.Location)
  Interp(elems~ : @list.T[InterpElem], loc~ : @ast_types.Location)
  Constraint(expr~ : Expr, ty~ : Type, loc~ : @ast_types.Location)
  Constr(constr~ : Constructor, loc~ : @ast_types.Location)
  While(loop_cond~ : Expr, loop_body~ : Expr, while_else~ : Expr?, label~ : Label?, loc~ : @ast_types.Location)
  Function(func~ : Func, loc~ : @ast_types.Location)
  Ident(id~ : Var, loc~ : @ast_types.Location)
  If(cond~ : Expr, ifso~ : Expr, ifnot~ : Expr?, loc~ : @ast_types.Location)
  Guard(cond~ : Expr, otherwise~ : Expr?, body~ : Expr, loc~ : @ast_types.Location)
  Is(expr~ : Expr, pat~ : Pattern, loc~ : @ast_types.Location)
  Defer(expr~ : Expr, body~ : Expr, loc~ : @ast_types.Location)
  LetFn(name~ : Binder, func~ : Func, body~ : Expr, loc~ : @ast_types.Location)
  LetRec(bindings~ : @list.T[(Binder, Func)], body~ : Expr, loc~ : @ast_types.Location)
  LetAnd(bindings~ : @list.T[(Binder, Type?, Func)], body~ : Expr, loc~ : @ast_types.Location)
  Let(pattern~ : Pattern, expr~ : Expr, body~ : Expr, loc~ : @ast_types.Location)
  Sequence(exprs~ : @list.T[Expr], last_expr~ : Expr, loc~ : @ast_types.Location)
  Tuple(exprs~ : @list.T[Expr], loc~ : @ast_types.Location)
  Record(type_name~ : TypeName?, fields~ : @list.T[FieldDef], trailing~ : TrailingMark, loc~ : @ast_types.Location)
  RecordUpdate(type_name~ : TypeName?, record~ : Expr, fields~ : @list.T[FieldDef], loc~ : @ast_types.Location)
  Field(record~ : Expr, accessor~ : Accessor, loc~ : @ast_types.Location)
  Method(type_name~ : TypeName, method_name~ : Label, loc~ : @ast_types.Location)
  DotApply(self~ : Expr, method_name~ : Label, args~ : @list.T[Argument], return_self~ : Bool, attr~ : ApplyAttr, loc~ : @ast_types.Location)
  As(expr~ : Expr, trait_~ : TypeName, loc~ : @ast_types.Location)
  Mutate(record~ : Expr, accessor~ : Accessor, field~ : Expr, augmented_by~ : Var?, loc~ : @ast_types.Location)
  Match(expr~ : Expr, cases~ : @list.T[Case], match_loc~ : @ast_types.Location, using_~ : Label?, loc~ : @ast_types.Location)
  LetMut(binder~ : Binder, ty~ : Type?, expr~ : Expr, body~ : Expr, loc~ : @ast_types.Location)
  Pipe(lhs~ : Expr, rhs~ : Expr, loc~ : @ast_types.Location)
  Assign(var_~ : Var, expr~ : Expr, augmented_by~ : Var?, loc~ : @ast_types.Location)
  Hole(loc~ : @ast_types.Location, kind~ : Hole)
  Return(return_value~ : Expr?, loc~ : @ast_types.Location)
  Raise(err_value~ : Expr, loc~ : @ast_types.Location)
  Unit(loc~ : @ast_types.Location, faked~ : Bool)
  Break(arg~ : Expr?, label~ : Label?, loc~ : @ast_types.Location)
  Continue(args~ : @list.T[Expr], label~ : Label?, loc~ : @ast_types.Location)
  Loop(args~ : @list.T[Expr], body~ : @list.T[MultiArgCase], label~ : Label?, loop_loc~ : @ast_types.Location, loc~ : @ast_types.Location)
  For(binders~ : @list.T[(Binder, Expr)], condition~ : Expr?, continue_block~ : @list.T[(Binder, Expr)], body~ : Expr, for_else~ : Expr?, label~ : Label?, loc~ : @ast_types.Location)
  ForEach(binders~ : @list.T[Binder?], expr~ : Expr, body~ : Expr, else_block~ : Expr?, label~ : Label?, loc~ : @ast_types.Location)
  Try(body~ : Expr, catch_~ : @list.T[Case], catch_all~ : Bool, try_else~ : @list.T[Case]?, has_try~ : Bool, legacy_else~ : Bool, try_loc~ : @ast_types.Location, catch_loc~ : @ast_types.Location, else_loc~ : @ast_types.Location, loc~ : @ast_types.Location)
  TryQuestion(body~ : Expr, try_loc~ : @ast_types.Location, loc~ : @ast_types.Location)
  Map(elems~ : @list.T[MapExprElem], loc~ : @ast_types.Location)
  Group(expr~ : Expr, group~ : Group, loc~ : @ast_types.Location)
  StaticAssert(asserts~ : @list.T[StaticAssertion], body~ : Expr)
}
impl ToJson for Expr

pub(all) struct FieldDecl {
  name : FieldName
  ty : Type
  mut_ : Bool
  vis : Visibility
  loc : @ast_types.Location
}
impl ToJson for FieldDecl

pub(all) struct FieldDef {
  label : Label
  expr : Expr
  is_pun : Bool
  loc : @ast_types.Location
}
impl ToJson for FieldDef

pub(all) struct FieldName {
  label : String
  loc : @ast_types.Location
}
impl ToJson for FieldName

pub(all) struct FieldPat {
  label : Label
  pattern : Pattern
  is_pun : Bool
  loc : @ast_types.Location
}
impl ToJson for FieldPat

pub(all) enum FnKind {
  Lambda
  Matrix
  Arrow
}
impl ToJson for FnKind

pub(all) struct FunDecl {
  type_name : TypeName?
  name : Binder
  has_error : @ast_types.Location?
  is_async : Bool
  decl_params : @list.T[Parameter]?
  params_loc : @ast_types.Location
  quantifiers : @list.T[TypeVarBinder]
  return_type : Type?
  error_type : ErrorType
  vis : Visibility
  attrs : @list.T[@ast_types.Attribute]
  mut doc : @ast_types.DocString
}
impl ToJson for FunDecl

pub(all) enum Func {
  Lambda(parameters~ : @list.T[Parameter], params_loc~ : @ast_types.Location, body~ : Expr, return_type~ : Type?, error_type~ : ErrorType, kind~ : FnKind, has_error~ : @ast_types.Location?, is_async~ : Bool, loc~ : @ast_types.Location)
  Match(cases~ : @list.T[MultiArgCase], has_error~ : @ast_types.Location?, is_async~ : Bool, fn_loc~ : @ast_types.Location, loc~ : @ast_types.Location)
}
impl ToJson for Func

pub(all) enum FuncStubs {
  Import(module_name~ : String, func_name~ : String)
  Embedded(language~ : String?, code~ : EmbeddedCode)
}
impl ToJson for FuncStubs

pub(all) enum Group {
  Brace
  Paren
}
impl ToJson for Group

pub(all) enum Hole {
  Synthesized
  Incomplete
  Todo
}
impl ToJson for Hole

pub(all) enum Impl {
  TopExpr(expr~ : Expr, is_main~ : Bool, local_types~ : @list.T[LocalTypeDecl], loc~ : @ast_types.Location)
  TopTest(expr~ : Expr, name~ : (String, @ast_types.Location)?, params~ : @list.T[Parameter]?, local_types~ : @list.T[LocalTypeDecl], loc~ : @ast_types.Location, attrs~ : @list.T[@ast_types.Attribute], mut doc~ : @ast_types.DocString)
  TopTypeDef(TypeDecl)
  TopFuncDef(fun_decl~ : FunDecl, decl_body~ : DeclBody, loc~ : @ast_types.Location)
  TopFuncAlias(pkg~ : Label?, type_name~ : TypeName?, targets~ : @list.T[AliasTarget], vis~ : Visibility, attrs~ : @list.T[@ast_types.Attribute], is_list~ : Bool, mut doc~ : @ast_types.DocString, loc~ : @ast_types.Location)
  TopLetDef(binder~ : Binder, ty~ : Type?, expr~ : Expr, vis~ : Visibility, is_constant~ : Bool, loc~ : @ast_types.Location, attrs~ : @list.T[@ast_types.Attribute], mut doc~ : @ast_types.DocString)
  TopTrait(TraitDecl)
  TopBatchTypeAlias(pkg~ : Label?, targets~ : @list.T[AliasTarget], vis~ : Visibility, loc~ : @ast_types.Location, attrs~ : @list.T[@ast_types.Attribute], is_list~ : Bool, mut doc~ : @ast_types.DocString)
  TopBatchTraitAlias(pkg~ : Label?, targets~ : @list.T[AliasTarget], vis~ : Visibility, loc~ : @ast_types.Location, attrs~ : @list.T[@ast_types.Attribute], is_list~ : Bool, mut doc~ : @ast_types.DocString)
  TopImpl(self_ty~ : Type?, trait_~ : TypeName, method_name~ : Binder, has_error~ : @ast_types.Location?, quantifiers~ : @list.T[TypeVarBinder], params~ : @list.T[Parameter], ret_ty~ : Type?, err_ty~ : ErrorType, body~ : DeclBody, vis~ : Visibility, loc~ : @ast_types.Location, attrs~ : @list.T[@ast_types.Attribute], mut doc~ : @ast_types.DocString)
  TopView(quantifiers~ : @list.T[TypeVarBinder], source_ty~ : Type, view_constrs~ : @list.T[ConstrDecl], body~ : @list.T[Case], vis~ : Visibility, loc~ : @ast_types.Location, attrs~ : @list.T[@ast_types.Attribute], mut doc~ : @ast_types.DocString)
  TopImplRelation(self_ty~ : Type, trait_~ : TypeName, quantifiers~ : @list.T[TypeVarBinder], vis~ : Visibility, attrs~ : @list.T[@ast_types.Attribute], loc~ : @ast_types.Location, mut doc~ : @ast_types.DocString)
}
impl ToJson for Impl

pub(all) enum InterpElem {
  Literal(repr~ : String, loc~ : @ast_types.Location)
  Expr(expr~ : Expr, loc~ : @ast_types.Location)
  Source(@ast_types.InterpSource)
}
impl ToJson for InterpElem

pub(all) enum InterpolationComponent {
  InterpLit(String, @ast_types.Location)
  InterpSource(@ast_types.InterpSource)
}

pub(all) struct Label {
  name : String
  loc : @ast_types.Location
}
impl ToJson for Label

pub(all) struct LocalTypeDecl {
  tycon : String
  tycon_loc : @ast_types.Location
  components : TypeDesc
  deriving : @list.T[DerivingDirective]
}
impl ToJson for LocalTypeDecl

pub(all) enum LongIdent {
  Ident(name~ : String)
  Dot(pkg~ : String, id~ : String)
}
impl ToJson for LongIdent

pub(all) struct MapExprElem {
  key : Constant
  expr : Expr
  key_loc : @ast_types.Location
  loc : @ast_types.Location
}
impl ToJson for MapExprElem

pub(all) struct MapPatElem {
  key : Constant
  pat : Pattern
  match_absent : Bool
  key_loc : @ast_types.Location
  loc : @ast_types.Location
}
impl ToJson for MapPatElem

pub(all) struct MultiArgCase {
  patterns : @list.T[Pattern]
  guard_ : Expr?
  body : Expr
}
impl ToJson for MultiArgCase

pub(all) enum MultilineStringElem {
  String(String)
  Interp(@list.T[InterpElem])
}
impl ToJson for MultilineStringElem

pub(all) enum Parameter {
  DiscardPositional(ty~ : Type?, loc~ : @ast_types.Location)
  Positional(binder~ : Binder, ty~ : Type?)
  Labelled(binder~ : Binder, ty~ : Type?)
  Optional(binder~ : Binder, default~ : Expr, ty~ : Type?)
  QuestionOptional(binder~ : Binder, ty~ : Type?)
}
impl ToJson for Parameter

pub(all) enum Pattern {
  Alias(pat~ : Pattern, alias_~ : Binder, loc~ : @ast_types.Location)
  Any(loc~ : @ast_types.Location)
  Array(pats~ : ArrayPatterns, loc~ : @ast_types.Location)
  Constant(c~ : Constant, loc~ : @ast_types.Location)
  Constraint(pat~ : Pattern, ty~ : Type, loc~ : @ast_types.Location)
  Constr(constr~ : Constructor, args~ : @list.T[ConstrPatArg]?, is_open~ : Bool, loc~ : @ast_types.Location)
  Or(pat1~ : Pattern, pat2~ : Pattern, loc~ : @ast_types.Location)
  Tuple(pats~ : @list.T[Pattern], loc~ : @ast_types.Location)
  Var(Binder)
  Record(fields~ : @list.T[FieldPat], is_closed~ : Bool, loc~ : @ast_types.Location)
  Map(elems~ : @list.T[MapPatElem], is_closed~ : Bool, loc~ : @ast_types.Location)
  Range(lhs~ : Pattern, rhs~ : Pattern, inclusive~ : Bool, loc~ : @ast_types.Location)
}
impl ToJson for Pattern

pub(all) enum SpreadableElem {
  Regular(Expr)
  Spread(expr~ : Expr, loc~ : @ast_types.Location)
}
impl ToJson for SpreadableElem

pub(all) struct StaticAssertion {
  ty : Type
  trait_ : LongIdent
  loc : @ast_types.Location
  msg : String
}
impl ToJson for StaticAssertion

pub(all) enum TrailingMark {
  Comma
  Semi
  None
}
impl ToJson for TrailingMark

pub(all) struct TraitDecl {
  name : Binder
  supers : @list.T[TypeVarConstraint]
  methods : @list.T[TraitMethodDecl]
  vis : Visibility
  loc : @ast_types.Location
  attrs : @list.T[@ast_types.Attribute]
  mut doc : @ast_types.DocString
}
impl ToJson for TraitDecl

pub(all) struct TraitMethodDecl {
  name : Binder
  has_error : @ast_types.Location?
  is_async : Bool
  quantifiers : @list.T[TypeVarBinder]
  params : @list.T[Parameter]
  return_type : Type?
  error_type : ErrorType
  has_default : @ast_types.Location?
  loc : @ast_types.Location
}
impl ToJson for TraitMethodDecl

pub(all) enum Type {
  Any(loc~ : @ast_types.Location)
  Arrow(args~ : @list.T[Type], res~ : Type, err~ : ErrorType, is_async~ : Bool, loc~ : @ast_types.Location)
  Tuple(tys~ : @list.T[Type], loc~ : @ast_types.Location)
  Name(constr_id~ : ConstrId, tys~ : @list.T[Type], loc~ : @ast_types.Location)
  Option(ty~ : Type, loc~ : @ast_types.Location, question_loc~ : @ast_types.Location)
  Object(ConstrId)
}
impl ToJson for Type

pub(all) struct TypeDecl {
  tycon : String
  tycon_loc : @ast_types.Location
  params : @list.T[TypeDeclBinder]
  components : TypeDesc
  attrs : @list.T[@ast_types.Attribute]
  mut doc : @ast_types.DocString
  type_vis : Visibility
  deriving : @list.T[DerivingDirective]
  loc : @ast_types.Location
}
impl ToJson for TypeDecl

pub(all) struct TypeDeclBinder {
  name : String?
  loc : @ast_types.Location
}
impl ToJson for TypeDeclBinder

pub(all) enum TypeDesc {
  Abstract
  Extern
  Newtype(Type)
  Error(ExceptionDecl)
  Variant(@list.T[ConstrDecl])
  Record(@list.T[FieldDecl])
  Alias(Type)
}
impl ToJson for TypeDesc

pub(all) struct TypeName {
  name : LongIdent
  is_object : Bool
  loc : @ast_types.Location
}
impl ToJson for TypeName

pub(all) struct TypeVarBinder {
  name : String
  constraints : @list.T[TypeVarConstraint]
  loc : @ast_types.Location
}
impl ToJson for TypeVarBinder

pub(all) struct TypeVarConstraint {
  trait_ : LongIdent
  loc : @ast_types.Location
}
impl ToJson for TypeVarConstraint

pub(all) struct Var {
  name : LongIdent
  loc : @ast_types.Location
}
impl ToJson for Var

pub(all) enum Visibility {
  Default
  Pub(attr~ : String?, loc~ : @ast_types.Location)
  Priv(loc~ : @ast_types.Location)
}
impl ToJson for Visibility

// Type aliases
pub typealias @ast_types.Attribute as Attribute

pub typealias String as ByteLiteral

pub typealias String as BytesLiteral

pub typealias String as CharLiteral

pub typealias @ast_types.DocString as DocString

pub typealias @list.T[Impl] as Impls

pub typealias @ast_types.Location as Location

pub typealias @list.T[Parameter] as Parameters

pub typealias @ast_types.Position as Position

pub typealias String as StringLiteral

pub typealias (String, @ast_types.Location)? as TestName

// Traits

