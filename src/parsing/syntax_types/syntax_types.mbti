// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/parser/parsing/syntax_types"

import(
  "moonbitlang/core/list"
)

// Values

// Errors

// Types and methods
pub(all) struct Attribute {
  loc : Location
  raw : String
  parsed : AttributeExpr?
}
impl ToJson for Attribute

pub(all) enum AttributeExpr {
  Ident(AttributeId)
  Str(String)
  Apply(AttributeId, @list.T[AttributeProp])
}

pub(all) struct AttributeId {
  qual : String?
  name : String
}

pub(all) enum AttributeProp {
  Labeled(String, AttributeExpr)
  Expr(AttributeExpr)
}

pub(all) struct Comment {
  content : String
  kind : CommentKind
  consumed_by_docstring : Ref[Bool]
}
impl Show for Comment

pub(all) enum CommentKind {
  InlineTrailing
  Ownline(leading_blank_line~ : Bool, trailing_blank_line~ : Bool)
}
impl Show for CommentKind

pub(all) struct DocString {
  content : @list.T[String]
  loc : Location
}
fn DocString::empty() -> Self
impl ToJson for DocString

pub(all) enum InterpElem {
  InterpLit(repr~ : String, loc~ : Location)
  InterpSource(InterpSource)
}
impl Show for InterpElem

pub(all) struct InterpSource {
  source : String
  loc : Location
}
impl Show for InterpSource
impl ToJson for InterpSource

pub(all) struct Location {
  start : Position
  end : Position
}
fn Location::merge(Self, Self) -> Self
fn Location::trim_first_char(Self) -> Self
fn Location::trim_last_char(Self) -> Self
impl Show for Location
impl ToJson for Location

pub(all) struct Position {
  fname : String
  lnum : Int
  bol : Int
  cnum : Int
}
fn Position::column(Self) -> Int
impl Eq for Position
impl Show for Position
impl ToJson for Position

// Type aliases
pub typealias String as ByteLiteral

pub typealias String as BytesLiteral

pub typealias String as CharLiteral

pub typealias Array[InterpElem] as InterpLiteral

pub typealias String as StringLiteral

// Traits

