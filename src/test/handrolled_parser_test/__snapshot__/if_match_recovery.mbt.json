{
  "type": "Program",
  "body": [
    {
      "type": "Impl::TopFuncDef",
      "fun_decl": {
        "type": "FunDecl",
        "type_name": null,
        "name": {
          "type": "Binder",
          "name": "init",
          "loc": null
        },
        "has_error": null,
        "is_async": false,
        "decl_params": null,
        "params_loc": null,
        "quantifiers": [],
        "return_type": null,
        "error_type": {
          "type": "ErrorType::NoErrorType"
        },
        "vis": {
          "type": "Visibility::Default"
        },
        "attrs": [],
        "doc": ""
      },
      "decl_body": {
        "type": "DeclBody::DeclBody",
        "local_types": [],
        "expr": {
          "type": "Expr::Sequence",
          "exprs": [
            {
              "type": "Expr::If",
              "cond": {
                "type": "Expr::Ident",
                "id": {
                  "type": "Var",
                  "name": {
                    "type": "LongIdent::Ident",
                    "0": "cond"
                  },
                  "loc": null
                },
                "loc": null
              },
              "ifso": {
                "type": "Expr::Hole",
                "loc": null,
                "kind": {
                  "type": "Hole::Synthesized"
                }
              },
              "ifnot": null,
              "loc": null
            },
            {
              "type": "Expr::If",
              "cond": {
                "type": "Expr::Ident",
                "id": {
                  "type": "Var",
                  "name": {
                    "type": "LongIdent::Ident",
                    "0": "parse"
                  },
                  "loc": null
                },
                "loc": null
              },
              "ifso": {
                "type": "Expr::Hole",
                "loc": null,
                "kind": {
                  "type": "Hole::Synthesized"
                }
              },
              "ifnot": null,
              "loc": null
            },
            {
              "type": "Expr::If",
              "cond": {
                "type": "Expr::Ident",
                "id": {
                  "type": "Var",
                  "name": {
                    "type": "LongIdent::Ident",
                    "0": "parse"
                  },
                  "loc": null
                },
                "loc": null
              },
              "ifso": {
                "type": "Expr::Unit",
                "loc": null,
                "faked": true
              },
              "ifnot": null,
              "loc": null
            },
            {
              "type": "Expr::Match",
              "expr": {
                "type": "Expr::Ident",
                "id": {
                  "type": "Var",
                  "name": {
                    "type": "LongIdent::Ident",
                    "0": "e"
                  },
                  "loc": null
                },
                "loc": null
              },
              "cases": [],
              "match_loc": null,
              "using": null,
              "loc": null
            },
            {
              "type": "Expr::Match",
              "expr": {
                "type": "Expr::Ident",
                "id": {
                  "type": "Var",
                  "name": {
                    "type": "LongIdent::Ident",
                    "0": "parse"
                  },
                  "loc": null
                },
                "loc": null
              },
              "cases": [],
              "match_loc": null,
              "using": null,
              "loc": null
            }
          ],
          "last_expr": {
            "type": "Expr::Match",
            "expr": {
              "type": "Expr::Ident",
              "id": {
                "type": "Var",
                "name": {
                  "type": "LongIdent::Ident",
                  "0": "parse"
                },
                "loc": null
              },
              "loc": null
            },
            "cases": [],
            "match_loc": null,
            "using": null,
            "loc": null
          },
          "loc": null
        }
      },
      "loc": null
    }
  ],
  "diagnostics": [
    {
      "type": "Error",
      "loc": {
        "file": "src/test/handrolled_parser_test/fixtures/if_match_recovery.mbt",
        "start": {
          "line": 3,
          "column": 10
        },
        "end": {
          "line": 3,
          "column": 10
        }
      },
      "msg": "Unexpected line break here, missing `{` at the end of this line."
    },
    {
      "type": "Error",
      "loc": {
        "file": "src/test/handrolled_parser_test/fixtures/if_match_recovery.mbt",
        "start": {
          "line": 4,
          "column": 12
        },
        "end": {
          "line": 4,
          "column": 17
        }
      },
      "msg": "Unexpected token id (lowercase start), you may expect `{`."
    },
    {
      "type": "Error",
      "loc": {
        "file": "src/test/handrolled_parser_test/fixtures/if_match_recovery.mbt",
        "start": {
          "line": 5,
          "column": 12
        },
        "end": {
          "line": 5,
          "column": 17
        }
      },
      "msg": "Unexpected token id (lowercase start), you may expect `{`."
    },
    {
      "type": "Error",
      "loc": {
        "file": "src/test/handrolled_parser_test/fixtures/if_match_recovery.mbt",
        "start": {
          "line": 8,
          "column": 10
        },
        "end": {
          "line": 8,
          "column": 10
        }
      },
      "msg": "Unexpected line break here, missing `{` at the end of this line."
    },
    {
      "type": "Error",
      "loc": {
        "file": "src/test/handrolled_parser_test/fixtures/if_match_recovery.mbt",
        "start": {
          "line": 9,
          "column": 15
        },
        "end": {
          "line": 9,
          "column": 20
        }
      },
      "msg": "Unexpected token id (lowercase start), you may expect `{`."
    },
    {
      "type": "Error",
      "loc": {
        "file": "src/test/handrolled_parser_test/fixtures/if_match_recovery.mbt",
        "start": {
          "line": 10,
          "column": 15
        },
        "end": {
          "line": 10,
          "column": 20
        }
      },
      "msg": "Unexpected token id (lowercase start), you may expect `{`."
    }
  ]
}