{
  "type": "Program",
  "body": [
    {
      "type": "Impl::TopFuncDef",
      "fun_decl": {
        "type": "FunDecl",
        "type_name": null,
        "name": {
          "type": "Binder",
          "name": "init",
          "loc": "2:4-2:8"
        },
        "has_error": null,
        "is_async": false,
        "decl_params": null,
        "params_loc": "2:9-2:8",
        "quantifiers": [],
        "return_type": null,
        "error_type": {
          "type": "ErrorType::NoErrorType"
        },
        "vis": {
          "type": "Visibility::Default"
        },
        "attrs": [],
        "doc": ""
      },
      "decl_body": {
        "type": "DeclBody::DeclBody",
        "local_types": [],
        "expr": {
          "type": "Expr::Match",
          "expr": {
            "type": "Expr::Ident",
            "id": {
              "type": "Var",
              "name": {
                "type": "LongIdent::Ident",
                "0": "e"
              },
              "loc": "3:9-3:10"
            },
            "loc": "3:9-3:10"
          },
          "cases": [],
          "match_loc": "3:3-4:2",
          "using": null,
          "loc": "3:3-4:1"
        }
      },
      "loc": "2:1-4:2"
    },
    {
      "type": "Impl::TopFuncDef",
      "fun_decl": {
        "type": "FunDecl",
        "type_name": null,
        "name": {
          "type": "Binder",
          "name": "init",
          "loc": "6:4-6:8"
        },
        "has_error": null,
        "is_async": false,
        "decl_params": null,
        "params_loc": "6:9-6:8",
        "quantifiers": [],
        "return_type": null,
        "error_type": {
          "type": "ErrorType::NoErrorType"
        },
        "vis": {
          "type": "Visibility::Default"
        },
        "attrs": [],
        "doc": ""
      },
      "decl_body": {
        "type": "DeclBody::DeclBody",
        "local_types": [],
        "expr": {
          "type": "Expr::If",
          "cond": {
            "type": "Expr::Ident",
            "id": {
              "type": "Var",
              "name": {
                "type": "LongIdent::Ident",
                "0": "e"
              },
              "loc": "7:6-7:7"
            },
            "loc": "7:6-7:7"
          },
          "ifso": {
            "type": "Expr::Hole",
            "loc": "7:7-8:1",
            "kind": {
              "type": "Hole::Synthesized"
            }
          },
          "ifnot": null,
          "loc": "7:3-8:1"
        }
      },
      "loc": "6:1-8:2"
    },
    {
      "type": "Impl::TopFuncDef",
      "fun_decl": {
        "type": "FunDecl",
        "type_name": null,
        "name": {
          "type": "Binder",
          "name": "init",
          "loc": "10:4-10:8"
        },
        "has_error": null,
        "is_async": false,
        "decl_params": null,
        "params_loc": "10:9-10:8",
        "quantifiers": [],
        "return_type": null,
        "error_type": {
          "type": "ErrorType::NoErrorType"
        },
        "vis": {
          "type": "Visibility::Default"
        },
        "attrs": [],
        "doc": ""
      },
      "decl_body": {
        "type": "DeclBody::DeclBody",
        "local_types": [],
        "expr": {
          "type": "Expr::LetRec",
          "bindings": [
            [
              {
                "type": "Binder",
                "name": "f1",
                "loc": "11:6-11:8"
              },
              {
                "type": "Func::Lambda",
                "parameters": [],
                "params_loc": "11:8-11:10",
                "body": {
                  "type": "Expr::While",
                  "loop_cond": {
                    "type": "Expr::Ident",
                    "id": {
                      "type": "Var",
                      "name": {
                        "type": "LongIdent::Ident",
                        "0": "cond"
                      },
                      "loc": "12:11-12:15"
                    },
                    "loc": "12:11-12:15"
                  },
                  "loop_body": {
                    "type": "Expr::Hole",
                    "loc": "12:15-13:3",
                    "kind": {
                      "type": "Hole::Synthesized"
                    }
                  },
                  "while_else": null,
                  "label": null,
                  "loc": "12:5-13:3"
                },
                "return_type": null,
                "error_type": {
                  "type": "ErrorType::NoErrorType"
                },
                "kind": {
                  "type": "FnKind::Lambda"
                },
                "has_error": null,
                "is_async": false,
                "loc": "-1:1--1:1"
              }
            ],
            [
              {
                "type": "Binder",
                "name": "f2",
                "loc": "14:6-14:8"
              },
              {
                "type": "Func::Lambda",
                "parameters": [],
                "params_loc": "14:8-14:10",
                "body": {
                  "type": "Expr::Unit",
                  "loc": "14:11-15:4",
                  "faked": true
                },
                "return_type": null,
                "error_type": {
                  "type": "ErrorType::NoErrorType"
                },
                "kind": {
                  "type": "FnKind::Lambda"
                },
                "has_error": null,
                "is_async": false,
                "loc": "-1:1--1:1"
              }
            ]
          ],
          "body": {
            "type": "Expr::Unit",
            "loc": "14:3-15:4",
            "faked": true
          },
          "loc": "11:3-15:4"
        }
      },
      "loc": "10:1-16:2"
    }
  ],
  "diagnostics": [
    {
      "type": "Error",
      "loc": "4:1-4:2",
      "msg": "Unexpected token `}`, you may expect `{`."
    },
    {
      "type": "Error",
      "loc": "8:1-8:2",
      "msg": "Unexpected token `}`, you may expect `{`."
    },
    {
      "type": "Error",
      "loc": "13:3-13:4",
      "msg": "Unexpected token `}`, you may expect `{`."
    }
  ]
}