// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/parser/tokens"

import(
  "moonbitlang/parser/basic"
)

// Values

// Errors

// Types and methods
pub(all) struct Comment {
  content : String
  kind : CommentKind
  mut consumed_by_docstring : Bool
}
impl Eq for Comment
impl Show for Comment

pub(all) enum CommentKind {
  InlineTrailing
  Ownline(leading_blank_line~ : Bool, trailing_blank_line~ : Bool)
}
impl Eq for CommentKind
impl Show for CommentKind

pub(all) enum InterpElem {
  InterpLit(repr~ : String, loc~ : @basic.Location)
  InterpSource(InterpSource)
}
impl Eq for InterpElem
impl Show for InterpElem

pub(all) struct InterpSource {
  source : String
  loc : @basic.Location
}
impl Eq for InterpSource
impl Show for InterpSource
impl ToJson for InterpSource

pub(all) enum Token {
  CHAR(String)
  INT(String)
  BYTE(String)
  BYTES(String)
  FLOAT(String)
  DOUBLE(String)
  STRING(String)
  MULTILINE_STRING(String)
  MULTILINE_INTERP(Array[InterpElem])
  INTERP(Array[InterpElem])
  ATTRIBUTE((String, String?, String))
  LIDENT(String)
  UIDENT(String)
  POST_LABEL(String)
  COMMENT(Comment)
  NEWLINE
  INFIX1(String)
  INFIX2(String)
  INFIX3(String)
  INFIX4(String)
  AUGMENTED_ASSIGNMENT(String)
  EOF
  FALSE
  TRUE
  PUB
  PRIV
  READONLY
  IMPORT
  EXTERN
  BREAK
  CONTINUE
  STRUCT
  ENUM
  TRAIT
  DERIVE
  IMPL
  WITH
  RAISE
  THROW
  TRY
  CATCH
  ASYNC
  TYPEALIAS
  TRAITALIAS
  FNALIAS
  EQUAL
  LPAREN
  RPAREN
  COMMA
  MINUS
  QUESTION
  EXCLAMATION
  DOT_LIDENT(String)
  DOT_UIDENT(String)
  DOT_INT(Int)
  DOT_LPAREN
  COLONCOLON
  COLON
  SEMI(Bool)
  LBRACKET
  PLUS
  RBRACKET
  UNDERSCORE
  BAR
  LBRACE
  RBRACE
  AMPERAMPER
  AMPER
  CARET
  BARBAR
  PACKAGE_NAME(String)
  AS
  PIPE
  ELSE
  FN
  IF
  LET
  CONST
  MATCH
  USING
  MUTABLE
  TYPE
  FAT_ARROW
  THIN_ARROW
  WHILE
  RETURN
  DOTDOT
  RANGE_INCLUSIVE
  RANGE_EXCLUSIVE
  ELLIPSIS
  TEST
  LOOP
  GUARD
  DEFER
  FOR
  IN
  IS
  SUBERROR
  AND
  LETREC
  ENUMVIEW
  NORAISE
  TRY_QUESTION
  TRY_EXCLAMATION
}
fn Token::kind(Self) -> TokenKind
fn Token::to_expect_string(Self) -> String
impl Show for Token

pub(all) enum TokenKind {
  TK_CHAR
  TK_INT
  TK_BYTE
  TK_BYTES
  TK_FLOAT
  TK_DOUBLE
  TK_STRING
  TK_MULTILINE_STRING
  TK_MULTILINE_INTERP
  TK_INTERP
  TK_ATTRIBUTE
  TK_LIDENT
  TK_UIDENT
  TK_POST_LABEL
  TK_COMMENT
  TK_NEWLINE
  TK_INFIX1
  TK_INFIX2
  TK_INFIX3
  TK_INFIX4
  TK_AUGMENTED_ASSIGNMENT
  TK_EOF
  TK_FALSE
  TK_TRUE
  TK_PUB
  TK_PRIV
  TK_READONLY
  TK_IMPORT
  TK_EXTERN
  TK_BREAK
  TK_CONTINUE
  TK_STRUCT
  TK_ENUM
  TK_TRAIT
  TK_DERIVE
  TK_IMPL
  TK_WITH
  TK_RAISE
  TK_THROW
  TK_TRY
  TK_CATCH
  TK_ASYNC
  TK_TYPEALIAS
  TK_TRAITALIAS
  TK_FNALIAS
  TK_EQUAL
  TK_LPAREN
  TK_RPAREN
  TK_COMMA
  TK_MINUS
  TK_QUESTION
  TK_EXCLAMATION
  TK_DOT_LIDENT
  TK_DOT_UIDENT
  TK_DOT_INT
  TK_DOT_LPAREN
  TK_COLONCOLON
  TK_COLON
  TK_SEMI
  TK_LBRACKET
  TK_PLUS
  TK_RBRACKET
  TK_UNDERSCORE
  TK_BAR
  TK_LBRACE
  TK_RBRACE
  TK_AMPERAMPER
  TK_AMPER
  TK_CARET
  TK_BARBAR
  TK_PACKAGE_NAME
  TK_AS
  TK_PIPE
  TK_ELSE
  TK_FN
  TK_IF
  TK_LET
  TK_CONST
  TK_MATCH
  TK_USING
  TK_MUTABLE
  TK_TYPE
  TK_FAT_ARROW
  TK_THIN_ARROW
  TK_WHILE
  TK_RETURN
  TK_DOTDOT
  TK_RANGE_INCLUSIVE
  TK_RANGE_EXCLUSIVE
  TK_ELLIPSIS
  TK_TEST
  TK_LOOP
  TK_GUARD
  TK_DEFER
  TK_FOR
  TK_IN
  TK_IS
  TK_SUBERROR
  TK_AND
  TK_LETREC
  TK_ENUMVIEW
  TK_NORAISE
  TK_TRY_QUESTION
  TK_TRY_EXCLAMATION
}
fn TokenKind::to_expect_string(Self) -> String
impl Compare for TokenKind
impl Eq for TokenKind
impl Hash for TokenKind
impl Show for TokenKind

// Type aliases
pub typealias String as ByteLiteral

pub typealias String as BytesLiteral

pub typealias String as CharLiteral

pub typealias Array[InterpElem] as InterpLiteral

pub typealias String as StringLiteral

pub typealias (Token, @basic.Position, @basic.Position) as Triple

pub typealias Array[(Token, @basic.Position, @basic.Position)] as Triples

// Traits

