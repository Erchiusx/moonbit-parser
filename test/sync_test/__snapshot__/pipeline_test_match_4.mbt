fn f(x: FixedArray[Int]) -> Int {
  match x {
    [ ] => 0
    [ a ] => a
    [ a, b ] => a + b
    [ 1, .. _, a ] => a + 1
    [ 2, a, .. _, b, c ] => a + b + c
    _ => 0
  }
}

fn g(x: FixedArray[FixedArray[Int]]) -> Int {
  match x {
    [  ] => 0
    [ [ a ], [ b ] ] => a + b
    [ [ a, .. _, b ], [ c, .. _, d ] ] => a + b + c + d
    [ [ a, b, c, .. _, d, e, f ], .. _ ] => a + b + c + d + e + f
    [ [ ], [ .. _, 1, a ], .. _, [ b, 2, .. _ ], [ ] ] => a + b
    [ [ ], [ .. _ ], .. _, [ .. _ ], [ ] ] => 1
    _ => 2
  }
}

fn t(x: Int, y: Int) -> Unit {
  if x == y {
    println(".")
  } else {
    abort("error expect \{y} but got \{x}")
  }
}

fn init {
  t(f([]), 0)
  t(f([1]), 1)
  t(f([1, 2]), 3)
  t(f([1, 2, 3]), 4)
  t(f([2, 3, 4, 5, 6]), 14)
  t(f([3, 4, 5, 6]), 0)

  t(g([]), 0)
  t(g([[1],[2]]), 3)
  t(g([[1, 2], [3, 4, 5]]), 11)
  t(g([[1, 2, 3, 4, 5, 6, 7, 8], [], []]), 27)
  t(g([[], [ 123 ], [], [ 456 ], []]), 1)
  t(g([[], [ 3, 1, 3 ], [], [ 4, 2, 4 ], []]), 7)
  t(g([[], [], [], [ 4, 5, 6 ], []]), 1)
  t(g([[1], [ 1, 2, 3 ], [], [ 4, 5, 6 ], []]), 2)
}
