///|
fn f(view : StringView) -> Unit {
  match view {
    ['ğŸ¤£', .. rest] => {
      println("first")
      println(rest)
    }
    [.. rest, 'ğŸ¤£'] => {
      println("last")
      println(rest)
    }
    [a,  .. rest,  b] => {
      if a == b {
        println("head and tail are the same")
      }
      println(rest)
    }
    [x] => {
      println("singleton")
      println(x)
    }
    _ => println("match failed")
  }
}

///|
fn p(view : StringView) -> Bool {
  match view {
    [] | [_] => true
    [a,  .. rest,  b] => a == b && p(rest)
  }
}

///|
fn main {
  f("ğŸ¤£hello".view())
  f("helloğŸ¤£".view())
  f("hello".view())
  f("helloh".view())
  f("ğŸ˜‚".view())
  let s = "xxğŸ¤£ğŸ¤£ğŸ¤£xx"
  println(p("xxğŸ¤£ğŸ¤£ğŸ¤£xx".view()))
  println(p("xxğŸ¤£ğŸ¤£ğŸ¤£xx".view(start_offset=1)))
  println(p("xxğŸ¤£ğŸ¤£ğŸ¤£xx".view(end_offset=9)))
  println(p("xxğŸ¤£ğŸ¤£ğŸ¤£xx".view(start_offset=1, end_offset=9)))
  println(p("xxğŸ¤£ğŸ¤£xx".view()))
  println(p("xxğŸ¤£xx".view()))
  println(p("xxğŸ˜‚ğŸ¤£xx".view()))
}
