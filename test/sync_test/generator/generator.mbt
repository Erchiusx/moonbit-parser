///|
pub fn normalize(json : String) -> String {
  let json = @json.parse(json) catch {
    err => {
      println(err)
      abort(err.to_string())
    }
  }
  json.stringify(indent=2).trim_end(char_set=" ").to_string()
}

///|
pub fn gen_test_for_parser(name : String) -> String {
  (
    $|test "\{name}" (t : @test.T) {
    $|  t.run()
    $|}
  )
}

///|
pub fn gen_test_for_lexer(name : String) -> String {
  (
    $|test "lexing \{name}" (t : @test.T) {
    $|  lexer_test(t)
    $|}
  )
}

///|
let root = "test/sync_test"

///|
let snapshot_path : String = root + "/__snapshot__"

///|
let output_for_parser : String = root + "/parser.mbt"

///|
let output_for_lexer : String = root + "/lexer.mbt"

///|
enum Mode {
  Parser
  Lexer
}

///|
fn generate(mode~ : Mode) -> Unit {
  try {
    let tests = match mode {
      Parser =>
        @fs.read_dir(snapshot_path).filter(name => !name.has_suffix(
            ".tokens.json",
          ) &&
          name.has_suffix(".json"))
      Lexer =>
        @fs.read_dir(snapshot_path).filter(name => name.has_suffix(
          ".tokens.json",
        ))
    }
    tests.each(name => {
      let target = snapshot_path + "/" + name
      let content = @fs.read_file_to_string(target) |> normalize
      @fs.write_string_to_file(target, content)
    })
    let buf = StringBuilder::new()
    buf.write_string(
      "// This file is @generated by test/sync_test/generator, DO NOT EDIT!\n\n",
    )
    for name in tests {
      buf
      ..write_string(
        match mode {
          Parser =>
            gen_test_for_parser(name.split(".").head().unwrap().to_string())
          Lexer =>
            gen_test_for_lexer(name.split(".").head().unwrap().to_string())
        },
      )
      ..write_string("\n\n")
    }
    let output = match mode {
      Parser => output_for_parser
      Lexer => output_for_lexer
    }
    @fs.write_string_to_file(output, buf.to_string())
  } catch {
    err => println(err)
  }
}

///|
fn main {
  generate(mode=Parser)
  generate(mode=Lexer)
}
