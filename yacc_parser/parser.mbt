///|
pub suberror ParseError {
  UnexpectedToken(Token, (Position, Position), Array[TokenKind])
  UnexpectedEndOfInput(Position, Array[TokenKind])
} derive(Show)

///|
typealias Error as YYObj

///|
priv suberror YYObj_Void

///|
priv suberror YYObj_Int Int

///|
priv suberror YYObj_Var Var

///|
priv suberror YYObj_Bool Bool

///|
priv suberror YYObj_Case Case

///|
priv suberror YYObj_Expr Expr

///|
priv suberror YYObj_Func Func

///|
priv suberror YYObj_Impl Impl

///|
priv suberror YYObj_List_Case_ List[Case]

///|
priv suberror YYObj_List_Expr_ List[Expr]

///|
priv suberror YYObj_List_Impl_ List[Impl]

///|
priv suberror YYObj_List_Type_ List[Type]

///|
priv suberror YYObj_List_String_ List[String]

///|
priv suberror YYObj_List_Pattern_ List[Pattern]

///|
priv suberror YYObj_List_Argument_ List[Argument]

///|
priv suberror YYObj_List_FieldDef_ List[FieldDef]

///|
priv suberror YYObj_List_FieldPat_ List[FieldPat]

///|
priv suberror YYObj_List_Attribute_ List[Attribute]

///|
priv suberror YYObj_List_FieldDecl_ List[FieldDecl]

///|
priv suberror YYObj_List_Parameter_ List[Parameter]

///|
priv suberror YYObj_List_Statement_ List[Statement]

///|
priv suberror YYObj_List_ConstrDecl_ List[ConstrDecl]

///|
priv suberror YYObj_List_MapPatElem_ List[MapPatElem]

///|
priv suberror YYObj_List_AliasTarget_ List[AliasTarget]

///|
priv suberror YYObj_List_ConstrParam_ List[ConstrParam]

///|
priv suberror YYObj_List_MapExprElem_ List[MapExprElem]

///|
priv suberror YYObj_List_ArrayPattern_ List[ArrayPattern]

///|
priv suberror YYObj_List_ArrowFnParam_ List[ArrowFnParam]

///|
priv suberror YYObj_List_ConstrPatArg_ List[ConstrPatArg]

///|
priv suberror YYObj_List_MultiArgCase_ List[MultiArgCase]

///|
priv suberror YYObj_List_TypeVarBinder_ List[TypeVarBinder]

///|
priv suberror YYObj_List_SpreadableElem_ List[SpreadableElem]

///|
priv suberror YYObj_List_TypeDeclBinder_ List[TypeDeclBinder]

///|
priv suberror YYObj_List_TraitMethodDecl_ List[TraitMethodDecl]

///|
priv suberror YYObj_List_DerivingDirective_ List[DerivingDirective]

///|
priv suberror YYObj_List_MultilineStringElem_ List[MultilineStringElem]

///|
priv suberror YYObj_List_Binder__ List[Binder?]

///|
priv suberror YYObj_List__Binder__Expr__ List[(Binder, Expr)]

///|
priv suberror YYObj_List__ArrowFnParam__Type___ List[(ArrowFnParam, Type?)]

///|
priv suberror YYObj_Type Type

///|
priv suberror YYObj_Label Label

///|
priv suberror YYObj_Binder Binder

///|
priv suberror YYObj_Option_Bool_ Bool?

///|
priv suberror YYObj_Option_Expr_ Expr?

///|
priv suberror YYObj_Option_List_Type__ List[Type]?

///|
priv suberror YYObj_Option_List_Parameter__ List[Parameter]?

///|
priv suberror YYObj_Option_List_ConstrParam__ List[ConstrParam]?

///|
priv suberror YYObj_Option_List_TypeVarBinder__ List[TypeVarBinder]?

///|
priv suberror YYObj_Option_List_TypeDeclBinder__ List[TypeDeclBinder]?

///|
priv suberror YYObj_Option_Type_ Type?

///|
priv suberror YYObj_Option_Unit_ Unit?

///|
priv suberror YYObj_Option_Label_ Label?

///|
priv suberror YYObj_Option_Binder_ Binder?

///|
priv suberror YYObj_Option_Location_ Location?

///|
priv suberror YYObj_Option_TypeName_ TypeName?

///|
priv suberror YYObj_Option__list_List_TypeVarConstraint__ @list.List[
  TypeVarConstraint,
]?

///|
priv suberror YYObj_Option__List_ConstrPatArg___Bool__ (
  List[ConstrPatArg],
  Bool,
)?

///|
priv suberror YYObj_Option__String__Location__ (String, Location)?

///|
priv suberror YYObj_Option__StringLiteral__Location__ (StringLiteral, Location)?

///|
priv suberror YYObj_String String

///|
priv suberror YYObj_Comment Comment

///|
priv suberror YYObj_FunDecl FunDecl

///|
priv suberror YYObj_Pattern Pattern

///|
priv suberror YYObj_Accessor Accessor

///|
priv suberror YYObj_Argument Argument

///|
priv suberror YYObj_Constant Constant

///|
priv suberror YYObj_DeclBody DeclBody

///|
priv suberror YYObj_FieldDef FieldDef

///|
priv suberror YYObj_FieldPat FieldPat

///|
priv suberror YYObj_Location Location

///|
priv suberror YYObj_TypeName TypeName

///|
priv suberror YYObj_ApplyAttr ApplyAttr

///|
priv suberror YYObj_Attribute Attribute

///|
priv suberror YYObj_ErrorType ErrorType

///|
priv suberror YYObj_FieldDecl FieldDecl

///|
priv suberror YYObj_LeftValue LeftValue

///|
priv suberror YYObj_LongIdent LongIdent

///|
priv suberror YYObj_Parameter Parameter

///|
priv suberror YYObj_Statement Statement

///|
priv suberror YYObj_ConstrDecl ConstrDecl

///|
priv suberror YYObj_MapPatElem MapPatElem

///|
priv suberror YYObj_Visibility Visibility

///|
priv suberror YYObj_AliasTarget AliasTarget

///|
priv suberror YYObj_CharLiteral CharLiteral

///|
priv suberror YYObj_ConstrParam ConstrParam

///|
priv suberror YYObj_Constructor Constructor

///|
priv suberror YYObj_MapExprElem MapExprElem

///|
priv suberror YYObj_ArrayPattern ArrayPattern

///|
priv suberror YYObj_ConstrPatArg ConstrPatArg

///|
priv suberror YYObj_DotDotBinder DotDotBinder

///|
priv suberror YYObj_MultiArgCase MultiArgCase

///|
priv suberror YYObj_ArrayPatterns ArrayPatterns

///|
priv suberror YYObj_InterpLiteral InterpLiteral

///|
priv suberror YYObj_LocalTypeDecl LocalTypeDecl

///|
priv suberror YYObj_StringLiteral StringLiteral

///|
priv suberror YYObj_TypeVarBinder TypeVarBinder

///|
priv suberror YYObj_SpreadableElem SpreadableElem

///|
priv suberror YYObj_TypeDeclBinder TypeDeclBinder

///|
priv suberror YYObj_TraitMethodDecl TraitMethodDecl

///|
priv suberror YYObj_DerivingDirective DerivingDirective

///|
priv suberror YYObj_TypeVarConstraint TypeVarConstraint

///|
priv suberror YYObj_MultilineStringElem MultilineStringElem

///|
priv suberror YYObj__list_List_TypeVarConstraint_ @list.List[TypeVarConstraint]

///|
priv suberror YYObj__list_List__Binder__Type___Func__ @list.List[
  (Binder, Type?, Func),
]

///|
priv suberror YYObj_Expr_ Expr?

///|
priv suberror YYObj_Type_ Type?

///|
priv suberror YYObj_Label_ Label?

///|
priv suberror YYObj_Binder_ Binder?

///|
priv suberror YYObj_String_ String?

///|
priv suberror YYObj_Location_ Location?

///|
priv suberror YYObj__Bool__Location_ (Bool, Location)

///|
priv suberror YYObj__Expr__Bool_ (Expr, Bool)

///|
priv suberror YYObj__List_FieldDef___Bool_ (List[FieldDef], Bool)

///|
priv suberror YYObj__List_FieldDef___TrailingMark_ (
  List[FieldDef],
  TrailingMark,
)

///|
priv suberror YYObj__List_FieldPat___Bool_ (List[FieldPat], Bool)

///|
priv suberror YYObj__List_Statement___Bool_ (List[Statement], Bool)

///|
priv suberror YYObj__List_MapPatElem___Bool_ (List[MapPatElem], Bool)

///|
priv suberror YYObj__List_ConstrPatArg___Bool_ (List[ConstrPatArg], Bool)

///|
priv suberror YYObj__List_LocalTypeDecl___Expr_ (List[LocalTypeDecl], Expr)

///|
priv suberror YYObj__Type__ErrorType_ (Type, ErrorType)

///|
priv suberror YYObj__Binder__Expr_ (Binder, Expr)

///|
priv suberror YYObj__Binder__Location__ (Binder, Location?)

///|
priv suberror YYObj__String__Location_ (String, Location)

///|
priv suberror YYObj__StringLiteral__FunDecl_ (StringLiteral, FunDecl)

///|
priv suberror YYObj__StringLiteral__Location_ (StringLiteral, Location)

///|
priv suberror YYObj__Type___ErrorType_ (Type?, ErrorType)

///|
priv suberror YYObj__TypeName___Binder_ (TypeName?, Binder)

///|
priv suberror YYObj__Bool__Label___List_AliasTarget__ (
  Bool,
  Label?,
  List[AliasTarget],
)

///|
priv suberror YYObj__Binder__Type___Func_ (Binder, Type?, Func)

///|
priv suberror YYObj__String__String___String_ (String, String?, String)

///|
priv suberror YYObj___TypeName___Binder___Location___List_TypeVarBinder__ (
  (TypeName?, Binder),
  Location?,
  List[TypeVarBinder],
)

///|
priv suberror YYObj__List_Attribute___Visibility__String__Location_ (
  List[Attribute],
  Visibility,
  String,
  Location,
)

///|
priv suberror YYObj__Label___Label___Bool__List_AliasTarget__ (
  Label?,
  Label?,
  Bool,
  List[AliasTarget],
)

///|
priv suberror YYObj__List_Attribute___Bool__Visibility__Binder__Type__ (
  List[Attribute],
  Bool,
  Visibility,
  Binder,
  Type?,
)

///|
priv suberror YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__ (
  List[Attribute],
  Visibility,
  String,
  Location,
  List[TypeDeclBinder],
)

///|
type YYState = (YYSymbol) -> YYDecision

///|
type YYAction = (Position, ArrayView[(YYObj, Position, Position)]) -> YYObj

///|
priv enum YYDecision {
  Accept
  Shift(YYState)
  Reduce(Int, YYSymbol, YYAction)
  ReduceNoLookahead(Int, YYSymbol, YYAction)
  Error
}

///|
priv enum YYSymbol {
  T_CHAR
  T_INT
  T_BYTE
  T_BYTES
  T_FLOAT
  T_DOUBLE
  T_STRING
  T_MULTILINE_STRING
  T_MULTILINE_INTERP
  T_INTERP
  T_ATTRIBUTE
  T_LIDENT
  T_UIDENT
  T_POST_LABEL
  T_COMMENT
  T_NEWLINE
  T_INFIX1
  T_INFIX2
  T_INFIX3
  T_INFIX4
  T_AUGMENTED_ASSIGNMENT
  T_EOF
  T_FALSE
  T_TRUE
  T_PUB
  T_PRIV
  T_READONLY
  T_IMPORT
  T_EXTERN
  T_BREAK
  T_CONTINUE
  T_STRUCT
  T_ENUM
  T_TRAIT
  T_DERIVE
  T_IMPL
  T_WITH
  T_RAISE
  T_THROW
  T_TRY
  T_CATCH
  T_ASYNC
  T_TYPEALIAS
  T_TRAITALIAS
  T_FNALIAS
  T_EQUAL
  T_LPAREN
  T_RPAREN
  T_COMMA
  T_MINUS
  T_QUESTION
  T_EXCLAMATION
  T_DOT_LIDENT
  T_DOT_UIDENT
  T_DOT_INT
  T_DOT_LPAREN
  T_COLONCOLON
  T_COLON
  T_SEMI
  T_LBRACKET
  T_PLUS
  T_RBRACKET
  T_UNDERSCORE
  T_BAR
  T_LBRACE
  T_RBRACE
  T_AMPERAMPER
  T_AMPER
  T_CARET
  T_BARBAR
  T_PACKAGE_NAME
  T_AS
  T_PIPE
  T_ELSE
  T_FN
  T_IF
  T_LET
  T_CONST
  T_MATCH
  T_USING
  T_MUTABLE
  T_TYPE
  T_FAT_ARROW
  T_THIN_ARROW
  T_WHILE
  T_RETURN
  T_DOTDOT
  T_RANGE_INCLUSIVE
  T_RANGE_EXCLUSIVE
  T_ELLIPSIS
  T_TEST
  T_LOOP
  T_GUARD
  T_DEFER
  T_FOR
  T_IN
  T_IS
  T_SUBERROR
  T_AND
  T_LETREC
  T_ENUMVIEW
  T_NORAISE
  T_TRY_QUESTION
  T_TRY_EXCLAMATION
  NT_parameter
  NT_parameters
  NT_type_parameters
  NT_optional_type_parameters
  NT_optional_type_parameters_no_constraints
  NT_fun_binder
  NT_fun_header
  NT_fun_header_generic
  NT_local_type_decl
  NT_extern_fun_header
  NT_block_expr
  NT_local_types_and_stmts
  NT_block_expr_with_local_types
  NT_impl_body
  NT_expression
  NT_val_header
  NT_structure
  NT_structure_item
  NT_pub_attr
  NT_type_header
  NT_suberror_header
  NT_struct_header
  NT_enum_header
  NT_batch_type_alias_targets
  NT_func_alias_targets
  NT_deriving_directive
  NT_deriving_directive_list
  NT_trait_method_decl
  NT_wildcard
  NT_trait_method_param
  NT_qual_ident
  NT_qual_ident_simple_expr
  NT_qual_ident_ty
  NT_optional_bang
  NT_fn_header
  NT_fn_header_no_binder
  NT_letand_func
  NT_and_func
  NT_statement
  NT_guard_statement
  NT_expr_statement_no_break_continue_return
  NT_expr_statement
  NT_loop_label_colon
  NT_while_expr
  NT_single_pattern_case
  NT_single_pattern_cases
  NT_multi_pattern_case
  NT_catch_keyword
  NT_try_expr
  NT_if_expr
  NT_match_header
  NT_match_expr
  NT_loop_expr
  NT_for_binders
  NT_optional_else
  NT_for_expr
  NT_foreach_expr
  NT_foreach_binder
  NT_expr
  NT_simple_try_expr
  NT_arrow_fn_expr
  NT_arrow_fn_prefix
  NT_arrow_fn_prefix_no_constraint
  NT_pipe_expr
  NT_infix_expr
  NT_postfix_expr
  NT_range_expr
  NT_prefix_expr
  NT_left_value
  NT_constr
  NT_non_empty_tuple_elems
  NT_non_empty_tuple_elems_with_prefix
  NT_tuple_expr
  NT_anony_fn
  NT_simple_expr
  NT_tvar_binder
  NT_type_decl_binder
  NT_tvar_constraint
  NT_type_name
  NT_multiline_string
  NT_atomic_expr
  NT_simple_constant
  NT_map_syntax_key
  NT_optional_question
  NT_argument
  NT_spreadable_elem
  NT_map_expr_elem
  NT_pattern
  NT_or_pattern
  NT_range_pattern
  NT_simple_pattern
  NT_array_sub_pattern
  NT_dotdot_binder
  NT_array_sub_patterns
  NT_error_annotation
  NT_return_type
  NT_func_return_type
  NT_error_type
  NT_simple_type
  NT_type_
  NT_record_decl_field
  NT_constructor_param
  NT_enum_constructor
  NT_record_defn
  NT_record_defn_single
  NT_non_empty_fields_pat
  NT_fields_pat_single
  NT_non_empty_map_elems_pat
  NT_constr_pat_arguments
  NT_constr_pat_arguments_no_open
  NT_constr_pat_argument
  NT_list_commas_parameter_
  NT_non_empty_list_commas_id_tvar_binder__
  NT_option_type_parameters_
  NT_non_empty_list_commas_id_type_decl_binder__
  NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__
  NT_non_empty_list_commas_type__
  NT_option_parameters_
  NT_list_semis_record_decl_field_
  NT_list_semis_enum_constructor_
  NT_list_semis_rev_statement_
  NT_list_semis_structure_item_
  NT_option_type__
  NT_non_empty_list_MULTILINE_STRING_
  NT_separated_nonempty_list_PLUS_tvar_constraint_
  NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___
  NT_list_semis_trait_method_decl_
  NT_option_loced_string_
  NT_non_empty_list_attribute_
  NT_batch_type_alias_target_DOT_UIDENT_
  NT_batch_type_alias_target_UIDENT_
  NT_non_empty_list_commas_batch_type_alias_target_UIDENT__
  NT_func_alias_type_name_LIDENT_UIDENT_
  NT_func_alias_target_LIDENT_
  NT_func_alias_target_DOT_LIDENT_
  NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_
  NT_option_func_alias_type_name_LIDENT_UIDENT__
  NT_non_empty_list_commas_func_alias_target_LIDENT__
  NT_list_commas_argument_
  NT_list_commas_deriving_directive_
  NT_list_commas_trait_method_param_
  NT_option_preceded_EQUAL_wildcard__
  NT_none_empty_list_semis_rev_with_trailing_info_statement_
  NT_list_and_func_
  NT_list_semis_multi_pattern_case_
  NT_option_expr_
  NT_list_commas_no_trailing_expr_
  NT_option_preceded_IF_infix_expr__
  NT_list_semis_single_pattern_case_
  NT_non_empty_list_commas_pattern_
  NT_non_empty_list_semis_single_pattern_case_
  NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__
  NT_option_infix_expr_
  NT_non_empty_list_commas_foreach_binder_
  NT_list_commas_with_trailing_info_record_defn_single_
  NT_list_commas_record_defn_single_
  NT_list_commas_map_expr_elem_
  NT_list_commas_spreadable_elem_
  NT_non_empty_list_multiline_string_
  NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__
  NT_option_COMMA_
  NT_non_empty_list_commas_array_sub_pattern_
  NT_option_MUTABLE_
  NT_non_empty_list_commas_constructor_param_
  NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__
  NT_option_eq_int_tag_
  NT_non_empty_list_commas_with_trailing_info_record_defn_single_
  NT_non_empty_list_commas_fields_pat_single_
  NT_non_empty_list_commas_with_tail_fields_pat_single_
  NT_non_empty_list_commas_map_elem_pat_
  NT_non_empty_list_commas_with_tail_map_elem_pat_
  NT_option_QUESTION_
  NT_non_empty_list_commas_parameter_
  NT_non_empty_list_commas_rev_id_tvar_binder__
  NT_non_empty_list_commas_rev_id_type_decl_binder__
  NT_non_empty_list_commas_rev_type__
  NT_non_empty_list_semis_record_decl_field_
  NT_non_empty_list_semis_enum_constructor_
  NT_non_empty_list_semis_rev_statement_
  NT_non_empty_list_semis_structure_item_
  NT_non_empty_list_semis_trait_method_decl_
  NT_non_empty_list_commas_rev_batch_type_alias_target_UIDENT__
  NT_option_preceded_AS_binder__
  NT_non_empty_list_commas_rev_func_alias_target_LIDENT__
  NT_non_empty_list_commas_argument_
  NT_non_empty_list_commas_deriving_directive_
  NT_non_empty_list_commas_trait_method_param_
  NT_non_empty_list_semi_rev_aux_statement_
  NT_option_SEMI_
  NT_non_empty_list_semis_multi_pattern_case_
  NT_non_empty_list_commas_no_trailing_expr_
  NT_non_empty_list_commas_rev_pattern_
  NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__
  NT_non_empty_list_commas_rev_foreach_binder_
  NT_non_empty_list_commas_record_defn_single_
  NT_non_empty_list_commas_map_expr_elem_
  NT_non_empty_list_commas_spreadable_elem_
  NT_non_empty_list_commas_rev_array_sub_pattern_
  NT_non_empty_list_commas_rev_constructor_param_
  NT_non_empty_list_commas_rev_record_defn_single_
  NT_non_empty_list_commas_rev_fields_pat_single_
  NT_non_empty_list_commas_rev_map_elem_pat_
  NT_non_empty_list_commas_rev_parameter_
  NT_non_empty_list_commas_rev_argument_
  NT_non_empty_list_commas_rev_deriving_directive_
  NT_non_empty_list_commas_rev_trait_method_param_
  NT_non_empty_list_commas_rev_expr_
  NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__
  NT_non_empty_list_commas_rev_map_expr_elem_
  NT_non_empty_list_commas_rev_spreadable_elem_
  EOI
}

// Workaround for EOI unused warning

///|
fn init {
  match (EOI : YYSymbol) {
    EOI => ()
    _ => ()
  }
}

// file:///./parser.mbty
// 415|    list_semis(structure_item) EOF { $1 }

///|
fn yy_action_0(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Impl_(_dollar1)
  YYObj_List_Impl_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 214|    non_empty_list_semis(X) { $1 }

///|
fn yy_action_1(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Impl_(_dollar1)
  YYObj_List_Impl_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 203|    X option(SEMI) { @list.singleton($1) }

///|
fn yy_action_2(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Impl(_dollar1)
  YYObj_List_Impl_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_3(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_6(_last_pos, _args[0:1])
  guard _args[1].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[3].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[2].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[2].1
  let _end_pos_of_item4 = _args[2].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 680|    attributes is_async "test" option(loced_string) option(parameters) block_expr_with_local_types {
// 681|    let (local_types, expr) = $6
// 682|    TopTest(
// 683|      expr~,
// 684|      name = $4,
// 685|      params = $5,
// 686|      local_types~,
// 687|      is_async = $2,
// 688|      loc = mk_loc($sloc),
// 689|      attrs = $1,
// 690|      doc = DocString::empty()
// 691|    )
// 692|  }

///|
fn yy_action_7(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_6(_last_pos, _args[0:1])
  guard _args[4].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar6)
  guard _args[2].0 is YYObj_Option__StringLiteral__Location__(_dollar4)
  guard _args[3].0 is YYObj_Option_List_Parameter__(_dollar5)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (local_types, expr) = _dollar6
      TopTest(
        expr~,
        name=_dollar4,
        params=_dollar5,
        local_types~,
        is_async=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_8(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_9(_last_pos, _args[0:0])
  guard _args[0].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[2].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[1].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[1].1
  let _end_pos_of_item4 = _args[1].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_10(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_6(_args[0].2, _args[1:2])
  guard _args[2].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[4].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[3].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_12(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_9(_args[0].2, _args[1:1])
  guard _args[1].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[3].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[2].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[2].1
  let _end_pos_of_item4 = _args[2].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 360|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) func_return_type {
// 361|    let (type_name, f) = $6
// 362|    let (return_type, error_type) = $10
// 363|    let fn_decl = FunDecl::{
// 364|      type_name,
// 365|      name: f,
// 366|      has_error : $7,
// 367|      is_async : false,
// 368|      quantifiers: $8,
// 369|      decl_params: $9,
// 370|      params_loc: mk_loc($loc($9)),
// 371|      return_type,
// 372|      error_type,
// 373|      vis: $2,
// 374|      doc: DocString::empty(),
// 375|      attrs: $1,
// 376|    }
// 377|    ($4, fn_decl)
// 378|  }

///|
fn yy_action_13(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[4].0 is YYObj__TypeName___Binder_(_dollar6)
  guard _args[8].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[5].0 is YYObj_Location_(_dollar7)
  guard _args[6].0 is YYObj_List_TypeVarBinder_(_dollar8)
  guard _args[7].0 is YYObj_Option_List_Parameter__(_dollar9)
  let _start_pos_of_item8 = _args[7].1
  let _end_pos_of_item8 = _args[7].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _args[2].0 is YYObj_StringLiteral(_dollar4)
  YYObj__StringLiteral__FunDecl_(
    {
      ()
      let (type_name, f) = _dollar6
      let (return_type, error_type) = _dollar10
      let fn_decl = FunDecl::{
        type_name,
        name: f,
        has_error: _dollar7,
        is_async: false,
        quantifiers: _dollar8,
        decl_params: _dollar9,
        params_loc: mk_loc((_start_pos_of_item8, _end_pos_of_item8)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
      (_dollar4, fn_decl)
    },
  )
}

// file:///./parser.mbty
// 435|    attributes visibility "extern" "type" UIDENT optional_type_parameters_no_constraints deriving_directive_list {
// 436|    TopTypeDef(
// 437|      TypeDecl::{
// 438|        tycon : $5,
// 439|        tycon_loc : mk_loc($loc($5)),
// 440|        params : $6,
// 441|        components: Extern,
// 442|        type_vis : $2,
// 443|        doc : DocString::empty(),
// 444|        deriving: $7,
// 445|        loc : mk_loc($sloc),
// 446|        attrs : $1
// 447|      }
// 448|    )
// 449|  }

///|
fn yy_action_14(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[3].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar6)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[5].0 is YYObj_List_DerivingDirective_(_dollar7)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar5,
        tycon_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        params: _dollar6,
        components: Extern,
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: _dollar7,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_15(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_16(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_17(_args[2].2, _args[3:5])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_18(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_16(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_19(_args[2].2, _args[3:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_20(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_17(_args[2].2, _args[3:5])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_21(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_19(_args[2].2, _args[3:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 610|    attributes visibility "fnalias" func_alias_targets {
// 611|    let (pkg, type_name, is_list, targets) = $4
// 612|    TopFuncAlias(
// 613|      pkg~,
// 614|      type_name~,
// 615|      targets~,
// 616|      vis = $2,
// 617|      attrs = $1,
// 618|      is_list~,
// 619|      doc = DocString::empty(),
// 620|      loc = mk_loc($sloc)
// 621|    )
// 622|  }

///|
fn yy_action_22(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj__Label___Label___Bool__List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (pkg, type_name, is_list, targets) = _dollar4
      TopFuncAlias(
        pkg~,
        type_name~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 623|    attributes visibility "trait" UIDENT option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {
// 624|    let name = Binder::{ name: $4, loc: mk_loc($loc($4)) }
// 625|    let supers = match $5 {
// 626|      None => @list.empty()
// 627|      Some(supers) => supers
// 628|    }
// 629|    TopTrait(
// 630|      TraitDecl::{
// 631|        name,
// 632|        supers,
// 633|        methods: $7,
// 634|        vis: $2,
// 635|        loc: mk_loc($sloc),
// 636|        attrs: $1,
// 637|        doc : DocString::empty()
// 638|      }
// 639|    )
// 640|  }

///|
fn yy_action_23(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_Option__list_List_TypeVarConstraint__(_dollar5)
  guard _args[5].0 is YYObj_List_TraitMethodDecl_(_dollar7)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let name = Binder::{
        name: _dollar4,
        loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      }
      let supers = match _dollar5 {
        None => @list.empty()
        Some(supers) => supers
      }
      TopTrait(TraitDecl::{
        name,
        supers,
        methods: _dollar7,
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      })
    },
  )
}

// file:///./parser.mbty
// 641|    attributes visibility "typealias" batch_type_alias_targets {
// 642|    let (is_list, pkg, targets) = $4
// 643|    TopBatchTypeAlias(
// 644|      pkg~,
// 645|      targets~,
// 646|      vis = $2,
// 647|      attrs = $1,
// 648|      is_list~,
// 649|      doc = DocString::empty(),
// 650|      loc = mk_loc($sloc)
// 651|    )
// 652|  }

///|
fn yy_action_24(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTypeAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 653|    attributes visibility "typealias" type_ "as" UIDENT optional_type_parameters_no_constraints {
// 654|    TopTypeDef(
// 655|      TypeDecl::{
// 656|        tycon : $6,
// 657|        tycon_loc : mk_loc($loc($6)),
// 658|        params : $7,
// 659|        components: Alias($4),
// 660|        type_vis : $2,
// 661|        doc : DocString::empty(),
// 662|        deriving: @list.empty(),
// 663|        loc : mk_loc($sloc),
// 664|        attrs : $1
// 665|      }
// 666|    )
// 667|  }

///|
fn yy_action_25(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[4].0 is YYObj_String(_dollar6)
  let _start_pos_of_item5 = _args[4].1
  let _end_pos_of_item5 = _args[4].2
  guard _args[5].0 is YYObj_List_TypeDeclBinder_(_dollar7)
  guard _args[2].0 is YYObj_Type(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar6,
        tycon_loc: mk_loc((_start_pos_of_item5, _end_pos_of_item5)),
        params: _dollar7,
        components: Alias(_dollar4),
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: @list.empty(),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 668|    attributes visibility "traitalias" batch_type_alias_targets {
// 669|    let (is_list, pkg, targets) = $4
// 670|    TopBatchTraitAlias(
// 671|      pkg~,
// 672|      targets~,
// 673|      vis = $2,
// 674|      attrs = $1,
// 675|      is_list~,
// 676|      doc = DocString::empty(),
// 677|      loc = mk_loc($sloc)
// 678|    )
// 679|  }

///|
fn yy_action_26(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTraitAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 693|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters func_return_type impl_body {
// 694|    let (ret_ty, err_ty) = $12
// 695|    TopImpl(
// 696|      self_ty = Some($7),
// 697|      trait_ = $5,
// 698|      method_name = $9,
// 699|      has_error = $10,
// 700|      quantifiers = $4,
// 701|      params = $11,
// 702|      ret_ty~,
// 703|      err_ty~,
// 704|      body = $13,
// 705|      vis = $2,
// 706|      loc = mk_loc($sloc),
// 707|      attrs = $1,
// 708|      doc = DocString::empty()
// 709|    )
// 710|  }

///|
fn yy_action_27(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_16(_args[6].2, _args[7:8])
  guard _args[10].0 is YYObj__Type___ErrorType_(_dollar12)
  guard _args[5].0 is YYObj_Type(_dollar7)
  guard _args[3].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar9)
  guard _args[8].0 is YYObj_Location_(_dollar10)
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[9].0 is YYObj_List_Parameter_(_dollar11)
  guard _args[11].0 is YYObj_DeclBody(_dollar13)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar12
      TopImpl(
        self_ty=Some(_dollar7),
        trait_=_dollar5,
        method_name=_dollar9,
        has_error=_dollar10,
        quantifiers=_dollar4,
        params=_dollar11,
        ret_ty~,
        err_ty~,
        body=_dollar13,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 729|    attributes visibility "impl" optional_type_parameters type_name "for" type_ {
// 730|    TopImplRelation(
// 731|      self_ty = $7,
// 732|      trait_ = $5,
// 733|      quantifiers = $4,
// 734|      vis = $2,
// 735|      attrs = $1,
// 736|      loc = mk_loc($sloc),
// 737|      doc = DocString::empty()
// 738|    )
// 739|  }

///|
fn yy_action_28(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[5].0 is YYObj_Type(_dollar7)
  guard _args[3].0 is YYObj_TypeName(_dollar5)
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      TopImplRelation(
        self_ty=_dollar7,
        trait_=_dollar5,
        quantifiers=_dollar4,
        vis=_dollar2,
        attrs=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 711|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters func_return_type impl_body {
// 712|    let (ret_ty, err_ty) = $10
// 713|    TopImpl(
// 714|      self_ty = None,
// 715|      trait_ = $5,
// 716|      method_name = $7,
// 717|      has_error = $8,
// 718|      quantifiers = $4,
// 719|      params = $9,
// 720|      ret_ty~,
// 721|      err_ty~,
// 722|      body = $11,
// 723|      vis = $2,
// 724|      loc = mk_loc($sloc),
// 725|      attrs = $1,
// 726|      doc = DocString::empty()
// 727|    )
// 728|  }

///|
fn yy_action_29(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_16(_args[4].2, _args[5:6])
  guard _args[8].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[3].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar7)
  guard _args[6].0 is YYObj_Location_(_dollar8)
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[7].0 is YYObj_List_Parameter_(_dollar9)
  guard _args[9].0 is YYObj_DeclBody(_dollar11)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar10
      TopImpl(
        self_ty=None,
        trait_=_dollar5,
        method_name=_dollar7,
        has_error=_dollar8,
        quantifiers=_dollar4,
        params=_dollar9,
        ret_ty~,
        err_ty~,
        body=_dollar11,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 740|    attributes visibility "enumview" optional_type_parameters UIDENT "{" list_semis(enum_constructor) "}" "for" type_ "with" binder parameters block_expr {
// 741|    TopView(
// 742|      quantifiers = $4,
// 743|      source_ty = $10,
// 744|      view_type_name = $5,
// 745|      view_type_loc = mk_loc($loc($5)),
// 746|      view_func_name = $12,
// 747|      parameters = $13,
// 748|      params_loc = mk_loc($loc($13)),
// 749|      view_constrs = $7,
// 750|      body = $14,
// 751|      vis = $2,
// 752|      loc = mk_loc($sloc),
// 753|      attrs = $1,
// 754|      doc = DocString::empty()
// 755|    )
// 756|  }

///|
fn yy_action_30(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_16(_args[9].2, _args[10:11])
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[8].0 is YYObj_Type(_dollar10)
  guard _args[3].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _sub_action_2_result is YYObj_Binder(_dollar12)
  guard _args[11].0 is YYObj_List_Parameter_(_dollar13)
  let _start_pos_of_item12 = _args[11].1
  let _end_pos_of_item12 = _args[11].2
  guard _args[5].0 is YYObj_List_ConstrDecl_(_dollar7)
  guard _args[12].0 is YYObj_Expr(_dollar14)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopView(
        quantifiers=_dollar4,
        source_ty=_dollar10,
        view_type_name=_dollar5,
        view_type_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        view_func_name=_dollar12,
        parameters=_dollar13,
        params_loc=mk_loc((_start_pos_of_item12, _end_pos_of_item12)),
        view_constrs=_dollar7,
        body=_dollar14,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 781|    attributes visibility "type" UIDENT optional_type_parameters_no_constraints { 
// 782|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 783|  }

///|
fn yy_action_31(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 787|    attributes visibility "suberror" UIDENT { ($1, $2, $4, mk_loc($loc($4))) }

///|
fn yy_action_32(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  YYObj__List_Attribute___Visibility__String__Location_(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      )
    },
  )
}

// file:///./parser.mbty
// 791|    attributes visibility "struct" UIDENT optional_type_parameters_no_constraints { 
// 792|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 793|  }

///|
fn yy_action_33(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 797|    attributes visibility "enum" UIDENT optional_type_parameters_no_constraints { 
// 798|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 799|  }

///|
fn yy_action_34(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_35(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_6(_args[1].2, _args[2:3])
  guard _args[3].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[5].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[4].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_37(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_9(_args[1].2, _args[2:2])
  guard _args[2].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[4].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[3].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 360|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) func_return_type {
// 361|    let (type_name, f) = $6
// 362|    let (return_type, error_type) = $10
// 363|    let fn_decl = FunDecl::{
// 364|      type_name,
// 365|      name: f,
// 366|      has_error : $7,
// 367|      is_async : false,
// 368|      quantifiers: $8,
// 369|      decl_params: $9,
// 370|      params_loc: mk_loc($loc($9)),
// 371|      return_type,
// 372|      error_type,
// 373|      vis: $2,
// 374|      doc: DocString::empty(),
// 375|      attrs: $1,
// 376|    }
// 377|    ($4, fn_decl)
// 378|  }

///|
fn yy_action_38(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[5].0 is YYObj__TypeName___Binder_(_dollar6)
  guard _args[9].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[6].0 is YYObj_Location_(_dollar7)
  guard _args[7].0 is YYObj_List_TypeVarBinder_(_dollar8)
  guard _args[8].0 is YYObj_Option_List_Parameter__(_dollar9)
  let _start_pos_of_item8 = _args[8].1
  let _end_pos_of_item8 = _args[8].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _args[3].0 is YYObj_StringLiteral(_dollar4)
  YYObj__StringLiteral__FunDecl_(
    {
      ()
      let (type_name, f) = _dollar6
      let (return_type, error_type) = _dollar10
      let fn_decl = FunDecl::{
        type_name,
        name: f,
        has_error: _dollar7,
        is_async: false,
        quantifiers: _dollar8,
        decl_params: _dollar9,
        params_loc: mk_loc((_start_pos_of_item8, _end_pos_of_item8)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
      (_dollar4, fn_decl)
    },
  )
}

// file:///./parser.mbty
// 435|    attributes visibility "extern" "type" UIDENT optional_type_parameters_no_constraints deriving_directive_list {
// 436|    TopTypeDef(
// 437|      TypeDecl::{
// 438|        tycon : $5,
// 439|        tycon_loc : mk_loc($loc($5)),
// 440|        params : $6,
// 441|        components: Extern,
// 442|        type_vis : $2,
// 443|        doc : DocString::empty(),
// 444|        deriving: $7,
// 445|        loc : mk_loc($sloc),
// 446|        attrs : $1
// 447|      }
// 448|    )
// 449|  }

///|
fn yy_action_39(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[4].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _args[5].0 is YYObj_List_TypeDeclBinder_(_dollar6)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[6].0 is YYObj_List_DerivingDirective_(_dollar7)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar5,
        tycon_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        params: _dollar6,
        components: Extern,
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: _dollar7,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_40(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_16(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_17(_args[3].2, _args[4:6])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_41(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_16(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_19(_args[3].2, _args[4:4])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_42(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_17(_args[3].2, _args[4:6])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_43(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_19(_args[3].2, _args[4:4])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 610|    attributes visibility "fnalias" func_alias_targets {
// 611|    let (pkg, type_name, is_list, targets) = $4
// 612|    TopFuncAlias(
// 613|      pkg~,
// 614|      type_name~,
// 615|      targets~,
// 616|      vis = $2,
// 617|      attrs = $1,
// 618|      is_list~,
// 619|      doc = DocString::empty(),
// 620|      loc = mk_loc($sloc)
// 621|    )
// 622|  }

///|
fn yy_action_44(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[3].0 is YYObj__Label___Label___Bool__List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (pkg, type_name, is_list, targets) = _dollar4
      TopFuncAlias(
        pkg~,
        type_name~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 623|    attributes visibility "trait" UIDENT option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {
// 624|    let name = Binder::{ name: $4, loc: mk_loc($loc($4)) }
// 625|    let supers = match $5 {
// 626|      None => @list.empty()
// 627|      Some(supers) => supers
// 628|    }
// 629|    TopTrait(
// 630|      TraitDecl::{
// 631|        name,
// 632|        supers,
// 633|        methods: $7,
// 634|        vis: $2,
// 635|        loc: mk_loc($sloc),
// 636|        attrs: $1,
// 637|        doc : DocString::empty()
// 638|      }
// 639|    )
// 640|  }

///|
fn yy_action_45(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_Option__list_List_TypeVarConstraint__(_dollar5)
  guard _args[6].0 is YYObj_List_TraitMethodDecl_(_dollar7)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let name = Binder::{
        name: _dollar4,
        loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      }
      let supers = match _dollar5 {
        None => @list.empty()
        Some(supers) => supers
      }
      TopTrait(TraitDecl::{
        name,
        supers,
        methods: _dollar7,
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      })
    },
  )
}

// file:///./parser.mbty
// 641|    attributes visibility "typealias" batch_type_alias_targets {
// 642|    let (is_list, pkg, targets) = $4
// 643|    TopBatchTypeAlias(
// 644|      pkg~,
// 645|      targets~,
// 646|      vis = $2,
// 647|      attrs = $1,
// 648|      is_list~,
// 649|      doc = DocString::empty(),
// 650|      loc = mk_loc($sloc)
// 651|    )
// 652|  }

///|
fn yy_action_46(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[3].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTypeAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 653|    attributes visibility "typealias" type_ "as" UIDENT optional_type_parameters_no_constraints {
// 654|    TopTypeDef(
// 655|      TypeDecl::{
// 656|        tycon : $6,
// 657|        tycon_loc : mk_loc($loc($6)),
// 658|        params : $7,
// 659|        components: Alias($4),
// 660|        type_vis : $2,
// 661|        doc : DocString::empty(),
// 662|        deriving: @list.empty(),
// 663|        loc : mk_loc($sloc),
// 664|        attrs : $1
// 665|      }
// 666|    )
// 667|  }

///|
fn yy_action_47(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[5].0 is YYObj_String(_dollar6)
  let _start_pos_of_item5 = _args[5].1
  let _end_pos_of_item5 = _args[5].2
  guard _args[6].0 is YYObj_List_TypeDeclBinder_(_dollar7)
  guard _args[3].0 is YYObj_Type(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar6,
        tycon_loc: mk_loc((_start_pos_of_item5, _end_pos_of_item5)),
        params: _dollar7,
        components: Alias(_dollar4),
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: @list.empty(),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 668|    attributes visibility "traitalias" batch_type_alias_targets {
// 669|    let (is_list, pkg, targets) = $4
// 670|    TopBatchTraitAlias(
// 671|      pkg~,
// 672|      targets~,
// 673|      vis = $2,
// 674|      attrs = $1,
// 675|      is_list~,
// 676|      doc = DocString::empty(),
// 677|      loc = mk_loc($sloc)
// 678|    )
// 679|  }

///|
fn yy_action_48(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[3].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTraitAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 693|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters func_return_type impl_body {
// 694|    let (ret_ty, err_ty) = $12
// 695|    TopImpl(
// 696|      self_ty = Some($7),
// 697|      trait_ = $5,
// 698|      method_name = $9,
// 699|      has_error = $10,
// 700|      quantifiers = $4,
// 701|      params = $11,
// 702|      ret_ty~,
// 703|      err_ty~,
// 704|      body = $13,
// 705|      vis = $2,
// 706|      loc = mk_loc($sloc),
// 707|      attrs = $1,
// 708|      doc = DocString::empty()
// 709|    )
// 710|  }

///|
fn yy_action_49(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_16(_args[7].2, _args[8:9])
  guard _args[11].0 is YYObj__Type___ErrorType_(_dollar12)
  guard _args[6].0 is YYObj_Type(_dollar7)
  guard _args[4].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar9)
  guard _args[9].0 is YYObj_Location_(_dollar10)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[10].0 is YYObj_List_Parameter_(_dollar11)
  guard _args[12].0 is YYObj_DeclBody(_dollar13)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar12
      TopImpl(
        self_ty=Some(_dollar7),
        trait_=_dollar5,
        method_name=_dollar9,
        has_error=_dollar10,
        quantifiers=_dollar4,
        params=_dollar11,
        ret_ty~,
        err_ty~,
        body=_dollar13,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 729|    attributes visibility "impl" optional_type_parameters type_name "for" type_ {
// 730|    TopImplRelation(
// 731|      self_ty = $7,
// 732|      trait_ = $5,
// 733|      quantifiers = $4,
// 734|      vis = $2,
// 735|      attrs = $1,
// 736|      loc = mk_loc($sloc),
// 737|      doc = DocString::empty()
// 738|    )
// 739|  }

///|
fn yy_action_50(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[6].0 is YYObj_Type(_dollar7)
  guard _args[4].0 is YYObj_TypeName(_dollar5)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      TopImplRelation(
        self_ty=_dollar7,
        trait_=_dollar5,
        quantifiers=_dollar4,
        vis=_dollar2,
        attrs=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 711|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters func_return_type impl_body {
// 712|    let (ret_ty, err_ty) = $10
// 713|    TopImpl(
// 714|      self_ty = None,
// 715|      trait_ = $5,
// 716|      method_name = $7,
// 717|      has_error = $8,
// 718|      quantifiers = $4,
// 719|      params = $9,
// 720|      ret_ty~,
// 721|      err_ty~,
// 722|      body = $11,
// 723|      vis = $2,
// 724|      loc = mk_loc($sloc),
// 725|      attrs = $1,
// 726|      doc = DocString::empty()
// 727|    )
// 728|  }

///|
fn yy_action_51(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_16(_args[5].2, _args[6:7])
  guard _args[9].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[4].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar7)
  guard _args[7].0 is YYObj_Location_(_dollar8)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[8].0 is YYObj_List_Parameter_(_dollar9)
  guard _args[10].0 is YYObj_DeclBody(_dollar11)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar10
      TopImpl(
        self_ty=None,
        trait_=_dollar5,
        method_name=_dollar7,
        has_error=_dollar8,
        quantifiers=_dollar4,
        params=_dollar9,
        ret_ty~,
        err_ty~,
        body=_dollar11,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 740|    attributes visibility "enumview" optional_type_parameters UIDENT "{" list_semis(enum_constructor) "}" "for" type_ "with" binder parameters block_expr {
// 741|    TopView(
// 742|      quantifiers = $4,
// 743|      source_ty = $10,
// 744|      view_type_name = $5,
// 745|      view_type_loc = mk_loc($loc($5)),
// 746|      view_func_name = $12,
// 747|      parameters = $13,
// 748|      params_loc = mk_loc($loc($13)),
// 749|      view_constrs = $7,
// 750|      body = $14,
// 751|      vis = $2,
// 752|      loc = mk_loc($sloc),
// 753|      attrs = $1,
// 754|      doc = DocString::empty()
// 755|    )
// 756|  }

///|
fn yy_action_52(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  let _sub_action_2_result = yy_action_16(_args[10].2, _args[11:12])
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[9].0 is YYObj_Type(_dollar10)
  guard _args[4].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _sub_action_2_result is YYObj_Binder(_dollar12)
  guard _args[12].0 is YYObj_List_Parameter_(_dollar13)
  let _start_pos_of_item12 = _args[12].1
  let _end_pos_of_item12 = _args[12].2
  guard _args[6].0 is YYObj_List_ConstrDecl_(_dollar7)
  guard _args[13].0 is YYObj_Expr(_dollar14)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopView(
        quantifiers=_dollar4,
        source_ty=_dollar10,
        view_type_name=_dollar5,
        view_type_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        view_func_name=_dollar12,
        parameters=_dollar13,
        params_loc=mk_loc((_start_pos_of_item12, _end_pos_of_item12)),
        view_constrs=_dollar7,
        body=_dollar14,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 781|    attributes visibility "type" UIDENT optional_type_parameters_no_constraints { 
// 782|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 783|  }

///|
fn yy_action_53(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 787|    attributes visibility "suberror" UIDENT { ($1, $2, $4, mk_loc($loc($4))) }

///|
fn yy_action_54(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  YYObj__List_Attribute___Visibility__String__Location_(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      )
    },
  )
}

// file:///./parser.mbty
// 791|    attributes visibility "struct" UIDENT optional_type_parameters_no_constraints { 
// 792|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 793|  }

///|
fn yy_action_55(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 797|    attributes visibility "enum" UIDENT optional_type_parameters_no_constraints { 
// 798|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 799|  }

///|
fn yy_action_56(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_57(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_6(_args[0].2, _args[1:2])
  guard _args[2].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[4].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[3].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 680|    attributes is_async "test" option(loced_string) option(parameters) block_expr_with_local_types {
// 681|    let (local_types, expr) = $6
// 682|    TopTest(
// 683|      expr~,
// 684|      name = $4,
// 685|      params = $5,
// 686|      local_types~,
// 687|      is_async = $2,
// 688|      loc = mk_loc($sloc),
// 689|      attrs = $1,
// 690|      doc = DocString::empty()
// 691|    )
// 692|  }

///|
fn yy_action_59(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_6(_args[0].2, _args[1:2])
  guard _args[5].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar6)
  guard _args[3].0 is YYObj_Option__StringLiteral__Location__(_dollar4)
  guard _args[4].0 is YYObj_Option_List_Parameter__(_dollar5)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (local_types, expr) = _dollar6
      TopTest(
        expr~,
        name=_dollar4,
        params=_dollar5,
        local_types~,
        is_async=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_60(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_9(_args[0].2, _args[1:1])
  guard _args[1].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[3].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[2].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[2].1
  let _end_pos_of_item4 = _args[2].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_61(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_6(_args[1].2, _args[2:3])
  guard _args[3].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[5].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[4].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_62(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_9(_args[1].2, _args[2:2])
  guard _args[2].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[4].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[3].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 360|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) func_return_type {
// 361|    let (type_name, f) = $6
// 362|    let (return_type, error_type) = $10
// 363|    let fn_decl = FunDecl::{
// 364|      type_name,
// 365|      name: f,
// 366|      has_error : $7,
// 367|      is_async : false,
// 368|      quantifiers: $8,
// 369|      decl_params: $9,
// 370|      params_loc: mk_loc($loc($9)),
// 371|      return_type,
// 372|      error_type,
// 373|      vis: $2,
// 374|      doc: DocString::empty(),
// 375|      attrs: $1,
// 376|    }
// 377|    ($4, fn_decl)
// 378|  }

///|
fn yy_action_63(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[5].0 is YYObj__TypeName___Binder_(_dollar6)
  guard _args[9].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[6].0 is YYObj_Location_(_dollar7)
  guard _args[7].0 is YYObj_List_TypeVarBinder_(_dollar8)
  guard _args[8].0 is YYObj_Option_List_Parameter__(_dollar9)
  let _start_pos_of_item8 = _args[8].1
  let _end_pos_of_item8 = _args[8].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _args[3].0 is YYObj_StringLiteral(_dollar4)
  YYObj__StringLiteral__FunDecl_(
    {
      ()
      let (type_name, f) = _dollar6
      let (return_type, error_type) = _dollar10
      let fn_decl = FunDecl::{
        type_name,
        name: f,
        has_error: _dollar7,
        is_async: false,
        quantifiers: _dollar8,
        decl_params: _dollar9,
        params_loc: mk_loc((_start_pos_of_item8, _end_pos_of_item8)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
      (_dollar4, fn_decl)
    },
  )
}

// file:///./parser.mbty
// 435|    attributes visibility "extern" "type" UIDENT optional_type_parameters_no_constraints deriving_directive_list {
// 436|    TopTypeDef(
// 437|      TypeDecl::{
// 438|        tycon : $5,
// 439|        tycon_loc : mk_loc($loc($5)),
// 440|        params : $6,
// 441|        components: Extern,
// 442|        type_vis : $2,
// 443|        doc : DocString::empty(),
// 444|        deriving: $7,
// 445|        loc : mk_loc($sloc),
// 446|        attrs : $1
// 447|      }
// 448|    )
// 449|  }

///|
fn yy_action_64(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[4].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _args[5].0 is YYObj_List_TypeDeclBinder_(_dollar6)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[6].0 is YYObj_List_DerivingDirective_(_dollar7)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar5,
        tycon_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        params: _dollar6,
        components: Extern,
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: _dollar7,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_65(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_16(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_17(_args[3].2, _args[4:6])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_66(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_16(_args[2].2, _args[3:4])
  let _sub_action_3_result = yy_action_19(_args[3].2, _args[4:4])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_67(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_17(_args[3].2, _args[4:6])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_68(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_19(_args[3].2, _args[4:4])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 610|    attributes visibility "fnalias" func_alias_targets {
// 611|    let (pkg, type_name, is_list, targets) = $4
// 612|    TopFuncAlias(
// 613|      pkg~,
// 614|      type_name~,
// 615|      targets~,
// 616|      vis = $2,
// 617|      attrs = $1,
// 618|      is_list~,
// 619|      doc = DocString::empty(),
// 620|      loc = mk_loc($sloc)
// 621|    )
// 622|  }

///|
fn yy_action_69(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[3].0 is YYObj__Label___Label___Bool__List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (pkg, type_name, is_list, targets) = _dollar4
      TopFuncAlias(
        pkg~,
        type_name~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 623|    attributes visibility "trait" UIDENT option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {
// 624|    let name = Binder::{ name: $4, loc: mk_loc($loc($4)) }
// 625|    let supers = match $5 {
// 626|      None => @list.empty()
// 627|      Some(supers) => supers
// 628|    }
// 629|    TopTrait(
// 630|      TraitDecl::{
// 631|        name,
// 632|        supers,
// 633|        methods: $7,
// 634|        vis: $2,
// 635|        loc: mk_loc($sloc),
// 636|        attrs: $1,
// 637|        doc : DocString::empty()
// 638|      }
// 639|    )
// 640|  }

///|
fn yy_action_70(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_Option__list_List_TypeVarConstraint__(_dollar5)
  guard _args[6].0 is YYObj_List_TraitMethodDecl_(_dollar7)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let name = Binder::{
        name: _dollar4,
        loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      }
      let supers = match _dollar5 {
        None => @list.empty()
        Some(supers) => supers
      }
      TopTrait(TraitDecl::{
        name,
        supers,
        methods: _dollar7,
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      })
    },
  )
}

// file:///./parser.mbty
// 641|    attributes visibility "typealias" batch_type_alias_targets {
// 642|    let (is_list, pkg, targets) = $4
// 643|    TopBatchTypeAlias(
// 644|      pkg~,
// 645|      targets~,
// 646|      vis = $2,
// 647|      attrs = $1,
// 648|      is_list~,
// 649|      doc = DocString::empty(),
// 650|      loc = mk_loc($sloc)
// 651|    )
// 652|  }

///|
fn yy_action_71(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[3].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTypeAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 653|    attributes visibility "typealias" type_ "as" UIDENT optional_type_parameters_no_constraints {
// 654|    TopTypeDef(
// 655|      TypeDecl::{
// 656|        tycon : $6,
// 657|        tycon_loc : mk_loc($loc($6)),
// 658|        params : $7,
// 659|        components: Alias($4),
// 660|        type_vis : $2,
// 661|        doc : DocString::empty(),
// 662|        deriving: @list.empty(),
// 663|        loc : mk_loc($sloc),
// 664|        attrs : $1
// 665|      }
// 666|    )
// 667|  }

///|
fn yy_action_72(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[5].0 is YYObj_String(_dollar6)
  let _start_pos_of_item5 = _args[5].1
  let _end_pos_of_item5 = _args[5].2
  guard _args[6].0 is YYObj_List_TypeDeclBinder_(_dollar7)
  guard _args[3].0 is YYObj_Type(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar6,
        tycon_loc: mk_loc((_start_pos_of_item5, _end_pos_of_item5)),
        params: _dollar7,
        components: Alias(_dollar4),
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: @list.empty(),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 668|    attributes visibility "traitalias" batch_type_alias_targets {
// 669|    let (is_list, pkg, targets) = $4
// 670|    TopBatchTraitAlias(
// 671|      pkg~,
// 672|      targets~,
// 673|      vis = $2,
// 674|      attrs = $1,
// 675|      is_list~,
// 676|      doc = DocString::empty(),
// 677|      loc = mk_loc($sloc)
// 678|    )
// 679|  }

///|
fn yy_action_73(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[3].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTraitAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 693|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters func_return_type impl_body {
// 694|    let (ret_ty, err_ty) = $12
// 695|    TopImpl(
// 696|      self_ty = Some($7),
// 697|      trait_ = $5,
// 698|      method_name = $9,
// 699|      has_error = $10,
// 700|      quantifiers = $4,
// 701|      params = $11,
// 702|      ret_ty~,
// 703|      err_ty~,
// 704|      body = $13,
// 705|      vis = $2,
// 706|      loc = mk_loc($sloc),
// 707|      attrs = $1,
// 708|      doc = DocString::empty()
// 709|    )
// 710|  }

///|
fn yy_action_74(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_16(_args[7].2, _args[8:9])
  guard _args[11].0 is YYObj__Type___ErrorType_(_dollar12)
  guard _args[6].0 is YYObj_Type(_dollar7)
  guard _args[4].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar9)
  guard _args[9].0 is YYObj_Location_(_dollar10)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[10].0 is YYObj_List_Parameter_(_dollar11)
  guard _args[12].0 is YYObj_DeclBody(_dollar13)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar12
      TopImpl(
        self_ty=Some(_dollar7),
        trait_=_dollar5,
        method_name=_dollar9,
        has_error=_dollar10,
        quantifiers=_dollar4,
        params=_dollar11,
        ret_ty~,
        err_ty~,
        body=_dollar13,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 729|    attributes visibility "impl" optional_type_parameters type_name "for" type_ {
// 730|    TopImplRelation(
// 731|      self_ty = $7,
// 732|      trait_ = $5,
// 733|      quantifiers = $4,
// 734|      vis = $2,
// 735|      attrs = $1,
// 736|      loc = mk_loc($sloc),
// 737|      doc = DocString::empty()
// 738|    )
// 739|  }

///|
fn yy_action_75(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[6].0 is YYObj_Type(_dollar7)
  guard _args[4].0 is YYObj_TypeName(_dollar5)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      TopImplRelation(
        self_ty=_dollar7,
        trait_=_dollar5,
        quantifiers=_dollar4,
        vis=_dollar2,
        attrs=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 711|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters func_return_type impl_body {
// 712|    let (ret_ty, err_ty) = $10
// 713|    TopImpl(
// 714|      self_ty = None,
// 715|      trait_ = $5,
// 716|      method_name = $7,
// 717|      has_error = $8,
// 718|      quantifiers = $4,
// 719|      params = $9,
// 720|      ret_ty~,
// 721|      err_ty~,
// 722|      body = $11,
// 723|      vis = $2,
// 724|      loc = mk_loc($sloc),
// 725|      attrs = $1,
// 726|      doc = DocString::empty()
// 727|    )
// 728|  }

///|
fn yy_action_76(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_16(_args[5].2, _args[6:7])
  guard _args[9].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[4].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar7)
  guard _args[7].0 is YYObj_Location_(_dollar8)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[8].0 is YYObj_List_Parameter_(_dollar9)
  guard _args[10].0 is YYObj_DeclBody(_dollar11)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar10
      TopImpl(
        self_ty=None,
        trait_=_dollar5,
        method_name=_dollar7,
        has_error=_dollar8,
        quantifiers=_dollar4,
        params=_dollar9,
        ret_ty~,
        err_ty~,
        body=_dollar11,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 740|    attributes visibility "enumview" optional_type_parameters UIDENT "{" list_semis(enum_constructor) "}" "for" type_ "with" binder parameters block_expr {
// 741|    TopView(
// 742|      quantifiers = $4,
// 743|      source_ty = $10,
// 744|      view_type_name = $5,
// 745|      view_type_loc = mk_loc($loc($5)),
// 746|      view_func_name = $12,
// 747|      parameters = $13,
// 748|      params_loc = mk_loc($loc($13)),
// 749|      view_constrs = $7,
// 750|      body = $14,
// 751|      vis = $2,
// 752|      loc = mk_loc($sloc),
// 753|      attrs = $1,
// 754|      doc = DocString::empty()
// 755|    )
// 756|  }

///|
fn yy_action_77(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_16(_args[10].2, _args[11:12])
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[9].0 is YYObj_Type(_dollar10)
  guard _args[4].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _sub_action_2_result is YYObj_Binder(_dollar12)
  guard _args[12].0 is YYObj_List_Parameter_(_dollar13)
  let _start_pos_of_item12 = _args[12].1
  let _end_pos_of_item12 = _args[12].2
  guard _args[6].0 is YYObj_List_ConstrDecl_(_dollar7)
  guard _args[13].0 is YYObj_Expr(_dollar14)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopView(
        quantifiers=_dollar4,
        source_ty=_dollar10,
        view_type_name=_dollar5,
        view_type_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        view_func_name=_dollar12,
        parameters=_dollar13,
        params_loc=mk_loc((_start_pos_of_item12, _end_pos_of_item12)),
        view_constrs=_dollar7,
        body=_dollar14,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 781|    attributes visibility "type" UIDENT optional_type_parameters_no_constraints { 
// 782|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 783|  }

///|
fn yy_action_78(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 787|    attributes visibility "suberror" UIDENT { ($1, $2, $4, mk_loc($loc($4))) }

///|
fn yy_action_79(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  YYObj__List_Attribute___Visibility__String__Location_(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      )
    },
  )
}

// file:///./parser.mbty
// 791|    attributes visibility "struct" UIDENT optional_type_parameters_no_constraints { 
// 792|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 793|  }

///|
fn yy_action_80(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 797|    attributes visibility "enum" UIDENT optional_type_parameters_no_constraints { 
// 798|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 799|  }

///|
fn yy_action_81(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_82(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_6(_args[2].2, _args[3:4])
  guard _args[4].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[6].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[5].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[5].1
  let _end_pos_of_item4 = _args[5].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 299|    attributes visibility is_async fun_header_generic option(parameters) func_return_type {
// 300|    let ((type_name, f), has_error, quants) = $4
// 301|    let (return_type, error_type) = $6
// 302|    FunDecl::{
// 303|      type_name,
// 304|      name: f,
// 305|      has_error,
// 306|      is_async : $3,
// 307|      quantifiers: quants,
// 308|      decl_params: $5,
// 309|      params_loc: mk_loc($loc($5)),
// 310|      return_type,
// 311|      error_type,
// 312|      vis: $2,
// 313|      doc: DocString::empty(),
// 314|      attrs: $1,
// 315|    }
// 316|  }

///|
fn yy_action_83(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_9(_args[2].2, _args[3:3])
  guard _args[3].0
    is YYObj___TypeName___Binder___Location___List_TypeVarBinder__(_dollar4)
  guard _args[5].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _sub_action_2_result is YYObj_Bool(_dollar3)
  guard _args[4].0 is YYObj_Option_List_Parameter__(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FunDecl(
    {
      ()
      let ((type_name, f), has_error, quants) = _dollar4
      let (return_type, error_type) = _dollar6
      FunDecl::{
        type_name,
        name: f,
        has_error,
        is_async: _dollar3,
        quantifiers: quants,
        decl_params: _dollar5,
        params_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
    },
  )
}

// file:///./parser.mbty
// 360|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) func_return_type {
// 361|    let (type_name, f) = $6
// 362|    let (return_type, error_type) = $10
// 363|    let fn_decl = FunDecl::{
// 364|      type_name,
// 365|      name: f,
// 366|      has_error : $7,
// 367|      is_async : false,
// 368|      quantifiers: $8,
// 369|      decl_params: $9,
// 370|      params_loc: mk_loc($loc($9)),
// 371|      return_type,
// 372|      error_type,
// 373|      vis: $2,
// 374|      doc: DocString::empty(),
// 375|      attrs: $1,
// 376|    }
// 377|    ($4, fn_decl)
// 378|  }

///|
fn yy_action_84(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[6].0 is YYObj__TypeName___Binder_(_dollar6)
  guard _args[10].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[7].0 is YYObj_Location_(_dollar7)
  guard _args[8].0 is YYObj_List_TypeVarBinder_(_dollar8)
  guard _args[9].0 is YYObj_Option_List_Parameter__(_dollar9)
  let _start_pos_of_item8 = _args[9].1
  let _end_pos_of_item8 = _args[9].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _args[4].0 is YYObj_StringLiteral(_dollar4)
  YYObj__StringLiteral__FunDecl_(
    {
      ()
      let (type_name, f) = _dollar6
      let (return_type, error_type) = _dollar10
      let fn_decl = FunDecl::{
        type_name,
        name: f,
        has_error: _dollar7,
        is_async: false,
        quantifiers: _dollar8,
        decl_params: _dollar9,
        params_loc: mk_loc((_start_pos_of_item8, _end_pos_of_item8)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
      (_dollar4, fn_decl)
    },
  )
}

// file:///./parser.mbty
// 435|    attributes visibility "extern" "type" UIDENT optional_type_parameters_no_constraints deriving_directive_list {
// 436|    TopTypeDef(
// 437|      TypeDecl::{
// 438|        tycon : $5,
// 439|        tycon_loc : mk_loc($loc($5)),
// 440|        params : $6,
// 441|        components: Extern,
// 442|        type_vis : $2,
// 443|        doc : DocString::empty(),
// 444|        deriving: $7,
// 445|        loc : mk_loc($sloc),
// 446|        attrs : $1
// 447|      }
// 448|    )
// 449|  }

///|
fn yy_action_85(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[5].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[5].1
  let _end_pos_of_item4 = _args[5].2
  guard _args[6].0 is YYObj_List_TypeDeclBinder_(_dollar6)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[7].0 is YYObj_List_DerivingDirective_(_dollar7)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar5,
        tycon_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        params: _dollar6,
        components: Extern,
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: _dollar7,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_86(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_16(_args[3].2, _args[4:5])
  let _sub_action_3_result = yy_action_17(_args[4].2, _args[5:7])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_87(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_16(_args[3].2, _args[4:5])
  let _sub_action_3_result = yy_action_19(_args[4].2, _args[5:5])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_88(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_17(_args[4].2, _args[5:7])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_89(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_19(_args[4].2, _args[5:5])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 610|    attributes visibility "fnalias" func_alias_targets {
// 611|    let (pkg, type_name, is_list, targets) = $4
// 612|    TopFuncAlias(
// 613|      pkg~,
// 614|      type_name~,
// 615|      targets~,
// 616|      vis = $2,
// 617|      attrs = $1,
// 618|      is_list~,
// 619|      doc = DocString::empty(),
// 620|      loc = mk_loc($sloc)
// 621|    )
// 622|  }

///|
fn yy_action_90(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[4].0 is YYObj__Label___Label___Bool__List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (pkg, type_name, is_list, targets) = _dollar4
      TopFuncAlias(
        pkg~,
        type_name~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 623|    attributes visibility "trait" UIDENT option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {
// 624|    let name = Binder::{ name: $4, loc: mk_loc($loc($4)) }
// 625|    let supers = match $5 {
// 626|      None => @list.empty()
// 627|      Some(supers) => supers
// 628|    }
// 629|    TopTrait(
// 630|      TraitDecl::{
// 631|        name,
// 632|        supers,
// 633|        methods: $7,
// 634|        vis: $2,
// 635|        loc: mk_loc($sloc),
// 636|        attrs: $1,
// 637|        doc : DocString::empty()
// 638|      }
// 639|    )
// 640|  }

///|
fn yy_action_91(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  guard _args[5].0 is YYObj_Option__list_List_TypeVarConstraint__(_dollar5)
  guard _args[7].0 is YYObj_List_TraitMethodDecl_(_dollar7)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let name = Binder::{
        name: _dollar4,
        loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      }
      let supers = match _dollar5 {
        None => @list.empty()
        Some(supers) => supers
      }
      TopTrait(TraitDecl::{
        name,
        supers,
        methods: _dollar7,
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      })
    },
  )
}

// file:///./parser.mbty
// 641|    attributes visibility "typealias" batch_type_alias_targets {
// 642|    let (is_list, pkg, targets) = $4
// 643|    TopBatchTypeAlias(
// 644|      pkg~,
// 645|      targets~,
// 646|      vis = $2,
// 647|      attrs = $1,
// 648|      is_list~,
// 649|      doc = DocString::empty(),
// 650|      loc = mk_loc($sloc)
// 651|    )
// 652|  }

///|
fn yy_action_92(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[4].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTypeAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 653|    attributes visibility "typealias" type_ "as" UIDENT optional_type_parameters_no_constraints {
// 654|    TopTypeDef(
// 655|      TypeDecl::{
// 656|        tycon : $6,
// 657|        tycon_loc : mk_loc($loc($6)),
// 658|        params : $7,
// 659|        components: Alias($4),
// 660|        type_vis : $2,
// 661|        doc : DocString::empty(),
// 662|        deriving: @list.empty(),
// 663|        loc : mk_loc($sloc),
// 664|        attrs : $1
// 665|      }
// 666|    )
// 667|  }

///|
fn yy_action_93(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[6].0 is YYObj_String(_dollar6)
  let _start_pos_of_item5 = _args[6].1
  let _end_pos_of_item5 = _args[6].2
  guard _args[7].0 is YYObj_List_TypeDeclBinder_(_dollar7)
  guard _args[4].0 is YYObj_Type(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar6,
        tycon_loc: mk_loc((_start_pos_of_item5, _end_pos_of_item5)),
        params: _dollar7,
        components: Alias(_dollar4),
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: @list.empty(),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 668|    attributes visibility "traitalias" batch_type_alias_targets {
// 669|    let (is_list, pkg, targets) = $4
// 670|    TopBatchTraitAlias(
// 671|      pkg~,
// 672|      targets~,
// 673|      vis = $2,
// 674|      attrs = $1,
// 675|      is_list~,
// 676|      doc = DocString::empty(),
// 677|      loc = mk_loc($sloc)
// 678|    )
// 679|  }

///|
fn yy_action_94(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[4].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTraitAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 693|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters func_return_type impl_body {
// 694|    let (ret_ty, err_ty) = $12
// 695|    TopImpl(
// 696|      self_ty = Some($7),
// 697|      trait_ = $5,
// 698|      method_name = $9,
// 699|      has_error = $10,
// 700|      quantifiers = $4,
// 701|      params = $11,
// 702|      ret_ty~,
// 703|      err_ty~,
// 704|      body = $13,
// 705|      vis = $2,
// 706|      loc = mk_loc($sloc),
// 707|      attrs = $1,
// 708|      doc = DocString::empty()
// 709|    )
// 710|  }

///|
fn yy_action_95(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_16(_args[8].2, _args[9:10])
  guard _args[12].0 is YYObj__Type___ErrorType_(_dollar12)
  guard _args[7].0 is YYObj_Type(_dollar7)
  guard _args[5].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar9)
  guard _args[10].0 is YYObj_Location_(_dollar10)
  guard _args[4].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[11].0 is YYObj_List_Parameter_(_dollar11)
  guard _args[13].0 is YYObj_DeclBody(_dollar13)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar12
      TopImpl(
        self_ty=Some(_dollar7),
        trait_=_dollar5,
        method_name=_dollar9,
        has_error=_dollar10,
        quantifiers=_dollar4,
        params=_dollar11,
        ret_ty~,
        err_ty~,
        body=_dollar13,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 729|    attributes visibility "impl" optional_type_parameters type_name "for" type_ {
// 730|    TopImplRelation(
// 731|      self_ty = $7,
// 732|      trait_ = $5,
// 733|      quantifiers = $4,
// 734|      vis = $2,
// 735|      attrs = $1,
// 736|      loc = mk_loc($sloc),
// 737|      doc = DocString::empty()
// 738|    )
// 739|  }

///|
fn yy_action_96(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[7].0 is YYObj_Type(_dollar7)
  guard _args[5].0 is YYObj_TypeName(_dollar5)
  guard _args[4].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      TopImplRelation(
        self_ty=_dollar7,
        trait_=_dollar5,
        quantifiers=_dollar4,
        vis=_dollar2,
        attrs=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 711|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters func_return_type impl_body {
// 712|    let (ret_ty, err_ty) = $10
// 713|    TopImpl(
// 714|      self_ty = None,
// 715|      trait_ = $5,
// 716|      method_name = $7,
// 717|      has_error = $8,
// 718|      quantifiers = $4,
// 719|      params = $9,
// 720|      ret_ty~,
// 721|      err_ty~,
// 722|      body = $11,
// 723|      vis = $2,
// 724|      loc = mk_loc($sloc),
// 725|      attrs = $1,
// 726|      doc = DocString::empty()
// 727|    )
// 728|  }

///|
fn yy_action_97(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_16(_args[6].2, _args[7:8])
  guard _args[10].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[5].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar7)
  guard _args[8].0 is YYObj_Location_(_dollar8)
  guard _args[4].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[9].0 is YYObj_List_Parameter_(_dollar9)
  guard _args[11].0 is YYObj_DeclBody(_dollar11)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar10
      TopImpl(
        self_ty=None,
        trait_=_dollar5,
        method_name=_dollar7,
        has_error=_dollar8,
        quantifiers=_dollar4,
        params=_dollar9,
        ret_ty~,
        err_ty~,
        body=_dollar11,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 740|    attributes visibility "enumview" optional_type_parameters UIDENT "{" list_semis(enum_constructor) "}" "for" type_ "with" binder parameters block_expr {
// 741|    TopView(
// 742|      quantifiers = $4,
// 743|      source_ty = $10,
// 744|      view_type_name = $5,
// 745|      view_type_loc = mk_loc($loc($5)),
// 746|      view_func_name = $12,
// 747|      parameters = $13,
// 748|      params_loc = mk_loc($loc($13)),
// 749|      view_constrs = $7,
// 750|      body = $14,
// 751|      vis = $2,
// 752|      loc = mk_loc($sloc),
// 753|      attrs = $1,
// 754|      doc = DocString::empty()
// 755|    )
// 756|  }

///|
fn yy_action_98(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  let _sub_action_2_result = yy_action_16(_args[11].2, _args[12:13])
  guard _args[4].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[10].0 is YYObj_Type(_dollar10)
  guard _args[5].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[5].1
  let _end_pos_of_item4 = _args[5].2
  guard _sub_action_2_result is YYObj_Binder(_dollar12)
  guard _args[13].0 is YYObj_List_Parameter_(_dollar13)
  let _start_pos_of_item12 = _args[13].1
  let _end_pos_of_item12 = _args[13].2
  guard _args[7].0 is YYObj_List_ConstrDecl_(_dollar7)
  guard _args[14].0 is YYObj_Expr(_dollar14)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopView(
        quantifiers=_dollar4,
        source_ty=_dollar10,
        view_type_name=_dollar5,
        view_type_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        view_func_name=_dollar12,
        parameters=_dollar13,
        params_loc=mk_loc((_start_pos_of_item12, _end_pos_of_item12)),
        view_constrs=_dollar7,
        body=_dollar14,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 781|    attributes visibility "type" UIDENT optional_type_parameters_no_constraints { 
// 782|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 783|  }

///|
fn yy_action_99(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  guard _args[5].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 787|    attributes visibility "suberror" UIDENT { ($1, $2, $4, mk_loc($loc($4))) }

///|
fn yy_action_100(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  YYObj__List_Attribute___Visibility__String__Location_(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      )
    },
  )
}

// file:///./parser.mbty
// 791|    attributes visibility "struct" UIDENT optional_type_parameters_no_constraints { 
// 792|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 793|  }

///|
fn yy_action_101(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  guard _args[5].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 797|    attributes visibility "enum" UIDENT optional_type_parameters_no_constraints { 
// 798|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 799|  }

///|
fn yy_action_102(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  guard _args[5].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 360|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) func_return_type {
// 361|    let (type_name, f) = $6
// 362|    let (return_type, error_type) = $10
// 363|    let fn_decl = FunDecl::{
// 364|      type_name,
// 365|      name: f,
// 366|      has_error : $7,
// 367|      is_async : false,
// 368|      quantifiers: $8,
// 369|      decl_params: $9,
// 370|      params_loc: mk_loc($loc($9)),
// 371|      return_type,
// 372|      error_type,
// 373|      vis: $2,
// 374|      doc: DocString::empty(),
// 375|      attrs: $1,
// 376|    }
// 377|    ($4, fn_decl)
// 378|  }

///|
fn yy_action_103(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[4].0 is YYObj__TypeName___Binder_(_dollar6)
  guard _args[8].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[5].0 is YYObj_Location_(_dollar7)
  guard _args[6].0 is YYObj_List_TypeVarBinder_(_dollar8)
  guard _args[7].0 is YYObj_Option_List_Parameter__(_dollar9)
  let _start_pos_of_item8 = _args[7].1
  let _end_pos_of_item8 = _args[7].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _args[2].0 is YYObj_StringLiteral(_dollar4)
  YYObj__StringLiteral__FunDecl_(
    {
      ()
      let (type_name, f) = _dollar6
      let (return_type, error_type) = _dollar10
      let fn_decl = FunDecl::{
        type_name,
        name: f,
        has_error: _dollar7,
        is_async: false,
        quantifiers: _dollar8,
        decl_params: _dollar9,
        params_loc: mk_loc((_start_pos_of_item8, _end_pos_of_item8)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
      (_dollar4, fn_decl)
    },
  )
}

// file:///./parser.mbty
// 435|    attributes visibility "extern" "type" UIDENT optional_type_parameters_no_constraints deriving_directive_list {
// 436|    TopTypeDef(
// 437|      TypeDecl::{
// 438|        tycon : $5,
// 439|        tycon_loc : mk_loc($loc($5)),
// 440|        params : $6,
// 441|        components: Extern,
// 442|        type_vis : $2,
// 443|        doc : DocString::empty(),
// 444|        deriving: $7,
// 445|        loc : mk_loc($sloc),
// 446|        attrs : $1
// 447|      }
// 448|    )
// 449|  }

///|
fn yy_action_104(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[3].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar6)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[5].0 is YYObj_List_DerivingDirective_(_dollar7)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar5,
        tycon_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        params: _dollar6,
        components: Extern,
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: _dollar7,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_105(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_16(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_17(_args[2].2, _args[3:5])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_106(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_16(_args[1].2, _args[2:3])
  let _sub_action_3_result = yy_action_19(_args[2].2, _args[3:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_107(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_17(_args[2].2, _args[3:5])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_108(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_19(_args[2].2, _args[3:3])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 610|    attributes visibility "fnalias" func_alias_targets {
// 611|    let (pkg, type_name, is_list, targets) = $4
// 612|    TopFuncAlias(
// 613|      pkg~,
// 614|      type_name~,
// 615|      targets~,
// 616|      vis = $2,
// 617|      attrs = $1,
// 618|      is_list~,
// 619|      doc = DocString::empty(),
// 620|      loc = mk_loc($sloc)
// 621|    )
// 622|  }

///|
fn yy_action_109(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[2].0 is YYObj__Label___Label___Bool__List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (pkg, type_name, is_list, targets) = _dollar4
      TopFuncAlias(
        pkg~,
        type_name~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 623|    attributes visibility "trait" UIDENT option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {
// 624|    let name = Binder::{ name: $4, loc: mk_loc($loc($4)) }
// 625|    let supers = match $5 {
// 626|      None => @list.empty()
// 627|      Some(supers) => supers
// 628|    }
// 629|    TopTrait(
// 630|      TraitDecl::{
// 631|        name,
// 632|        supers,
// 633|        methods: $7,
// 634|        vis: $2,
// 635|        loc: mk_loc($sloc),
// 636|        attrs: $1,
// 637|        doc : DocString::empty()
// 638|      }
// 639|    )
// 640|  }

///|
fn yy_action_110(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_Option__list_List_TypeVarConstraint__(_dollar5)
  guard _args[5].0 is YYObj_List_TraitMethodDecl_(_dollar7)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let name = Binder::{
        name: _dollar4,
        loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      }
      let supers = match _dollar5 {
        None => @list.empty()
        Some(supers) => supers
      }
      TopTrait(TraitDecl::{
        name,
        supers,
        methods: _dollar7,
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      })
    },
  )
}

// file:///./parser.mbty
// 641|    attributes visibility "typealias" batch_type_alias_targets {
// 642|    let (is_list, pkg, targets) = $4
// 643|    TopBatchTypeAlias(
// 644|      pkg~,
// 645|      targets~,
// 646|      vis = $2,
// 647|      attrs = $1,
// 648|      is_list~,
// 649|      doc = DocString::empty(),
// 650|      loc = mk_loc($sloc)
// 651|    )
// 652|  }

///|
fn yy_action_111(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[2].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTypeAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 653|    attributes visibility "typealias" type_ "as" UIDENT optional_type_parameters_no_constraints {
// 654|    TopTypeDef(
// 655|      TypeDecl::{
// 656|        tycon : $6,
// 657|        tycon_loc : mk_loc($loc($6)),
// 658|        params : $7,
// 659|        components: Alias($4),
// 660|        type_vis : $2,
// 661|        doc : DocString::empty(),
// 662|        deriving: @list.empty(),
// 663|        loc : mk_loc($sloc),
// 664|        attrs : $1
// 665|      }
// 666|    )
// 667|  }

///|
fn yy_action_112(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[4].0 is YYObj_String(_dollar6)
  let _start_pos_of_item5 = _args[4].1
  let _end_pos_of_item5 = _args[4].2
  guard _args[5].0 is YYObj_List_TypeDeclBinder_(_dollar7)
  guard _args[2].0 is YYObj_Type(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar6,
        tycon_loc: mk_loc((_start_pos_of_item5, _end_pos_of_item5)),
        params: _dollar7,
        components: Alias(_dollar4),
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: @list.empty(),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 668|    attributes visibility "traitalias" batch_type_alias_targets {
// 669|    let (is_list, pkg, targets) = $4
// 670|    TopBatchTraitAlias(
// 671|      pkg~,
// 672|      targets~,
// 673|      vis = $2,
// 674|      attrs = $1,
// 675|      is_list~,
// 676|      doc = DocString::empty(),
// 677|      loc = mk_loc($sloc)
// 678|    )
// 679|  }

///|
fn yy_action_113(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[2].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTraitAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 680|    attributes is_async "test" option(loced_string) option(parameters) block_expr_with_local_types {
// 681|    let (local_types, expr) = $6
// 682|    TopTest(
// 683|      expr~,
// 684|      name = $4,
// 685|      params = $5,
// 686|      local_types~,
// 687|      is_async = $2,
// 688|      loc = mk_loc($sloc),
// 689|      attrs = $1,
// 690|      doc = DocString::empty()
// 691|    )
// 692|  }

///|
fn yy_action_114(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_9(_args[0].2, _args[1:1])
  guard _args[4].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar6)
  guard _args[2].0 is YYObj_Option__StringLiteral__Location__(_dollar4)
  guard _args[3].0 is YYObj_Option_List_Parameter__(_dollar5)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (local_types, expr) = _dollar6
      TopTest(
        expr~,
        name=_dollar4,
        params=_dollar5,
        local_types~,
        is_async=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 693|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters func_return_type impl_body {
// 694|    let (ret_ty, err_ty) = $12
// 695|    TopImpl(
// 696|      self_ty = Some($7),
// 697|      trait_ = $5,
// 698|      method_name = $9,
// 699|      has_error = $10,
// 700|      quantifiers = $4,
// 701|      params = $11,
// 702|      ret_ty~,
// 703|      err_ty~,
// 704|      body = $13,
// 705|      vis = $2,
// 706|      loc = mk_loc($sloc),
// 707|      attrs = $1,
// 708|      doc = DocString::empty()
// 709|    )
// 710|  }

///|
fn yy_action_115(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_16(_args[6].2, _args[7:8])
  guard _args[10].0 is YYObj__Type___ErrorType_(_dollar12)
  guard _args[5].0 is YYObj_Type(_dollar7)
  guard _args[3].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar9)
  guard _args[8].0 is YYObj_Location_(_dollar10)
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[9].0 is YYObj_List_Parameter_(_dollar11)
  guard _args[11].0 is YYObj_DeclBody(_dollar13)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar12
      TopImpl(
        self_ty=Some(_dollar7),
        trait_=_dollar5,
        method_name=_dollar9,
        has_error=_dollar10,
        quantifiers=_dollar4,
        params=_dollar11,
        ret_ty~,
        err_ty~,
        body=_dollar13,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 729|    attributes visibility "impl" optional_type_parameters type_name "for" type_ {
// 730|    TopImplRelation(
// 731|      self_ty = $7,
// 732|      trait_ = $5,
// 733|      quantifiers = $4,
// 734|      vis = $2,
// 735|      attrs = $1,
// 736|      loc = mk_loc($sloc),
// 737|      doc = DocString::empty()
// 738|    )
// 739|  }

///|
fn yy_action_116(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[5].0 is YYObj_Type(_dollar7)
  guard _args[3].0 is YYObj_TypeName(_dollar5)
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      TopImplRelation(
        self_ty=_dollar7,
        trait_=_dollar5,
        quantifiers=_dollar4,
        vis=_dollar2,
        attrs=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 711|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters func_return_type impl_body {
// 712|    let (ret_ty, err_ty) = $10
// 713|    TopImpl(
// 714|      self_ty = None,
// 715|      trait_ = $5,
// 716|      method_name = $7,
// 717|      has_error = $8,
// 718|      quantifiers = $4,
// 719|      params = $9,
// 720|      ret_ty~,
// 721|      err_ty~,
// 722|      body = $11,
// 723|      vis = $2,
// 724|      loc = mk_loc($sloc),
// 725|      attrs = $1,
// 726|      doc = DocString::empty()
// 727|    )
// 728|  }

///|
fn yy_action_117(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_16(_args[4].2, _args[5:6])
  guard _args[8].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[3].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar7)
  guard _args[6].0 is YYObj_Location_(_dollar8)
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[7].0 is YYObj_List_Parameter_(_dollar9)
  guard _args[9].0 is YYObj_DeclBody(_dollar11)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar10
      TopImpl(
        self_ty=None,
        trait_=_dollar5,
        method_name=_dollar7,
        has_error=_dollar8,
        quantifiers=_dollar4,
        params=_dollar9,
        ret_ty~,
        err_ty~,
        body=_dollar11,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 740|    attributes visibility "enumview" optional_type_parameters UIDENT "{" list_semis(enum_constructor) "}" "for" type_ "with" binder parameters block_expr {
// 741|    TopView(
// 742|      quantifiers = $4,
// 743|      source_ty = $10,
// 744|      view_type_name = $5,
// 745|      view_type_loc = mk_loc($loc($5)),
// 746|      view_func_name = $12,
// 747|      parameters = $13,
// 748|      params_loc = mk_loc($loc($13)),
// 749|      view_constrs = $7,
// 750|      body = $14,
// 751|      vis = $2,
// 752|      loc = mk_loc($sloc),
// 753|      attrs = $1,
// 754|      doc = DocString::empty()
// 755|    )
// 756|  }

///|
fn yy_action_118(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_16(_args[9].2, _args[10:11])
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[8].0 is YYObj_Type(_dollar10)
  guard _args[3].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _sub_action_2_result is YYObj_Binder(_dollar12)
  guard _args[11].0 is YYObj_List_Parameter_(_dollar13)
  let _start_pos_of_item12 = _args[11].1
  let _end_pos_of_item12 = _args[11].2
  guard _args[5].0 is YYObj_List_ConstrDecl_(_dollar7)
  guard _args[12].0 is YYObj_Expr(_dollar14)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopView(
        quantifiers=_dollar4,
        source_ty=_dollar10,
        view_type_name=_dollar5,
        view_type_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        view_func_name=_dollar12,
        parameters=_dollar13,
        params_loc=mk_loc((_start_pos_of_item12, _end_pos_of_item12)),
        view_constrs=_dollar7,
        body=_dollar14,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 781|    attributes visibility "type" UIDENT optional_type_parameters_no_constraints { 
// 782|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 783|  }

///|
fn yy_action_119(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 787|    attributes visibility "suberror" UIDENT { ($1, $2, $4, mk_loc($loc($4))) }

///|
fn yy_action_120(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  YYObj__List_Attribute___Visibility__String__Location_(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      )
    },
  )
}

// file:///./parser.mbty
// 791|    attributes visibility "struct" UIDENT optional_type_parameters_no_constraints { 
// 792|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 793|  }

///|
fn yy_action_121(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 797|    attributes visibility "enum" UIDENT optional_type_parameters_no_constraints { 
// 798|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 799|  }

///|
fn yy_action_122(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[3].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 320|    "fn" type_parameters fun_binder optional_bang { ($3, $4, $2) }

///|
fn yy_action_123(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj__TypeName___Binder_(_dollar3)
  guard _args[3].0 is YYObj_Location_(_dollar4)
  guard _args[1].0 is YYObj_List_TypeVarBinder_(_dollar2)
  YYObj___TypeName___Binder___Location___List_TypeVarBinder__(
    {
      ()
      (_dollar3, _dollar4, _dollar2)
    },
  )
}

// file:///./parser.mbty
// 321|    "fn" fun_binder optional_bang optional_type_parameters { ($2, $3, $4) }

///|
fn yy_action_124(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__TypeName___Binder_(_dollar2)
  guard _args[2].0 is YYObj_Location_(_dollar3)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar4)
  YYObj___TypeName___Binder___Location___List_TypeVarBinder__(
    {
      ()
      (_dollar2, _dollar3, _dollar4)
    },
  )
}

// file:///./parser.mbty
// 291|    type_name "::" LIDENT {
// 292|    let binder = Binder::{ name: $3, loc: mk_loc($loc($3)) }
// 293|    (Some($1), binder)
// 294|  }

///|
fn yy_action_125(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  guard _args[0].0 is YYObj_TypeName(_dollar1)
  YYObj__TypeName___Binder_(
    {
      ()
      let binder = Binder::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      (Some(_dollar1), binder)
    },
  )
}

// file:///./parser.mbty
// 295|    binder { (None, $1) }

///|
fn yy_action_126(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj__TypeName___Binder_(
    {
      ()
      (None, _dollar1)
    },
  )
}

// file:///./parser.mbty
// 360|    attributes visibility "extern" STRING "fn" fun_binder optional_bang optional_type_parameters option(parameters) func_return_type {
// 361|    let (type_name, f) = $6
// 362|    let (return_type, error_type) = $10
// 363|    let fn_decl = FunDecl::{
// 364|      type_name,
// 365|      name: f,
// 366|      has_error : $7,
// 367|      is_async : false,
// 368|      quantifiers: $8,
// 369|      decl_params: $9,
// 370|      params_loc: mk_loc($loc($9)),
// 371|      return_type,
// 372|      error_type,
// 373|      vis: $2,
// 374|      doc: DocString::empty(),
// 375|      attrs: $1,
// 376|    }
// 377|    ($4, fn_decl)
// 378|  }

///|
fn yy_action_127(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[3].0 is YYObj__TypeName___Binder_(_dollar6)
  guard _args[7].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[4].0 is YYObj_Location_(_dollar7)
  guard _args[5].0 is YYObj_List_TypeVarBinder_(_dollar8)
  guard _args[6].0 is YYObj_Option_List_Parameter__(_dollar9)
  let _start_pos_of_item8 = _args[6].1
  let _end_pos_of_item8 = _args[6].2
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _args[1].0 is YYObj_StringLiteral(_dollar4)
  YYObj__StringLiteral__FunDecl_(
    {
      ()
      let (type_name, f) = _dollar6
      let (return_type, error_type) = _dollar10
      let fn_decl = FunDecl::{
        type_name,
        name: f,
        has_error: _dollar7,
        is_async: false,
        quantifiers: _dollar8,
        decl_params: _dollar9,
        params_loc: mk_loc((_start_pos_of_item8, _end_pos_of_item8)),
        return_type,
        error_type,
        vis: _dollar2,
        doc: DocString::empty(),
        attrs: _dollar1,
      }
      (_dollar4, fn_decl)
    },
  )
}

// file:///./parser.mbty
// 435|    attributes visibility "extern" "type" UIDENT optional_type_parameters_no_constraints deriving_directive_list {
// 436|    TopTypeDef(
// 437|      TypeDecl::{
// 438|        tycon : $5,
// 439|        tycon_loc : mk_loc($loc($5)),
// 440|        params : $6,
// 441|        components: Extern,
// 442|        type_vis : $2,
// 443|        doc : DocString::empty(),
// 444|        deriving: $7,
// 445|        loc : mk_loc($sloc),
// 446|        attrs : $1
// 447|      }
// 448|    )
// 449|  }

///|
fn yy_action_128(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[2].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[2].1
  let _end_pos_of_item4 = _args[2].2
  guard _args[3].0 is YYObj_List_TypeDeclBinder_(_dollar6)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[4].0 is YYObj_List_DerivingDirective_(_dollar7)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar5,
        tycon_loc: mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        params: _dollar6,
        components: Extern,
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: _dollar7,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_129(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_16(_args[0].2, _args[1:2])
  let _sub_action_3_result = yy_action_17(_args[1].2, _args[2:4])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 410|    attributes visibility "let" binder opt_annot { ($1, false, $2, $4, $5) }

///|
fn yy_action_130(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_16(_args[0].2, _args[1:2])
  let _sub_action_3_result = yy_action_19(_args[1].2, _args[2:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_2_result is YYObj_Binder(_dollar4)
  guard _sub_action_3_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (_dollar1, false, _dollar2, _dollar4, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_131(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_17(_args[1].2, _args[2:4])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 411|    attributes visibility "const" UIDENT opt_annot { ($1, true, $2, Binder::{ name : $4, loc : mk_loc($loc($4)) }, $5) }

///|
fn yy_action_132(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_19(_args[1].2, _args[2:2])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  guard _sub_action_2_result is YYObj_Type_(_dollar5)
  YYObj__List_Attribute___Bool__Visibility__Binder__Type__(
    {
      ()
      (
        _dollar1,
        true,
        _dollar2,
        Binder::{
          name: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 419|    type_header deriving_directive_list {
// 420|    let (attrs, type_vis, tycon, tycon_loc, params) = $1
// 421|    TopTypeDef(
// 422|      TypeDecl::{
// 423|        tycon,
// 424|        tycon_loc,
// 425|        params,
// 426|        components: Abstract,
// 427|        type_vis,
// 428|        doc : DocString::empty(),
// 429|        deriving: $2,
// 430|        loc : mk_loc($sloc),
// 431|        attrs
// 432|      }
// 433|    )
// 434|  }

///|
fn yy_action_133(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
      _dollar1
    )
  guard _args[1].0 is YYObj_List_DerivingDirective_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, type_vis, tycon, tycon_loc, params) = _dollar1
      TopTypeDef(TypeDecl::{
        tycon,
        tycon_loc,
        params,
        components: Abstract,
        type_vis,
        doc: DocString::empty(),
        deriving: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs,
      })
    },
  )
}

// file:///./parser.mbty
// 450|    type_header type_ deriving_directive_list {
// 451|    let (attrs, type_vis, tycon, tycon_loc, params) = $1
// 452|    TopTypeDef(
// 453|      TypeDecl::{
// 454|        tycon,
// 455|        tycon_loc,
// 456|        params,
// 457|        components: Newtype($2),
// 458|        type_vis,
// 459|        doc : DocString::empty(),
// 460|        deriving: $3,
// 461|        loc : mk_loc($sloc),
// 462|        attrs
// 463|      }
// 464|    )
// 465|  }

///|
fn yy_action_134(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
      _dollar1
    )
  guard _args[1].0 is YYObj_Type(_dollar2)
  guard _args[2].0 is YYObj_List_DerivingDirective_(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, type_vis, tycon, tycon_loc, params) = _dollar1
      TopTypeDef(TypeDecl::{
        tycon,
        tycon_loc,
        params,
        components: Newtype(_dollar2),
        type_vis,
        doc: DocString::empty(),
        deriving: _dollar3,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs,
      })
    },
  )
}

// file:///./parser.mbty
// 466|    suberror_header option(type_) deriving_directive_list {
// 467|    let (attrs, type_vis, tycon, tycon_loc) = $1
// 468|    let exception_decl : ExceptionDecl = match $2 {
// 469|      None => NoPayload
// 470|      Some(ty) => SinglePayload(ty)
// 471|    }
// 472|    TopTypeDef(
// 473|      TypeDecl::{
// 474|        tycon,
// 475|        tycon_loc,
// 476|        params: @list.empty(),
// 477|        components: Error(exception_decl),
// 478|        type_vis,
// 479|        doc : DocString::empty(),
// 480|        deriving: $3,
// 481|        loc : mk_loc($sloc),
// 482|        attrs
// 483|      }
// 484|    )
// 485|
// 486|  }

///|
fn yy_action_135(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Visibility__String__Location_(_dollar1)
  guard _args[1].0 is YYObj_Option_Type_(_dollar2)
  guard _args[2].0 is YYObj_List_DerivingDirective_(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, type_vis, tycon, tycon_loc) = _dollar1
      let exception_decl : ExceptionDecl = match _dollar2 {
        None => NoPayload
        Some(ty) => SinglePayload(ty)
      }
      TopTypeDef(TypeDecl::{
        tycon,
        tycon_loc,
        params: @list.empty(),
        components: Error(exception_decl),
        type_vis,
        doc: DocString::empty(),
        deriving: _dollar3,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs,
      })
    },
  )
}

// file:///./parser.mbty
// 487|    suberror_header "{" list_semis(enum_constructor) "}" deriving_directive_list {
// 488|    let (attrs, type_vis, tycon, tycon_loc) = $1
// 489|    let exception_decl : ExceptionDecl = EnumPayload($3)
// 490|    TopTypeDef(
// 491|      TypeDecl::{
// 492|        tycon,
// 493|        tycon_loc,
// 494|        params: @list.empty(),
// 495|        components: Error(exception_decl),
// 496|        type_vis,
// 497|        doc : DocString::empty(),
// 498|        deriving: $5,
// 499|        loc : mk_loc($sloc),
// 500|        attrs
// 501|      }
// 502|    )
// 503|  }

///|
fn yy_action_136(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Visibility__String__Location_(_dollar1)
  guard _args[2].0 is YYObj_List_ConstrDecl_(_dollar3)
  guard _args[4].0 is YYObj_List_DerivingDirective_(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, type_vis, tycon, tycon_loc) = _dollar1
      let exception_decl : ExceptionDecl = EnumPayload(_dollar3)
      TopTypeDef(TypeDecl::{
        tycon,
        tycon_loc,
        params: @list.empty(),
        components: Error(exception_decl),
        type_vis,
        doc: DocString::empty(),
        deriving: _dollar5,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs,
      })
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_137(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  YYObj_Option_Type_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_138(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Type_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 504|    struct_header "{" list_semis(record_decl_field) "}" deriving_directive_list {
// 505|    let (attrs, type_vis, tycon, tycon_loc, params) = $1
// 506|    TopTypeDef(
// 507|      TypeDecl::{
// 508|        tycon,
// 509|        tycon_loc,
// 510|        params,
// 511|        components: Record($3),
// 512|        type_vis,
// 513|        doc : DocString::empty(),
// 514|        deriving: $5,
// 515|        loc : mk_loc($sloc),
// 516|        attrs
// 517|      }
// 518|    )
// 519|  }

///|
fn yy_action_139(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
      _dollar1
    )
  guard _args[2].0 is YYObj_List_FieldDecl_(_dollar3)
  guard _args[4].0 is YYObj_List_DerivingDirective_(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, type_vis, tycon, tycon_loc, params) = _dollar1
      TopTypeDef(TypeDecl::{
        tycon,
        tycon_loc,
        params,
        components: Record(_dollar3),
        type_vis,
        doc: DocString::empty(),
        deriving: _dollar5,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs,
      })
    },
  )
}

// file:///./parser.mbty
// 520|    struct_header "(" non_empty_list_commas(type_) ")" deriving_directive_list {
// 521|    let (attrs, type_vis, tycon, tycon_loc, params) = $1
// 522|    TopTypeDef(
// 523|      TypeDecl::{
// 524|        tycon,
// 525|        tycon_loc,
// 526|        params,
// 527|        components: TupleStruct($3),
// 528|        type_vis,
// 529|        doc : DocString::empty(),
// 530|        deriving: $5,
// 531|        loc : mk_loc($sloc),
// 532|        attrs
// 533|      }
// 534|    )
// 535|  }

///|
fn yy_action_140(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
      _dollar1
    )
  guard _args[2].0 is YYObj_List_Type_(_dollar3)
  guard _args[4].0 is YYObj_List_DerivingDirective_(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, type_vis, tycon, tycon_loc, params) = _dollar1
      TopTypeDef(TypeDecl::{
        tycon,
        tycon_loc,
        params,
        components: TupleStruct(_dollar3),
        type_vis,
        doc: DocString::empty(),
        deriving: _dollar5,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs,
      })
    },
  )
}

// file:///./parser.mbty
// 536|    enum_header "{" list_semis(enum_constructor) "}" deriving_directive_list {
// 537|    let (attrs, type_vis, tycon, tycon_loc, params) = $1
// 538|    TopTypeDef(
// 539|      TypeDecl::{
// 540|        tycon,
// 541|        tycon_loc,
// 542|        params,
// 543|        components: Variant($3),
// 544|        type_vis,
// 545|        doc : DocString::empty(),
// 546|        deriving: $5,
// 547|        loc : mk_loc($sloc),
// 548|        attrs
// 549|      }
// 550|    )
// 551|  }

///|
fn yy_action_141(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
      _dollar1
    )
  guard _args[2].0 is YYObj_List_ConstrDecl_(_dollar3)
  guard _args[4].0 is YYObj_List_DerivingDirective_(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, type_vis, tycon, tycon_loc, params) = _dollar1
      TopTypeDef(TypeDecl::{
        tycon,
        tycon_loc,
        params,
        components: Variant(_dollar3),
        type_vis,
        doc: DocString::empty(),
        deriving: _dollar5,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs,
      })
    },
  )
}

// file:///./parser.mbty
// 552|    val_header "=" expr {
// 553|    let (attrs, is_constant, vis, binder, ty) = $1
// 554|    TopLetDef(
// 555|      binder~,
// 556|      ty~,
// 557|      expr = $3,
// 558|      vis~,
// 559|      is_constant~,
// 560|      loc = mk_loc($sloc),
// 561|      attrs~,
// 562|      doc = DocString::empty()
// 563|    )
// 564|  }

///|
fn yy_action_142(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0
    is YYObj__List_Attribute___Bool__Visibility__Binder__Type__(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (attrs, is_constant, vis, binder, ty) = _dollar1
      TopLetDef(
        binder~,
        ty~,
        expr=_dollar3,
        vis~,
        is_constant~,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs~,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 565|    fun_header "=" STRING STRING {
// 566|    TopFuncDef(
// 567|      loc = mk_loc($sloc),
// 568|      fun_decl = $1,
// 569|      decl_body = DeclStubs(Import(module_name = $3, func_name = $4))
// 570|    )
// 571|  }

///|
fn yy_action_143(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_FunDecl(_dollar1)
  guard _args[2].0 is YYObj_StringLiteral(_dollar3)
  guard _args[3].0 is YYObj_StringLiteral(_dollar4)
  YYObj_Impl(
    {
      ()
      TopFuncDef(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        fun_decl=_dollar1,
        decl_body=DeclStubs(Import(module_name=_dollar3, func_name=_dollar4)),
      )
    },
  )
}

// file:///./parser.mbty
// 572|    fun_header "=" STRING {
// 573|    TopFuncDef(
// 574|      loc = mk_loc($sloc),
// 575|      fun_decl = $1,
// 576|      decl_body = DeclStubs(Embedded(language = None, code = CodeString($3)))
// 577|    )
// 578|  }

///|
fn yy_action_144(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_FunDecl(_dollar1)
  guard _args[2].0 is YYObj_StringLiteral(_dollar3)
  YYObj_Impl(
    {
      ()
      TopFuncDef(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        fun_decl=_dollar1,
        decl_body=DeclStubs(Embedded(language=None, code=CodeString(_dollar3))),
      )
    },
  )
}

// file:///./parser.mbty
// 579|    fun_header "=" non_empty_list(MULTILINE_STRING) {
// 580|    TopFuncDef(
// 581|      loc = mk_loc($sloc),
// 582|      fun_decl = $1,
// 583|      decl_body = DeclStubs(Embedded(language = None, code = CodeMultilineString($3)))
// 584|    )
// 585|  }

///|
fn yy_action_145(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_FunDecl(_dollar1)
  guard _args[2].0 is YYObj_List_String_(_dollar3)
  YYObj_Impl(
    {
      ()
      TopFuncDef(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        fun_decl=_dollar1,
        decl_body=DeclStubs(
          Embedded(language=None, code=CodeMultilineString(_dollar3)),
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 602|    fun_header block_expr_with_local_types {
// 603|    let (local_types, expr) = $2
// 604|    TopFuncDef(
// 605|      loc = mk_loc($sloc),
// 606|      fun_decl = $1,
// 607|      decl_body = DeclBody(local_types~, expr~)
// 608|    )
// 609|  }

///|
fn yy_action_146(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_FunDecl(_dollar1)
  YYObj_Impl(
    {
      ()
      let (local_types, expr) = _dollar2
      TopFuncDef(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        fun_decl=_dollar1,
        decl_body=DeclBody(local_types~, expr~),
      )
    },
  )
}

// file:///./parser.mbty
// 586|    extern_fun_header "=" STRING {
// 587|    let (language, decl) = $1
// 588|    TopFuncDef(
// 589|      loc = mk_loc($sloc),
// 590|      fun_decl = decl,
// 591|      decl_body = DeclStubs(Embedded(language = Some(language), code = CodeString($3)))
// 592|    )
// 593|  }

///|
fn yy_action_147(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj__StringLiteral__FunDecl_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[2].0 is YYObj_StringLiteral(_dollar3)
  YYObj_Impl(
    {
      ()
      let (language, decl) = _dollar1
      TopFuncDef(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        fun_decl=decl,
        decl_body=DeclStubs(
          Embedded(language=Some(language), code=CodeString(_dollar3)),
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 594|    extern_fun_header "=" non_empty_list(MULTILINE_STRING) {
// 595|    let (language, decl) = $1
// 596|    TopFuncDef(
// 597|      loc = mk_loc($sloc),
// 598|      fun_decl = decl,
// 599|      decl_body = DeclStubs(Embedded(language = Some(language), code = CodeMultilineString($3)))
// 600|    )
// 601|  }

///|
fn yy_action_148(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj__StringLiteral__FunDecl_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[2].0 is YYObj_List_String_(_dollar3)
  YYObj_Impl(
    {
      ()
      let (language, decl) = _dollar1
      TopFuncDef(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        fun_decl=decl,
        decl_body=DeclStubs(
          Embedded(language=Some(language), code=CodeMultilineString(_dollar3)),
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 148|    X non_empty_list(X) { $2.add($1) }

///|
fn yy_action_149(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_String_(_dollar2)
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_List_String_(
    {
      ()
      _dollar2.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 147|    X { @list.singleton($1) }

///|
fn yy_action_150(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_List_String_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 610|    attributes visibility "fnalias" func_alias_targets {
// 611|    let (pkg, type_name, is_list, targets) = $4
// 612|    TopFuncAlias(
// 613|      pkg~,
// 614|      type_name~,
// 615|      targets~,
// 616|      vis = $2,
// 617|      attrs = $1,
// 618|      is_list~,
// 619|      doc = DocString::empty(),
// 620|      loc = mk_loc($sloc)
// 621|    )
// 622|  }

///|
fn yy_action_151(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[1].0 is YYObj__Label___Label___Bool__List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (pkg, type_name, is_list, targets) = _dollar4
      TopFuncAlias(
        pkg~,
        type_name~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 827|    ioption(func_alias_type_name(LIDENT, UIDENT)) func_alias_target(LIDENT) { 
// 828|    (None, $1, false, @list.singleton($2))
// 829|  }

///|
fn yy_action_152(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_153(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_Option_Label_(_dollar1)
  guard _args[0].0 is YYObj_AliasTarget(_dollar2)
  YYObj__Label___Label___Bool__List_AliasTarget__(
    {
      ()
      (None, _dollar1, false, @list.singleton(_dollar2))
    },
  )
}

// file:///./stdlib.mbty
// 9|    { None }

///|
fn yy_action_153(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Label_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 827|    ioption(func_alias_type_name(LIDENT, UIDENT)) func_alias_target(LIDENT) { 
// 828|    (None, $1, false, @list.singleton($2))
// 829|  }

///|
fn yy_action_154(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_155(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Option_Label_(_dollar1)
  guard _args[1].0 is YYObj_AliasTarget(_dollar2)
  YYObj__Label___Label___Bool__List_AliasTarget__(
    {
      ()
      (None, _dollar1, false, @list.singleton(_dollar2))
    },
  )
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }

///|
fn yy_action_155(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Label(_dollar1)
  YYObj_Option_Label_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_156(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Label(_dollar1)
  YYObj_Option_Label_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 830|    PACKAGE_NAME func_alias_target(DOT_LIDENT) { 
// 831|    let pkg = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 832|    (Some(pkg), None, false, @list.singleton($2))
// 833|  }

///|
fn yy_action_157(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[1].0 is YYObj_AliasTarget(_dollar2)
  YYObj__Label___Label___Bool__List_AliasTarget__(
    {
      ()
      let pkg = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      (Some(pkg), None, false, @list.singleton(_dollar2))
    },
  )
}

// file:///./parser.mbty
// 834|    PACKAGE_NAME func_alias_type_name(DOT_LIDENT, DOT_UIDENT) func_alias_target(LIDENT) { 
// 835|    let pkg = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 836|    (Some(pkg), Some($2), false, @list.singleton($3))
// 837|  }

///|
fn yy_action_158(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[1].0 is YYObj_Label(_dollar2)
  guard _args[2].0 is YYObj_AliasTarget(_dollar3)
  YYObj__Label___Label___Bool__List_AliasTarget__(
    {
      ()
      let pkg = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      (Some(pkg), Some(_dollar2), false, @list.singleton(_dollar3))
    },
  )
}

// file:///./parser.mbty
// 845|    PACKAGE_NAME func_alias_type_name(DOT_LIDENT, DOT_UIDENT) "(" non_empty_list_commas(func_alias_target(LIDENT)) ")" { 
// 846|    let pkg = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 847|    (Some(pkg), Some($2), true, $4)
// 848|  }

///|
fn yy_action_159(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[1].0 is YYObj_Label(_dollar2)
  guard _args[3].0 is YYObj_List_AliasTarget_(_dollar4)
  YYObj__Label___Label___Bool__List_AliasTarget__(
    {
      ()
      let pkg = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      (Some(pkg), Some(_dollar2), true, _dollar4)
    },
  )
}

// file:///./parser.mbty
// 841|    PACKAGE_NAME ".(" non_empty_list_commas(func_alias_target(LIDENT)) ")" { 
// 842|    let pkg = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 843|    (Some(pkg), None, true, $3)
// 844|  }

///|
fn yy_action_160(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_List_AliasTarget_(_dollar3)
  YYObj__Label___Label___Bool__List_AliasTarget__(
    {
      ()
      let pkg = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      (Some(pkg), None, true, _dollar3)
    },
  )
}

// file:///./parser.mbty
// 857|    LIDENT_MAYBE_DOT option(preceded("as", binder)) { 
// 858|    match $2 {
// 859|      None => {
// 860|        let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 861|        AliasTarget::{ binder, target: None }
// 862|      }
// 863|      Some(binder) => {
// 864|        let target = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 865|        AliasTarget::{ binder, target: Some(target) }
// 866|      }
// 867|    }
// 868|  }

///|
fn yy_action_161(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Option_Binder_(_dollar2)
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_AliasTarget(
    {
      ()
      match _dollar2 {
        None => {
          let binder = Binder::{
            name: _dollar1,
            loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
          }
          AliasTarget::{ binder, target: None }
        }
        Some(binder) => {
          let target = Label::{
            name: _dollar1,
            loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
          }
          AliasTarget::{ binder, target: Some(target) }
        }
      }
    },
  )
}

// file:///./parser.mbty
// 852|    LIDENT_MAYBE_DOT "::" { Label::{ name: $1, loc: mk_loc($loc($1)) } }

///|
fn yy_action_162(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_Label(
    {
      ()
      Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
    },
  )
}

// file:///./parser.mbty
// 853|    UIDENT_MAYBE_DOT "::" { Label::{ name: $1, loc: mk_loc($loc($1)) } }

///|
fn yy_action_163(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_Label(
    {
      ()
      Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
    },
  )
}

// file:///./parser.mbty
// 838|    option(func_alias_type_name(LIDENT, UIDENT)) "(" non_empty_list_commas(func_alias_target(LIDENT)) ")" { 
// 839|    (None, $1, true, $3)
// 840|  }

///|
fn yy_action_164(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Option_Label_(_dollar1)
  guard _args[2].0 is YYObj_List_AliasTarget_(_dollar3)
  YYObj__Label___Label___Bool__List_AliasTarget__(
    {
      ()
      (None, _dollar1, true, _dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_165(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_AliasTarget_(_dollar1)
  YYObj_List_AliasTarget_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_166(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_AliasTarget_(_dollar1)
  guard _args[2].0 is YYObj_AliasTarget(_dollar3)
  YYObj_List_AliasTarget_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_167(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_AliasTarget(_dollar1)
  YYObj_List_AliasTarget_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 852|    LIDENT_MAYBE_DOT "::" { Label::{ name: $1, loc: mk_loc($loc($1)) } }

///|
fn yy_action_168(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_Label(
    {
      ()
      Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
    },
  )
}

// file:///./parser.mbty
// 857|    LIDENT_MAYBE_DOT option(preceded("as", binder)) { 
// 858|    match $2 {
// 859|      None => {
// 860|        let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 861|        AliasTarget::{ binder, target: None }
// 862|      }
// 863|      Some(binder) => {
// 864|        let target = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 865|        AliasTarget::{ binder, target: Some(target) }
// 866|      }
// 867|    }
// 868|  }

///|
fn yy_action_169(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Option_Binder_(_dollar2)
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_AliasTarget(
    {
      ()
      match _dollar2 {
        None => {
          let binder = Binder::{
            name: _dollar1,
            loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
          }
          AliasTarget::{ binder, target: None }
        }
        Some(binder) => {
          let target = Label::{
            name: _dollar1,
            loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
          }
          AliasTarget::{ binder, target: Some(target) }
        }
      }
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_170(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_171(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_Option_Binder_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 32|    L X { $2 }

///|
fn yy_action_171(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  YYObj_Binder(
    {
      ()
      _dollar2
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_172(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Binder_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 853|    UIDENT_MAYBE_DOT "::" { Label::{ name: $1, loc: mk_loc($loc($1)) } }

///|
fn yy_action_173(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_Label(
    {
      ()
      Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_174(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Label_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 623|    attributes visibility "trait" UIDENT option(preceded(COLON, separated_nonempty_list(PLUS, tvar_constraint))) "{" list_semis(trait_method_decl) "}" {
// 624|    let name = Binder::{ name: $4, loc: mk_loc($loc($4)) }
// 625|    let supers = match $5 {
// 626|      None => @list.empty()
// 627|      Some(supers) => supers
// 628|    }
// 629|    TopTrait(
// 630|      TraitDecl::{
// 631|        name,
// 632|        supers,
// 633|        methods: $7,
// 634|        vis: $2,
// 635|        loc: mk_loc($sloc),
// 636|        attrs: $1,
// 637|        doc : DocString::empty()
// 638|      }
// 639|    )
// 640|  }

///|
fn yy_action_175(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  guard _args[2].0 is YYObj_Option__list_List_TypeVarConstraint__(_dollar5)
  guard _args[4].0 is YYObj_List_TraitMethodDecl_(_dollar7)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let name = Binder::{
        name: _dollar4,
        loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      }
      let supers = match _dollar5 {
        None => @list.empty()
        Some(supers) => supers
      }
      TopTrait(TraitDecl::{
        name,
        supers,
        methods: _dollar7,
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      })
    },
  )
}

// file:///./parser.mbty
// 214|    non_empty_list_semis(X) { $1 }

///|
fn yy_action_176(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_TraitMethodDecl_(_dollar1)
  YYObj_List_TraitMethodDecl_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 203|    X option(SEMI) { @list.singleton($1) }

///|
fn yy_action_177(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_TraitMethodDecl(_dollar1)
  YYObj_List_TraitMethodDecl_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 882|    attributes is_async binder optional_bang optional_type_parameters "(" list_commas(trait_method_param) ")" func_return_type option(preceded("=", wildcard)) { 
// 883|    let (return_type, error_type) = $9
// 884|    TraitMethodDecl::{
// 885|      name: $3,
// 886|      has_error: $4,
// 887|      is_async: $2,
// 888|      quantifiers: $5,
// 889|      params: $7,
// 890|      return_type,
// 891|      error_type,
// 892|      has_default: $10,
// 893|      attrs: $1,
// 894|      loc: mk_loc($sloc)
// 895|    }
// 896|  }

///|
fn yy_action_178(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_6(_last_pos, _args[0:1])
  let _sub_action_2_result = yy_action_16(_args[0].2, _args[1:2])
  guard _args[7].0 is YYObj__Type___ErrorType_(_dollar9)
  guard _sub_action_2_result is YYObj_Binder(_dollar3)
  guard _args[2].0 is YYObj_Location_(_dollar4)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar5)
  guard _args[5].0 is YYObj_List_Parameter_(_dollar7)
  guard _args[8].0 is YYObj_Option_Location_(_dollar10)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TraitMethodDecl(
    {
      ()
      let (return_type, error_type) = _dollar9
      TraitMethodDecl::{
        name: _dollar3,
        has_error: _dollar4,
        is_async: _dollar2,
        quantifiers: _dollar5,
        params: _dollar7,
        return_type,
        error_type,
        has_default: _dollar10,
        attrs: _dollar1,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 882|    attributes is_async binder optional_bang optional_type_parameters "(" list_commas(trait_method_param) ")" func_return_type option(preceded("=", wildcard)) { 
// 883|    let (return_type, error_type) = $9
// 884|    TraitMethodDecl::{
// 885|      name: $3,
// 886|      has_error: $4,
// 887|      is_async: $2,
// 888|      quantifiers: $5,
// 889|      params: $7,
// 890|      return_type,
// 891|      error_type,
// 892|      has_default: $10,
// 893|      attrs: $1,
// 894|      loc: mk_loc($sloc)
// 895|    }
// 896|  }

///|
fn yy_action_179(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_9(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_16(_last_pos, _args[0:1])
  guard _args[6].0 is YYObj__Type___ErrorType_(_dollar9)
  guard _sub_action_2_result is YYObj_Binder(_dollar3)
  guard _args[1].0 is YYObj_Location_(_dollar4)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  guard _args[2].0 is YYObj_List_TypeVarBinder_(_dollar5)
  guard _args[4].0 is YYObj_List_Parameter_(_dollar7)
  guard _args[7].0 is YYObj_Option_Location_(_dollar10)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TraitMethodDecl(
    {
      ()
      let (return_type, error_type) = _dollar9
      TraitMethodDecl::{
        name: _dollar3,
        has_error: _dollar4,
        is_async: _dollar2,
        quantifiers: _dollar5,
        params: _dollar7,
        return_type,
        error_type,
        has_default: _dollar10,
        attrs: _dollar1,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 882|    attributes is_async binder optional_bang optional_type_parameters "(" list_commas(trait_method_param) ")" func_return_type option(preceded("=", wildcard)) { 
// 883|    let (return_type, error_type) = $9
// 884|    TraitMethodDecl::{
// 885|      name: $3,
// 886|      has_error: $4,
// 887|      is_async: $2,
// 888|      quantifiers: $5,
// 889|      params: $7,
// 890|      return_type,
// 891|      error_type,
// 892|      has_default: $10,
// 893|      attrs: $1,
// 894|      loc: mk_loc($sloc)
// 895|    }
// 896|  }

///|
fn yy_action_180(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_6(_args[0].2, _args[1:2])
  let _sub_action_2_result = yy_action_16(_args[1].2, _args[2:3])
  guard _args[8].0 is YYObj__Type___ErrorType_(_dollar9)
  guard _sub_action_2_result is YYObj_Binder(_dollar3)
  guard _args[3].0 is YYObj_Location_(_dollar4)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  guard _args[4].0 is YYObj_List_TypeVarBinder_(_dollar5)
  guard _args[6].0 is YYObj_List_Parameter_(_dollar7)
  guard _args[9].0 is YYObj_Option_Location_(_dollar10)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TraitMethodDecl(
    {
      ()
      let (return_type, error_type) = _dollar9
      TraitMethodDecl::{
        name: _dollar3,
        has_error: _dollar4,
        is_async: _dollar2,
        quantifiers: _dollar5,
        params: _dollar7,
        return_type,
        error_type,
        has_default: _dollar10,
        attrs: _dollar1,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 882|    attributes is_async binder optional_bang optional_type_parameters "(" list_commas(trait_method_param) ")" func_return_type option(preceded("=", wildcard)) { 
// 883|    let (return_type, error_type) = $9
// 884|    TraitMethodDecl::{
// 885|      name: $3,
// 886|      has_error: $4,
// 887|      is_async: $2,
// 888|      quantifiers: $5,
// 889|      params: $7,
// 890|      return_type,
// 891|      error_type,
// 892|      has_default: $10,
// 893|      attrs: $1,
// 894|      loc: mk_loc($sloc)
// 895|    }
// 896|  }

///|
fn yy_action_181(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_9(_args[0].2, _args[1:1])
  let _sub_action_2_result = yy_action_16(_args[0].2, _args[1:2])
  guard _args[7].0 is YYObj__Type___ErrorType_(_dollar9)
  guard _sub_action_2_result is YYObj_Binder(_dollar3)
  guard _args[2].0 is YYObj_Location_(_dollar4)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  guard _args[3].0 is YYObj_List_TypeVarBinder_(_dollar5)
  guard _args[5].0 is YYObj_List_Parameter_(_dollar7)
  guard _args[8].0 is YYObj_Option_Location_(_dollar10)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TraitMethodDecl(
    {
      ()
      let (return_type, error_type) = _dollar9
      TraitMethodDecl::{
        name: _dollar3,
        has_error: _dollar4,
        is_async: _dollar2,
        quantifiers: _dollar5,
        params: _dollar7,
        return_type,
        error_type,
        has_default: _dollar10,
        attrs: _dollar1,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 900|    "_" { mk_loc($sloc) }

///|
fn yy_action_182(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Location(
    {
      ()
      mk_loc((_symbol_start_pos, _end_pos))
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_183(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_184(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_Location(_dollar1)
  YYObj_Option_Location_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 32|    L X { $2 }

///|
fn yy_action_184(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Location(_dollar2)
  YYObj_Location(
    {
      ()
      _dollar2
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_185(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Location_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 170|    non_empty_list_commas(X) { $1 }

///|
fn yy_action_186(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Parameter_(_dollar1)
  YYObj_List_Parameter_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 904|    type_ { DiscardPositional(ty = Some($1), loc = mk_loc($sloc)) }

///|
fn yy_action_187(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Parameter(
    {
      ()
      DiscardPositional(
        ty=Some(_dollar1),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 905|    binder ":" type_ { Positional(binder = $1, ty = Some($3)) }

///|
fn yy_action_188(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_Parameter(
    {
      ()
      Positional(binder=_dollar1, ty=Some(_dollar3))
    },
  )
}

// file:///./parser.mbty
// 906|    POST_LABEL ":" type_ { 
// 907|    let binder = Binder::{ name: $1, loc: mk_loc($loc($1)).trim_last_char() }
// 908|    Labelled(binder~, ty = Some($3))
// 909|  }

///|
fn yy_action_189(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)).trim_last_char(),
      }
      Labelled(binder~, ty=Some(_dollar3))
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_190(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Parameter_(_dollar1)
  guard _args[2].0 is YYObj_Parameter(_dollar3)
  YYObj_List_Parameter_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_191(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Parameter_(_dollar1)
  YYObj_List_Parameter_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_192(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Parameter(_dollar1)
  YYObj_List_Parameter_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 169|    { @list.empty() }

///|
fn yy_action_193(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Parameter_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 204|    X SEMI non_empty_list_semis(X) { $3.add($1) }

///|
fn yy_action_194(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_TraitMethodDecl_(_dollar3)
  guard _args[0].0 is YYObj_TraitMethodDecl(_dollar1)
  YYObj_List_TraitMethodDecl_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 213|    { @list.empty() }

///|
fn yy_action_195(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_TraitMethodDecl_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_196(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_197(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj__list_List_TypeVarConstraint_(_dollar1)
  YYObj_Option__list_List_TypeVarConstraint__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 32|    L X { $2 }

///|
fn yy_action_197(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__list_List_TypeVarConstraint_(_dollar2)
  YYObj__list_List_TypeVarConstraint_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_198(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option__list_List_TypeVarConstraint__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 641|    attributes visibility "typealias" batch_type_alias_targets {
// 642|    let (is_list, pkg, targets) = $4
// 643|    TopBatchTypeAlias(
// 644|      pkg~,
// 645|      targets~,
// 646|      vis = $2,
// 647|      attrs = $1,
// 648|      is_list~,
// 649|      doc = DocString::empty(),
// 650|      loc = mk_loc($sloc)
// 651|    )
// 652|  }

///|
fn yy_action_199(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[1].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTypeAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 653|    attributes visibility "typealias" type_ "as" UIDENT optional_type_parameters_no_constraints {
// 654|    TopTypeDef(
// 655|      TypeDecl::{
// 656|        tycon : $6,
// 657|        tycon_loc : mk_loc($loc($6)),
// 658|        params : $7,
// 659|        components: Alias($4),
// 660|        type_vis : $2,
// 661|        doc : DocString::empty(),
// 662|        deriving: @list.empty(),
// 663|        loc : mk_loc($sloc),
// 664|        attrs : $1
// 665|      }
// 666|    )
// 667|  }

///|
fn yy_action_200(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[3].0 is YYObj_String(_dollar6)
  let _start_pos_of_item5 = _args[3].1
  let _end_pos_of_item5 = _args[3].2
  guard _args[4].0 is YYObj_List_TypeDeclBinder_(_dollar7)
  guard _args[1].0 is YYObj_Type(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopTypeDef(TypeDecl::{
        tycon: _dollar6,
        tycon_loc: mk_loc((_start_pos_of_item5, _end_pos_of_item5)),
        params: _dollar7,
        components: Alias(_dollar4),
        type_vis: _dollar2,
        doc: DocString::empty(),
        deriving: @list.empty(),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
      })
    },
  )
}

// file:///./parser.mbty
// 668|    attributes visibility "traitalias" batch_type_alias_targets {
// 669|    let (is_list, pkg, targets) = $4
// 670|    TopBatchTraitAlias(
// 671|      pkg~,
// 672|      targets~,
// 673|      vis = $2,
// 674|      attrs = $1,
// 675|      is_list~,
// 676|      doc = DocString::empty(),
// 677|      loc = mk_loc($sloc)
// 678|    )
// 679|  }

///|
fn yy_action_201(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[1].0 is YYObj__Bool__Label___List_AliasTarget__(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      let (is_list, pkg, targets) = _dollar4
      TopBatchTraitAlias(
        pkg~,
        targets~,
        vis=_dollar2,
        attrs=_dollar1,
        is_list~,
        doc=DocString::empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 803|    PACKAGE_NAME batch_type_alias_target(DOT_UIDENT) { 
// 804|    let pkg = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 805|    (false, Some(pkg), @list.singleton($2))
// 806|  }

///|
fn yy_action_202(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[1].0 is YYObj_AliasTarget(_dollar2)
  YYObj__Bool__Label___List_AliasTarget__(
    {
      ()
      let pkg = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      (false, Some(pkg), @list.singleton(_dollar2))
    },
  )
}

// file:///./parser.mbty
// 807|    PACKAGE_NAME ".(" non_empty_list_commas(batch_type_alias_target(UIDENT)) ")" { 
// 808|    let pkg = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 809|    (true, Some(pkg), $3)
// 810|  }

///|
fn yy_action_203(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_List_AliasTarget_(_dollar3)
  YYObj__Bool__Label___List_AliasTarget__(
    {
      ()
      let pkg = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      (true, Some(pkg), _dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_204(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_AliasTarget_(_dollar1)
  YYObj_List_AliasTarget_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_205(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_AliasTarget_(_dollar1)
  guard _args[2].0 is YYObj_AliasTarget(_dollar3)
  YYObj_List_AliasTarget_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_206(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_AliasTarget(_dollar1)
  YYObj_List_AliasTarget_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 819|    UIDENT_MAYBE_DOT "as" UIDENT { 
// 820|    let target = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 821|    let binder = Binder::{ name: $3, loc: mk_loc($loc($3)) }
// 822|    AliasTarget::{ binder, target: Some(target) }
// 823|  }

///|
fn yy_action_207(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  YYObj_AliasTarget(
    {
      ()
      let target = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      let binder = Binder::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      AliasTarget::{ binder, target: Some(target) }
    },
  )
}

// file:///./parser.mbty
// 815|    UIDENT_MAYBE_DOT { 
// 816|    let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 817|    AliasTarget::{ binder, target: None }
// 818|  }

///|
fn yy_action_208(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_AliasTarget(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      AliasTarget::{ binder, target: None }
    },
  )
}

// file:///./parser.mbty
// 811|    batch_type_alias_target(UIDENT) { (false, None, @list.singleton($1)) }

///|
fn yy_action_209(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_AliasTarget(_dollar1)
  YYObj__Bool__Label___List_AliasTarget__(
    {
      ()
      (false, None, @list.singleton(_dollar1))
    },
  )
}

// file:///./parser.mbty
// 819|    UIDENT_MAYBE_DOT "as" UIDENT { 
// 820|    let target = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 821|    let binder = Binder::{ name: $3, loc: mk_loc($loc($3)) }
// 822|    AliasTarget::{ binder, target: Some(target) }
// 823|  }

///|
fn yy_action_210(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  YYObj_AliasTarget(
    {
      ()
      let target = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      let binder = Binder::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      AliasTarget::{ binder, target: Some(target) }
    },
  )
}

// file:///./parser.mbty
// 815|    UIDENT_MAYBE_DOT { 
// 816|    let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 817|    AliasTarget::{ binder, target: None }
// 818|  }

///|
fn yy_action_211(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_AliasTarget(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      AliasTarget::{ binder, target: None }
    },
  )
}

// file:///./parser.mbty
// 680|    attributes is_async "test" option(loced_string) option(parameters) block_expr_with_local_types {
// 681|    let (local_types, expr) = $6
// 682|    TopTest(
// 683|      expr~,
// 684|      name = $4,
// 685|      params = $5,
// 686|      local_types~,
// 687|      is_async = $2,
// 688|      loc = mk_loc($sloc),
// 689|      attrs = $1,
// 690|      doc = DocString::empty()
// 691|    )
// 692|  }

///|
fn yy_action_212(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_9(_last_pos, _args[0:0])
  guard _args[3].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar6)
  guard _args[1].0 is YYObj_Option__StringLiteral__Location__(_dollar4)
  guard _args[2].0 is YYObj_Option_List_Parameter__(_dollar5)
  guard _sub_action_1_result is YYObj_Bool(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (local_types, expr) = _dollar6
      TopTest(
        expr~,
        name=_dollar4,
        params=_dollar5,
        local_types~,
        is_async=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_213(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Parameter_(_dollar1)
  YYObj_Option_List_Parameter__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_214(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_List_Parameter__(
    {
      ()
      None
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_215(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_216(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj__StringLiteral__Location_(_dollar1)
  YYObj_Option__StringLiteral__Location__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1641|    STRING { ($1, mk_loc($sloc)) }

///|
fn yy_action_216(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_StringLiteral(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj__StringLiteral__Location_(
    {
      ()
      (_dollar1, mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_217(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option__StringLiteral__Location__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 693|    attributes visibility "impl" optional_type_parameters type_name "for" type_ "with" binder optional_bang parameters func_return_type impl_body {
// 694|    let (ret_ty, err_ty) = $12
// 695|    TopImpl(
// 696|      self_ty = Some($7),
// 697|      trait_ = $5,
// 698|      method_name = $9,
// 699|      has_error = $10,
// 700|      quantifiers = $4,
// 701|      params = $11,
// 702|      ret_ty~,
// 703|      err_ty~,
// 704|      body = $13,
// 705|      vis = $2,
// 706|      loc = mk_loc($sloc),
// 707|      attrs = $1,
// 708|      doc = DocString::empty()
// 709|    )
// 710|  }

///|
fn yy_action_218(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_16(_args[5].2, _args[6:7])
  guard _args[9].0 is YYObj__Type___ErrorType_(_dollar12)
  guard _args[4].0 is YYObj_Type(_dollar7)
  guard _args[2].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar9)
  guard _args[7].0 is YYObj_Location_(_dollar10)
  guard _args[1].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[8].0 is YYObj_List_Parameter_(_dollar11)
  guard _args[10].0 is YYObj_DeclBody(_dollar13)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar12
      TopImpl(
        self_ty=Some(_dollar7),
        trait_=_dollar5,
        method_name=_dollar9,
        has_error=_dollar10,
        quantifiers=_dollar4,
        params=_dollar11,
        ret_ty~,
        err_ty~,
        body=_dollar13,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 729|    attributes visibility "impl" optional_type_parameters type_name "for" type_ {
// 730|    TopImplRelation(
// 731|      self_ty = $7,
// 732|      trait_ = $5,
// 733|      quantifiers = $4,
// 734|      vis = $2,
// 735|      attrs = $1,
// 736|      loc = mk_loc($sloc),
// 737|      doc = DocString::empty()
// 738|    )
// 739|  }

///|
fn yy_action_219(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[4].0 is YYObj_Type(_dollar7)
  guard _args[2].0 is YYObj_TypeName(_dollar5)
  guard _args[1].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Impl(
    {
      ()
      TopImplRelation(
        self_ty=_dollar7,
        trait_=_dollar5,
        quantifiers=_dollar4,
        vis=_dollar2,
        attrs=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 325|    "struct" UIDENT "{" list_semis(record_decl_field) "}" deriving_directive_list {
// 326|    LocalTypeDecl::{
// 327|      tycon : $2,
// 328|      tycon_loc : mk_loc($loc($2)),
// 329|      components: Record($4),
// 330|      deriving: $6
// 331|    }
// 332|  }

///|
fn yy_action_220(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[3].0 is YYObj_List_FieldDecl_(_dollar4)
  guard _args[5].0 is YYObj_List_DerivingDirective_(_dollar6)
  YYObj_LocalTypeDecl(
    {
      ()
      LocalTypeDecl::{
        tycon: _dollar2,
        tycon_loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        components: Record(_dollar4),
        deriving: _dollar6,
      }
    },
  )
}

// file:///./parser.mbty
// 214|    non_empty_list_semis(X) { $1 }

///|
fn yy_action_221(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldDecl_(_dollar1)
  YYObj_List_FieldDecl_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 203|    X option(SEMI) { @list.singleton($1) }

///|
fn yy_action_222(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_FieldDecl(_dollar1)
  YYObj_List_FieldDecl_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1882|    attributes visibility option("mut") LIDENT ":" type_ { 
// 1883|    FieldDecl::{
// 1884|      name: FieldName::{ label: $4, loc: mk_loc($loc($4)) },
// 1885|      ty: $6,
// 1886|      mut_: $3 is Some(_),
// 1887|      vis: $2,
// 1888|      loc: mk_loc($sloc),
// 1889|      attrs: $1,
// 1890|      doc: DocString::empty()
// 1891|    }
// 1892|  }

///|
fn yy_action_223(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  guard _args[3].0 is YYObj_Type(_dollar6)
  guard _args[0].0 is YYObj_Option_Unit_(_dollar3)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FieldDecl(
    {
      ()
      FieldDecl::{
        name: FieldName::{
          label: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        ty: _dollar6,
        mut_: _dollar3 is Some(_),
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 1882|    attributes visibility option("mut") LIDENT ":" type_ { 
// 1883|    FieldDecl::{
// 1884|      name: FieldName::{ label: $4, loc: mk_loc($loc($4)) },
// 1885|      ty: $6,
// 1886|      mut_: $3 is Some(_),
// 1887|      vis: $2,
// 1888|      loc: mk_loc($sloc),
// 1889|      attrs: $1,
// 1890|      doc: DocString::empty()
// 1891|    }
// 1892|  }

///|
fn yy_action_224(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_11(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[4].0 is YYObj_Type(_dollar6)
  guard _args[1].0 is YYObj_Option_Unit_(_dollar3)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FieldDecl(
    {
      ()
      FieldDecl::{
        name: FieldName::{
          label: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        ty: _dollar6,
        mut_: _dollar3 is Some(_),
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 1882|    attributes visibility option("mut") LIDENT ":" type_ { 
// 1883|    FieldDecl::{
// 1884|      name: FieldName::{ label: $4, loc: mk_loc($loc($4)) },
// 1885|      ty: $6,
// 1886|      mut_: $3 is Some(_),
// 1887|      vis: $2,
// 1888|      loc: mk_loc($sloc),
// 1889|      attrs: $1,
// 1890|      doc: DocString::empty()
// 1891|    }
// 1892|  }

///|
fn yy_action_225(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_36(_last_pos, _args[0:2])
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[5].0 is YYObj_Type(_dollar6)
  guard _args[2].0 is YYObj_Option_Unit_(_dollar3)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FieldDecl(
    {
      ()
      FieldDecl::{
        name: FieldName::{
          label: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        ty: _dollar6,
        mut_: _dollar3 is Some(_),
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 1882|    attributes visibility option("mut") LIDENT ":" type_ { 
// 1883|    FieldDecl::{
// 1884|      name: FieldName::{ label: $4, loc: mk_loc($loc($4)) },
// 1885|      ty: $6,
// 1886|      mut_: $3 is Some(_),
// 1887|      vis: $2,
// 1888|      loc: mk_loc($sloc),
// 1889|      attrs: $1,
// 1890|      doc: DocString::empty()
// 1891|    }
// 1892|  }

///|
fn yy_action_226(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_5(_args[0].2, _args[1:1])
  guard _args[2].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[4].0 is YYObj_Type(_dollar6)
  guard _args[1].0 is YYObj_Option_Unit_(_dollar3)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FieldDecl(
    {
      ()
      FieldDecl::{
        name: FieldName::{
          label: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        ty: _dollar6,
        mut_: _dollar3 is Some(_),
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 1882|    attributes visibility option("mut") LIDENT ":" type_ { 
// 1883|    FieldDecl::{
// 1884|      name: FieldName::{ label: $4, loc: mk_loc($loc($4)) },
// 1885|      ty: $6,
// 1886|      mut_: $3 is Some(_),
// 1887|      vis: $2,
// 1888|      loc: mk_loc($sloc),
// 1889|      attrs: $1,
// 1890|      doc: DocString::empty()
// 1891|    }
// 1892|  }

///|
fn yy_action_227(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_11(_args[0].2, _args[1:2])
  guard _args[3].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[5].0 is YYObj_Type(_dollar6)
  guard _args[2].0 is YYObj_Option_Unit_(_dollar3)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FieldDecl(
    {
      ()
      FieldDecl::{
        name: FieldName::{
          label: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        ty: _dollar6,
        mut_: _dollar3 is Some(_),
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 770|    "priv" { Priv(loc = mk_loc($sloc)) }

///|
fn yy_action_11(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Visibility(
    {
      ()
      Priv(loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 776|    "(" "readonly" ")" { Some("readonly") }

///|
fn yy_action_228(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_String_(
    {
      ()
      Some("readonly")
    },
  )
}

// file:///./parser.mbty
// 777|    "(" LIDENT ")" { Some($2) }

///|
fn yy_action_229(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_String_(
    {
      ()
      Some(_dollar2)
    },
  )
}

// file:///./parser.mbty
// 1882|    attributes visibility option("mut") LIDENT ":" type_ { 
// 1883|    FieldDecl::{
// 1884|      name: FieldName::{ label: $4, loc: mk_loc($loc($4)) },
// 1885|      ty: $6,
// 1886|      mut_: $3 is Some(_),
// 1887|      vis: $2,
// 1888|      loc: mk_loc($sloc),
// 1889|      attrs: $1,
// 1890|      doc: DocString::empty()
// 1891|    }
// 1892|  }

///|
fn yy_action_230(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_36(_args[0].2, _args[1:3])
  guard _args[4].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[4].1
  let _end_pos_of_item3 = _args[4].2
  guard _args[6].0 is YYObj_Type(_dollar6)
  guard _args[3].0 is YYObj_Option_Unit_(_dollar3)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_FieldDecl(
    {
      ()
      FieldDecl::{
        name: FieldName::{
          label: _dollar4,
          loc: mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        },
        ty: _dollar6,
        mut_: _dollar3 is Some(_),
        vis: _dollar2,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 771|    "pub" pub_attr { Pub(loc = mk_loc($sloc), attr = $2) }

///|
fn yy_action_36(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[1].0 is YYObj_String_(_dollar2)
  YYObj_Visibility(
    {
      ()
      Pub(loc=mk_loc((_symbol_start_pos, _end_pos)), attr=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 775|     { None }

///|
fn yy_action_231(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_String_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 204|    X SEMI non_empty_list_semis(X) { $3.add($1) }

///|
fn yy_action_232(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_FieldDecl_(_dollar3)
  guard _args[0].0 is YYObj_FieldDecl(_dollar1)
  YYObj_List_FieldDecl_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 213|    { @list.empty() }

///|
fn yy_action_233(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_FieldDecl_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 333|    "struct" UIDENT "(" non_empty_list_commas(type_) ")" deriving_directive_list {
// 334|    LocalTypeDecl::{
// 335|      tycon : $2,
// 336|      tycon_loc : mk_loc($loc($2)),
// 337|      components: TupleStruct($4),
// 338|      deriving: $6
// 339|    }
// 340|  }

///|
fn yy_action_234(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[3].0 is YYObj_List_Type_(_dollar4)
  guard _args[5].0 is YYObj_List_DerivingDirective_(_dollar6)
  YYObj_LocalTypeDecl(
    {
      ()
      LocalTypeDecl::{
        tycon: _dollar2,
        tycon_loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        components: TupleStruct(_dollar4),
        deriving: _dollar6,
      }
    },
  )
}

// file:///./parser.mbty
// 341|    "enum" UIDENT "{" list_semis(enum_constructor) "}" deriving_directive_list {
// 342|    LocalTypeDecl::{
// 343|      tycon : $2,
// 344|      tycon_loc : mk_loc($loc($2)),
// 345|      components: Variant($4),
// 346|      deriving: $6
// 347|    }
// 348|  }

///|
fn yy_action_235(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[3].0 is YYObj_List_ConstrDecl_(_dollar4)
  guard _args[5].0 is YYObj_List_DerivingDirective_(_dollar6)
  YYObj_LocalTypeDecl(
    {
      ()
      LocalTypeDecl::{
        tycon: _dollar2,
        tycon_loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        components: Variant(_dollar4),
        deriving: _dollar6,
      }
    },
  )
}

// file:///./parser.mbty
// 349|    "type" UIDENT type_ deriving_directive_list {
// 350|    LocalTypeDecl::{
// 351|      tycon : $2,
// 352|      tycon_loc : mk_loc($loc($2)),
// 353|      components: Newtype($3),
// 354|      deriving: $4
// 355|    }
// 356|  }

///|
fn yy_action_236(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[2].0 is YYObj_Type(_dollar3)
  guard _args[3].0 is YYObj_List_DerivingDirective_(_dollar4)
  YYObj_LocalTypeDecl(
    {
      ()
      LocalTypeDecl::{
        tycon: _dollar2,
        tycon_loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        components: Newtype(_dollar3),
        deriving: _dollar4,
      }
    },
  )
}

// file:///./parser.mbty
// 878|    "derive" "(" list_commas(deriving_directive) ")" { $3 }

///|
fn yy_action_237(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_DerivingDirective_(_dollar3)
  YYObj_List_DerivingDirective_(
    {
      ()
      _dollar3
    },
  )
}

// file:///./parser.mbty
// 170|    non_empty_list_commas(X) { $1 }

///|
fn yy_action_238(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_DerivingDirective_(_dollar1)
  YYObj_List_DerivingDirective_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 873|    type_name "(" list_commas(argument) ")" { DerivingDirective::{ type_name: $1, args: $3, loc: mk_loc($sloc) } }

///|
fn yy_action_239(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_TypeName(_dollar1)
  guard _args[2].0 is YYObj_List_Argument_(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_DerivingDirective(
    {
      ()
      DerivingDirective::{
        type_name: _dollar1,
        args: _dollar3,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 872|    type_name { DerivingDirective::{ type_name: $1, args: @list.empty(), loc: mk_loc($sloc) } }

///|
fn yy_action_240(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_TypeName(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_DerivingDirective(
    {
      ()
      DerivingDirective::{
        type_name: _dollar1,
        args: @list.empty(),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_241(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_DerivingDirective_(_dollar1)
  guard _args[2].0 is YYObj_DerivingDirective(_dollar3)
  YYObj_List_DerivingDirective_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_242(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_DerivingDirective_(_dollar1)
  YYObj_List_DerivingDirective_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_243(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_DerivingDirective(_dollar1)
  YYObj_List_DerivingDirective_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 169|    { @list.empty() }

///|
fn yy_action_244(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_DerivingDirective_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 877|     { @list.empty() }

///|
fn yy_action_245(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_DerivingDirective_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 390|    local_type_decl SEMI local_types_and_stmts { ($3.0.add($1), $3.1) }

///|
fn yy_action_246(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar3)
  guard _args[0].0 is YYObj_LocalTypeDecl(_dollar1)
  YYObj__List_LocalTypeDecl___Expr_(
    {
      ()
      (_dollar3.0.add(_dollar1), _dollar3.1)
    },
  )
}

// file:///./parser.mbty
// 388|    local_type_decl { (@list.singleton($1), Expr::Unit(loc = mk_loc($sloc), faked = true)) }

///|
fn yy_action_247(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_LocalTypeDecl(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj__List_LocalTypeDecl___Expr_(
    {
      ()
      (
        @list.singleton(_dollar1),
        Expr::Unit(loc=mk_loc((_symbol_start_pos, _end_pos)), faked=true),
      )
    },
  )
}

// file:///./parser.mbty
// 389|    list_semis_rev(statement) { (@list.empty(), Statement::compact_rev($1, loc = mk_loc($sloc))) }

///|
fn yy_action_248(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Statement_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj__List_LocalTypeDecl___Expr_(
    {
      ()
      (
        @list.empty(),
        Statement::compact_rev(
          _dollar1,
          loc=mk_loc((_symbol_start_pos, _end_pos)),
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 394|    "{" local_types_and_stmts "}" { $2 }

///|
fn yy_action_249(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar2)
  YYObj__List_LocalTypeDecl___Expr_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 398|    block_expr_with_local_types {
// 399|    let (local_types, expr) = $1
// 400|    DeclBody(local_types~, expr~)
// 401|  }

///|
fn yy_action_250(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj__List_LocalTypeDecl___Expr_(_dollar1)
  YYObj_DeclBody(
    {
      ()
      let (local_types, expr) = _dollar1
      DeclBody(local_types~, expr~)
    },
  )
}

// file:///./parser.mbty
// 402|    "=" STRING { DeclStubs(Embedded(language = None, code = CodeString($2))) }

///|
fn yy_action_251(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_StringLiteral(_dollar2)
  YYObj_DeclBody(
    {
      ()
      DeclStubs(Embedded(language=None, code=CodeString(_dollar2)))
    },
  )
}

// file:///./parser.mbty
// 711|    attributes visibility "impl" optional_type_parameters type_name "with" binder optional_bang parameters func_return_type impl_body {
// 712|    let (ret_ty, err_ty) = $10
// 713|    TopImpl(
// 714|      self_ty = None,
// 715|      trait_ = $5,
// 716|      method_name = $7,
// 717|      has_error = $8,
// 718|      quantifiers = $4,
// 719|      params = $9,
// 720|      ret_ty~,
// 721|      err_ty~,
// 722|      body = $11,
// 723|      vis = $2,
// 724|      loc = mk_loc($sloc),
// 725|      attrs = $1,
// 726|      doc = DocString::empty()
// 727|    )
// 728|  }

///|
fn yy_action_252(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_16(_args[3].2, _args[4:5])
  guard _args[7].0 is YYObj__Type___ErrorType_(_dollar10)
  guard _args[2].0 is YYObj_TypeName(_dollar5)
  guard _sub_action_2_result is YYObj_Binder(_dollar7)
  guard _args[5].0 is YYObj_Location_(_dollar8)
  guard _args[1].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[6].0 is YYObj_List_Parameter_(_dollar9)
  guard _args[8].0 is YYObj_DeclBody(_dollar11)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      let (ret_ty, err_ty) = _dollar10
      TopImpl(
        self_ty=None,
        trait_=_dollar5,
        method_name=_dollar7,
        has_error=_dollar8,
        quantifiers=_dollar4,
        params=_dollar9,
        ret_ty~,
        err_ty~,
        body=_dollar11,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 255|    delimited("[", non_empty_list_commas(id(tvar_binder)), "]") { $1 }

///|
fn yy_action_253(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_254(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_List_TypeVarBinder_(_dollar1)
  YYObj_List_TypeVarBinder_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }

///|
fn yy_action_254(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_TypeVarBinder_(_dollar2)
  YYObj_List_TypeVarBinder_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_255(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_TypeVarBinder_(_dollar1)
  YYObj_List_TypeVarBinder_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 1583|    UIDENT COLON separated_nonempty_list(PLUS, tvar_constraint) { 
// 1584|    TypeVarBinder::{ name: $1, constraints: $3, name_loc: mk_loc($loc($1)) }
// 1585|  }

///|
fn yy_action_256(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  guard _args[2].0 is YYObj__list_List_TypeVarConstraint_(_dollar3)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_TypeVarBinder(
    {
      ()
      TypeVarBinder::{
        name: _dollar1,
        constraints: _dollar3,
        name_loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
    },
  )
}

// file:///./parser.mbty
// 1594|    qual_ident_ty { TypeVarConstraint::{ trait_: $1, loc: mk_loc($sloc) } }

///|
fn yy_action_257(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_LongIdent(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TypeVarConstraint(
    {
      ()
      TypeVarConstraint::{
        trait_: _dollar1,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./stdlib.mbty
// 60|    X SEP separated_nonempty_list(SEP, X) { $3.add($1) }

///|
fn yy_action_258(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj__list_List_TypeVarConstraint_(_dollar3)
  guard _args[0].0 is YYObj_TypeVarConstraint(_dollar1)
  YYObj__list_List_TypeVarConstraint_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 59|    X { @list.singleton($1) }

///|
fn yy_action_259(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_TypeVarConstraint(_dollar1)
  YYObj__list_List_TypeVarConstraint_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1580|    UIDENT { 
// 1581|    TypeVarBinder::{ name: $1, constraints: @list.empty(), name_loc: mk_loc($loc($1)) }
// 1582|  }

///|
fn yy_action_260(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_TypeVarBinder(
    {
      ()
      TypeVarBinder::{
        name: _dollar1,
        constraints: @list.empty(),
        name_loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_261(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_262(_args[1].2, _args[2:3])
  guard _args[0].0 is YYObj_List_TypeVarBinder_(_dollar1)
  guard _sub_action_0_result is YYObj_TypeVarBinder(_dollar3)
  YYObj_List_TypeVarBinder_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_263(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_262(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_TypeVarBinder(_dollar1)
  YYObj_List_TypeVarBinder_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 218|    X { $1 }

///|
fn yy_action_262(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_TypeVarBinder(_dollar1)
  YYObj_TypeVarBinder(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 264|    option(type_parameters) {
// 265|    match $1 {
// 266|      None => @list.empty()
// 267|      Some(params) => params
// 268|    }
// 269|  }

///|
fn yy_action_264(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Option_List_TypeVarBinder__(_dollar1)
  YYObj_List_TypeVarBinder_(
    {
      ()
      match _dollar1 {
        None => @list.empty()
        Some(params) => params
      }
    },
  )
}

// file:///./parser.mbty
// 740|    attributes visibility "enumview" optional_type_parameters UIDENT "{" list_semis(enum_constructor) "}" "for" type_ "with" binder parameters block_expr {
// 741|    TopView(
// 742|      quantifiers = $4,
// 743|      source_ty = $10,
// 744|      view_type_name = $5,
// 745|      view_type_loc = mk_loc($loc($5)),
// 746|      view_func_name = $12,
// 747|      parameters = $13,
// 748|      params_loc = mk_loc($loc($13)),
// 749|      view_constrs = $7,
// 750|      body = $14,
// 751|      vis = $2,
// 752|      loc = mk_loc($sloc),
// 753|      attrs = $1,
// 754|      doc = DocString::empty()
// 755|    )
// 756|  }

///|
fn yy_action_265(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  let _sub_action_2_result = yy_action_16(_args[8].2, _args[9:10])
  guard _args[1].0 is YYObj_List_TypeVarBinder_(_dollar4)
  guard _args[7].0 is YYObj_Type(_dollar10)
  guard _args[2].0 is YYObj_String(_dollar5)
  let _start_pos_of_item4 = _args[2].1
  let _end_pos_of_item4 = _args[2].2
  guard _sub_action_2_result is YYObj_Binder(_dollar12)
  guard _args[10].0 is YYObj_List_Parameter_(_dollar13)
  let _start_pos_of_item12 = _args[10].1
  let _end_pos_of_item12 = _args[10].2
  guard _args[4].0 is YYObj_List_ConstrDecl_(_dollar7)
  guard _args[11].0 is YYObj_Expr(_dollar14)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_Impl(
    {
      ()
      TopView(
        quantifiers=_dollar4,
        source_ty=_dollar10,
        view_type_name=_dollar5,
        view_type_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        view_func_name=_dollar12,
        parameters=_dollar13,
        params_loc=mk_loc((_start_pos_of_item12, _end_pos_of_item12)),
        view_constrs=_dollar7,
        body=_dollar14,
        vis=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        attrs=_dollar1,
        doc=DocString::empty(),
      )
    },
  )
}

// file:///./parser.mbty
// 214|    non_empty_list_semis(X) { $1 }

///|
fn yy_action_266(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_ConstrDecl_(_dollar1)
  YYObj_List_ConstrDecl_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 203|    X option(SEMI) { @list.singleton($1) }

///|
fn yy_action_267(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_ConstrDecl(_dollar1)
  YYObj_List_ConstrDecl_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1914|    attributes UIDENT option(delimited("(", non_empty_list_commas(constructor_param), ")")) option(eq_int_tag) { 
// 1915|    ConstrDecl::{
// 1916|      name: ConstrName::{ name: $2, loc: mk_loc($loc($2)) },
// 1917|      args: $3,
// 1918|      tag: $4,
// 1919|      loc: mk_loc($sloc),
// 1920|      attrs: $1,
// 1921|      doc: DocString::empty()
// 1922|    }
// 1923|  }

///|
fn yy_action_268(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  guard _args[0].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[0].1
  let _end_pos_of_item1 = _args[0].2
  guard _args[1].0 is YYObj_Option_List_ConstrParam__(_dollar3)
  guard _args[2].0 is YYObj_Option__String__Location__(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_ConstrDecl(
    {
      ()
      ConstrDecl::{
        name: ConstrName::{
          name: _dollar2,
          loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        },
        args: _dollar3,
        tag: _dollar4,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 1914|    attributes UIDENT option(delimited("(", non_empty_list_commas(constructor_param), ")")) option(eq_int_tag) { 
// 1915|    ConstrDecl::{
// 1916|      name: ConstrName::{ name: $2, loc: mk_loc($loc($2)) },
// 1917|      args: $3,
// 1918|      tag: $4,
// 1919|      loc: mk_loc($sloc),
// 1920|      attrs: $1,
// 1921|      doc: DocString::empty()
// 1922|    }
// 1923|  }

///|
fn yy_action_269(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_58(_last_pos, _args[0:1])
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[2].0 is YYObj_Option_List_ConstrParam__(_dollar3)
  guard _args[3].0 is YYObj_Option__String__Location__(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  YYObj_ConstrDecl(
    {
      ()
      ConstrDecl::{
        name: ConstrName::{
          name: _dollar2,
          loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        },
        args: _dollar3,
        tag: _dollar4,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
        attrs: _dollar1,
        doc: DocString::empty(),
      }
    },
  )
}

// file:///./parser.mbty
// 761|    non_empty_list(attribute) { $1 }

///|
fn yy_action_58(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Attribute_(_dollar1)
  YYObj_List_Attribute_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_270(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_271(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj__String__Location_(_dollar1)
  YYObj_Option__String__Location__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1927|    "=" INT { ($2, mk_loc($loc($2))) }

///|
fn yy_action_271(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  YYObj__String__Location_(
    {
      ()
      (_dollar2, mk_loc((_start_pos_of_item1, _end_pos_of_item1)))
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_272(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option__String__Location__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1896|    option("mut") type_ { 
// 1897|    ConstrParam::{
// 1898|      ty: $2,
// 1899|      mut_: $1 is Some(_),
// 1900|      label: None
// 1901|    }
// 1902|  }

///|
fn yy_action_273(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Type(_dollar2)
  guard _args[0].0 is YYObj_Option_Unit_(_dollar1)
  YYObj_ConstrParam(
    {
      ()
      ConstrParam::{ ty: _dollar2, mut_: _dollar1 is Some(_), label: None }
    },
  )
}

// file:///./parser.mbty
// 1903|    option("mut") POST_LABEL ":" type_ { 
// 1904|    let label = Label::{ name: $2, loc: mk_loc($loc($2)).trim_last_char() }
// 1905|    ConstrParam::{
// 1906|      ty: $4,
// 1907|      mut_: $1 is Some(_),
// 1908|      label: Some(label)
// 1909|    }
// 1910|  }

///|
fn yy_action_274(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[3].0 is YYObj_Type(_dollar4)
  guard _args[0].0 is YYObj_Option_Unit_(_dollar1)
  YYObj_ConstrParam(
    {
      ()
      let label = Label::{
        name: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)).trim_last_char(),
      }
      ConstrParam::{
        ty: _dollar4,
        mut_: _dollar1 is Some(_),
        label: Some(label),
      }
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_275(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _dollar1 = ()
  YYObj_Option_Unit_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_276(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_ConstrParam_(_dollar1)
  guard _args[2].0 is YYObj_ConstrParam(_dollar3)
  YYObj_List_ConstrParam_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_277(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_ConstrParam_(_dollar1)
  YYObj_List_ConstrParam_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_278(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_279(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_List_ConstrParam_(_dollar1)
  YYObj_Option_List_ConstrParam__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }

///|
fn yy_action_279(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_ConstrParam_(_dollar2)
  YYObj_List_ConstrParam_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_280(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_ConstrParam(_dollar1)
  YYObj_List_ConstrParam_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_281(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Unit_(
    {
      ()
      None
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_282(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_List_ConstrParam__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 204|    X SEMI non_empty_list_semis(X) { $3.add($1) }

///|
fn yy_action_283(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_ConstrDecl_(_dollar3)
  guard _args[0].0 is YYObj_ConstrDecl(_dollar1)
  YYObj_List_ConstrDecl_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 213|    { @list.empty() }

///|
fn yy_action_284(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_ConstrDecl_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_285(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_TypeVarBinder_(_dollar1)
  YYObj_Option_List_TypeVarBinder__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_286(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_List_TypeVarBinder__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 781|    attributes visibility "type" UIDENT optional_type_parameters_no_constraints { 
// 782|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 783|  }

///|
fn yy_action_287(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  guard _args[2].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 787|    attributes visibility "suberror" UIDENT { ($1, $2, $4, mk_loc($loc($4))) }

///|
fn yy_action_288(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  YYObj__List_Attribute___Visibility__String__Location_(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
      )
    },
  )
}

// file:///./parser.mbty
// 791|    attributes visibility "struct" UIDENT optional_type_parameters_no_constraints { 
// 792|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 793|  }

///|
fn yy_action_289(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  guard _args[2].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 273|    option(delimited("[", non_empty_list_commas(id(type_decl_binder)), "]")) {
// 274|    match $1 {
// 275|      None => @list.empty()
// 276|      Some(params) => params
// 277|    }
// 278|  }

///|
fn yy_action_290(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Option_List_TypeDeclBinder__(_dollar1)
  YYObj_List_TypeDeclBinder_(
    {
      ()
      match _dollar1 {
        None => @list.empty()
        Some(params) => params
      }
    },
  )
}

// file:///./parser.mbty
// 797|    attributes visibility "enum" UIDENT optional_type_parameters_no_constraints { 
// 798|    ($1, $2, $4, mk_loc($loc($4)), $5) 
// 799|  }

///|
fn yy_action_291(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_4(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_5(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_List_Attribute_(_dollar1)
  guard _sub_action_1_result is YYObj_Visibility(_dollar2)
  guard _args[1].0 is YYObj_String(_dollar4)
  let _start_pos_of_item3 = _args[1].1
  let _end_pos_of_item3 = _args[1].2
  guard _args[2].0 is YYObj_List_TypeDeclBinder_(_dollar5)
  YYObj__List_Attribute___Visibility__String__Location__List_TypeDeclBinder__(
    {
      ()
      (
        _dollar1,
        _dollar2,
        _dollar4,
        mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        _dollar5,
      )
    },
  )
}

// file:///./parser.mbty
// 769|     { Default }

///|
fn yy_action_5(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Visibility(
    {
      ()
      Default
    },
  )
}

// file:///./parser.mbty
// 760|     { @list.empty() }

///|
fn yy_action_4(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Attribute_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_292(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_TypeDeclBinder_(_dollar1)
  YYObj_List_TypeDeclBinder_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 1589|    UIDENT { TypeDeclBinder::{ name: Some($1), loc: mk_loc($sloc) } }

///|
fn yy_action_293(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TypeDeclBinder(
    {
      ()
      TypeDeclBinder::{
        name: Some(_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1590|    "_" { TypeDeclBinder::{ name: None, loc: mk_loc($sloc) } }

///|
fn yy_action_294(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TypeDeclBinder(
    {
      ()
      TypeDeclBinder::{ name: None, loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_295(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_296(_args[1].2, _args[2:3])
  guard _args[0].0 is YYObj_List_TypeDeclBinder_(_dollar1)
  guard _sub_action_0_result is YYObj_TypeDeclBinder(_dollar3)
  YYObj_List_TypeDeclBinder_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_297(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_298(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_List_TypeDeclBinder_(_dollar1)
  YYObj_Option_List_TypeDeclBinder__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }

///|
fn yy_action_298(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_TypeDeclBinder_(_dollar2)
  YYObj_List_TypeDeclBinder_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_299(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_296(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_TypeDeclBinder(_dollar1)
  YYObj_List_TypeDeclBinder_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 218|    X { $1 }

///|
fn yy_action_296(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_TypeDeclBinder(_dollar1)
  YYObj_TypeDeclBinder(
    {
      ()
      _dollar1
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_300(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_List_TypeDeclBinder__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 148|    X non_empty_list(X) { $2.add($1) }

///|
fn yy_action_301(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_302(_last_pos, _args[0:1])
  guard _args[1].0 is YYObj_List_Attribute_(_dollar2)
  guard _sub_action_0_result is YYObj_Attribute(_dollar1)
  YYObj_List_Attribute_(
    {
      ()
      _dollar2.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 147|    X { @list.singleton($1) }

///|
fn yy_action_303(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_302(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Attribute(_dollar1)
  YYObj_List_Attribute_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 765|    ATTRIBUTE { Attribute::new(loc=mk_loc($sloc), $1) }

///|
fn yy_action_302(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj__String__String___String_(_dollar1)
  YYObj_Attribute(
    {
      ()
      Attribute::new(loc=mk_loc((_symbol_start_pos, _end_pos)), _dollar1)
    },
  )
}

// file:///./parser.mbty
// 204|    X SEMI non_empty_list_semis(X) { $3.add($1) }

///|
fn yy_action_304(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_Impl_(_dollar3)
  guard _args[0].0 is YYObj_Impl(_dollar1)
  YYObj_List_Impl_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 213|    { @list.empty() }

///|
fn yy_action_305(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Impl_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 406|    expr EOF { $1 }

///|
fn yy_action_306(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1556|    "[" list_commas(spreadable_elem) "]" { @syntax.make_array_expr(loc = mk_loc($sloc), $2) }

///|
fn yy_action_307(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[1].0 is YYObj_List_SpreadableElem_(_dollar2)
  YYObj_Expr(
    {
      ()
      @syntax.make_array_expr(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar2,
      )
    },
  )
}

// file:///./parser.mbty
// 170|    non_empty_list_commas(X) { $1 }

///|
fn yy_action_308(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_SpreadableElem_(_dollar1)
  YYObj_List_SpreadableElem_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1695|    expr { Regular($1) }

///|
fn yy_action_309(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_SpreadableElem(
    {
      ()
      Regular(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1931|    label_pun "," list_commas_with_trailing_info(record_defn_single) { 
// 1932|    let (fs, trailing) = $3
// 1933|    let trailing_mark = if fs.is_empty() || trailing { TrailingMark::Comma } else { TrailingMark::None }
// 1934|    (fs.add($1), trailing_mark)
// 1935|  }

///|
fn yy_action_310(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_311(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj__List_FieldDef___Bool_(_dollar3)
  guard _sub_action_0_result is YYObj_FieldDef(_dollar1)
  YYObj__List_FieldDef___TrailingMark_(
    {
      ()
      let (fs, trailing) = _dollar3
      let trailing_mark = if fs.is_empty() || trailing {
        TrailingMark::Comma
      } else {
        TrailingMark::None
      }
      (fs.add(_dollar1), trailing_mark)
    },
  )
}

// file:///./parser.mbty
// 1936|    labeled_expr option(",") { 
// 1937|    let trailing_mark = if $2 is Some(_) { TrailingMark::Comma } else { TrailingMark::None }
// 1938|    (@list.singleton($1), trailing_mark)
// 1939|  }

///|
fn yy_action_312(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_313(_last_pos, _args[0:3])
  guard _args[3].0 is YYObj_Option_Unit_(_dollar2)
  guard _sub_action_0_result is YYObj_FieldDef(_dollar1)
  YYObj__List_FieldDef___TrailingMark_(
    {
      ()
      let trailing_mark = if _dollar2 is Some(_) {
        TrailingMark::Comma
      } else {
        TrailingMark::None
      }
      (@list.singleton(_dollar1), trailing_mark)
    },
  )
}

// file:///./parser.mbty
// 1940|    labeled_expr "," non_empty_list_commas_with_trailing_info(record_defn_single) { 
// 1941|    let (fs, trailing) = $3
// 1942|    let trailing_mark = if trailing { TrailingMark::Comma } else { TrailingMark::None }
// 1943|    (fs.add($1), trailing_mark)
// 1944|  }

///|
fn yy_action_314(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_313(_last_pos, _args[0:3])
  guard _args[4].0 is YYObj__List_FieldDef___Bool_(_dollar3)
  guard _sub_action_0_result is YYObj_FieldDef(_dollar1)
  YYObj__List_FieldDef___TrailingMark_(
    {
      ()
      let (fs, trailing) = _dollar3
      let trailing_mark = if trailing {
        TrailingMark::Comma
      } else {
        TrailingMark::None
      }
      (fs.add(_dollar1), trailing_mark)
    },
  )
}

// file:///./parser.mbty
// 1470|    "{" record_defn "}" { 
// 1471|    let (fs, trailing) = $2
// 1472|    @syntax.make_record_expr(loc = mk_loc($sloc), trailing~, None, fs)
// 1473|  }

///|
fn yy_action_315(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__List_FieldDef___TrailingMark_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let (fs, trailing) = _dollar2
      @syntax.make_record_expr(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        trailing~,
        None,
        fs,
      )
    },
  )
}

// file:///./parser.mbty
// 1479|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "}" { 
// 1480|    RecordUpdate(type_name = $1, record = $4, fields = @list.empty(), loc = mk_loc($sloc))
// 1481|  }

///|
fn yy_action_316(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_317(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_Option_TypeName_(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      RecordUpdate(
        type_name=_dollar1,
        record=_dollar4,
        fields=@list.empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1482|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "," list_commas(record_defn_single) "}" { 
// 1483|    RecordUpdate(type_name = $1, record = $4, fields = $6, loc = mk_loc($sloc))
// 1484|  }

///|
fn yy_action_318(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_317(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_Option_TypeName_(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar4)
  guard _args[4].0 is YYObj_List_FieldDef_(_dollar6)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      RecordUpdate(
        type_name=_dollar1,
        record=_dollar4,
        fields=_dollar6,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./stdlib.mbty
// 9|    { None }

///|
fn yy_action_317(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_TypeName_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1485|    "{" semi_expr_semi_opt "}" { 
// 1486|    let (expr, trailing) = $2
// 1487|    match expr {
// 1488|      Ident(id = { name: Ident(name~), loc }, ..) => {
// 1489|        let label = Label::{ name, loc }
// 1490|        let field = @syntax.make_field_def(loc = mk_loc($sloc), label, expr, true)
// 1491|        let trailing_mark = if trailing { TrailingMark::Semi } else { TrailingMark::None }
// 1492|        @syntax.make_record_expr(loc = mk_loc($sloc), trailing = trailing_mark, None, @list.singleton(field))
// 1493|      }
// 1494|      _ => Group(expr~, group = Brace, loc = mk_loc($sloc))
// 1495|    }
// 1496|  }

///|
fn yy_action_319(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_320(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj__Expr__Bool_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let (expr, trailing) = _dollar2
      match expr {
        Ident(id={ name: Ident(name~), loc }, ..) => {
          let label = Label::{ name, loc }
          let field = @syntax.make_field_def(
            loc=mk_loc((_symbol_start_pos, _end_pos)),
            label,
            expr,
            true,
          )
          let trailing_mark = if trailing {
            TrailingMark::Semi
          } else {
            TrailingMark::None
          }
          @syntax.make_record_expr(
            loc=mk_loc((_symbol_start_pos, _end_pos)),
            trailing=trailing_mark,
            None,
            @list.singleton(field),
          )
        }
        _ =>
          Group(expr~, group=Brace, loc=mk_loc((_symbol_start_pos, _end_pos)))
      }
    },
  )
}

// file:///./parser.mbty
// 933|    none_empty_list_semis_rev_with_trailing_info(statement) { 
// 934|    let (ls, trailing) = $1
// 935|    (Statement::compact_rev(ls, loc = mk_loc($sloc)), trailing)
// 936|  }

///|
fn yy_action_320(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj__List_Statement___Bool_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj__Expr__Bool_(
    {
      ()
      let (ls, trailing) = _dollar1
      (
        Statement::compact_rev(ls, loc=mk_loc((_symbol_start_pos, _end_pos))),
        trailing,
      )
    },
  )
}

// file:///./parser.mbty
// 1497|    "{" list_commas(map_expr_elem) "}" { 
// 1498|    Map(elems = $2, loc = mk_loc($sloc))
// 1499|  }

///|
fn yy_action_321(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_MapExprElem_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Map(elems=_dollar2, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 199|    non_empty_list_semi_rev_aux(X) option(SEMI) { ($1, $2 is Some(_)) }

///|
fn yy_action_322(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Statement_(_dollar1)
  guard _args[1].0 is YYObj_Option_Bool_(_dollar2)
  YYObj__List_Statement___Bool_(
    {
      ()
      (_dollar1, _dollar2 is Some(_))
    },
  )
}

// file:///./parser.mbty
// 170|    non_empty_list_commas(X) { $1 }

///|
fn yy_action_323(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MapExprElem_(_dollar1)
  YYObj_List_MapExprElem_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1458|    is_async fn_header_no_binder list_semis(multi_pattern_case) "}" { 
// 1459|    Match(
// 1460|      cases = $3,
// 1461|      has_error = $2,
// 1462|      is_async = $1,
// 1463|      fn_loc = mk_loc($loc($2)),
// 1464|      loc = mk_loc($sloc)
// 1465|    )
// 1466|  }

///|
fn yy_action_324(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  guard _args[1].0 is YYObj_List_MultiArgCase_(_dollar3)
  guard _args[0].0 is YYObj_Location_(_dollar2)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _start_pos_of_item1 = _args[0].1
  let _end_pos_of_item1 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      Match(
        cases=_dollar3,
        has_error=_dollar2,
        is_async=_dollar1,
        fn_loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1092|    non_empty_list_commas(pattern) option(preceded("if", infix_expr)) "=>" expr_statement { 
// 1093|    MultiArgCase::{ patterns : $1, guard_ : $2, body : $4 }
// 1094|  }

///|
fn yy_action_325(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Pattern_(_dollar1)
  guard _args[1].0 is YYObj_Option_Expr_(_dollar2)
  guard _args[3].0 is YYObj_Expr(_dollar4)
  YYObj_MultiArgCase(
    {
      ()
      MultiArgCase::{ patterns: _dollar1, guard_: _dollar2, body: _dollar4 }
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_326(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_327(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_Expr(_dollar1)
  YYObj_Option_Expr_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 32|    L X { $2 }

///|
fn yy_action_327(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  YYObj_Expr(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 382|    "{" list_semis_rev(statement) "}" {
// 383|    Statement::compact_rev($2, loc = mk_loc($sloc))
// 384|  }

///|
fn yy_action_328(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_Statement_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Statement::compact_rev(
        _dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 209|    non_empty_list_semis_rev(X) { $1 }

///|
fn yy_action_329(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Statement_(_dollar1)
  YYObj_List_Statement_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 195|    non_empty_list_semi_rev_aux(X) option(SEMI) { $1 }

///|
fn yy_action_330(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Statement_(_dollar1)
  YYObj_List_Statement_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 976|    is_async "fn" binder optional_bang parameters func_return_type block_expr { 
// 977|    let (return_type, error_type) = $6
// 978|    let func = Func::Lambda(
// 979|      parameters = $5,
// 980|      params_loc = mk_loc($loc($5)),
// 981|      body = $7,
// 982|      return_type~,
// 983|      error_type~,
// 984|      kind = Lambda,
// 985|      has_error = $4,
// 986|      is_async = $1,
// 987|      loc = mk_loc($sloc)
// 988|    )
// 989|    StmtFunc(binder = $3, func~, loc = mk_loc($sloc))
// 990|  }

///|
fn yy_action_331(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_16(_args[0].2, _args[1:2])
  guard _args[4].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _args[3].0 is YYObj_List_Parameter_(_dollar5)
  let _start_pos_of_item4 = _args[3].1
  let _end_pos_of_item4 = _args[3].2
  guard _args[5].0 is YYObj_Expr(_dollar7)
  guard _args[2].0 is YYObj_Location_(_dollar4)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_1_result is YYObj_Binder(_dollar3)
  YYObj_Statement(
    {
      ()
      let (return_type, error_type) = _dollar6
      let func = Func::Lambda(
        parameters=_dollar5,
        params_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        body=_dollar7,
        return_type~,
        error_type~,
        kind=Lambda,
        has_error=_dollar4,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
      StmtFunc(
        binder=_dollar3,
        func~,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 962|    "let" pattern opt_annot "=" expr { 
// 963|    let pat = match $3 {
// 964|      None => $2
// 965|      Some(ty) => Pattern::Constraint(pat = $2, ty~, loc = mk_loc($sloc))
// 966|    }
// 967|    StmtLet(pat~, expr = $5, loc = mk_loc($sloc))
// 968|  }

///|
fn yy_action_332(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_19(_args[1].2, _args[2:2])
  guard _sub_action_0_result is YYObj_Type_(_dollar3)
  guard _args[1].0 is YYObj_Pattern(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[3].0 is YYObj_Expr(_dollar5)
  YYObj_Statement(
    {
      ()
      let pat = match _dollar3 {
        None => _dollar2
        Some(ty) =>
          Pattern::Constraint(
            pat=_dollar2,
            ty~,
            loc=mk_loc((_symbol_start_pos, _end_pos)),
          )
      }
      StmtLet(pat~, expr=_dollar5, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 962|    "let" pattern opt_annot "=" expr { 
// 963|    let pat = match $3 {
// 964|      None => $2
// 965|      Some(ty) => Pattern::Constraint(pat = $2, ty~, loc = mk_loc($sloc))
// 966|    }
// 967|    StmtLet(pat~, expr = $5, loc = mk_loc($sloc))
// 968|  }

///|
fn yy_action_333(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_17(_args[1].2, _args[2:4])
  guard _sub_action_0_result is YYObj_Type_(_dollar3)
  guard _args[1].0 is YYObj_Pattern(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[5].0 is YYObj_Expr(_dollar5)
  YYObj_Statement(
    {
      ()
      let pat = match _dollar3 {
        None => _dollar2
        Some(ty) =>
          Pattern::Constraint(
            pat=_dollar2,
            ty~,
            loc=mk_loc((_symbol_start_pos, _end_pos)),
          )
      }
      StmtLet(pat~, expr=_dollar5, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 973|    "let" "mut" binder opt_annot "=" expr { 
// 974|    StmtLetmut(binder = $3, ty_opt = $4, expr = $6, loc = mk_loc($sloc))
// 975|  }

///|
fn yy_action_334(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[1].2, _args[2:3])
  let _sub_action_1_result = yy_action_19(_args[2].2, _args[3:3])
  guard _sub_action_0_result is YYObj_Binder(_dollar3)
  guard _sub_action_1_result is YYObj_Type_(_dollar4)
  guard _args[4].0 is YYObj_Expr(_dollar6)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      StmtLetmut(
        binder=_dollar3,
        ty_opt=_dollar4,
        expr=_dollar6,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 973|    "let" "mut" binder opt_annot "=" expr { 
// 974|    StmtLetmut(binder = $3, ty_opt = $4, expr = $6, loc = mk_loc($sloc))
// 975|  }

///|
fn yy_action_335(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[1].2, _args[2:3])
  let _sub_action_1_result = yy_action_17(_args[2].2, _args[3:5])
  guard _sub_action_0_result is YYObj_Binder(_dollar3)
  guard _sub_action_1_result is YYObj_Type_(_dollar4)
  guard _args[6].0 is YYObj_Expr(_dollar6)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      StmtLetmut(
        binder=_dollar3,
        ty_opt=_dollar4,
        expr=_dollar6,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 969|    "letrec" binder opt_annot "=" letand_func list(and_func) {
// 970|    let bindings = $6.add(($2, $3, $5))
// 971|    StmtLetand(bindings~, loc = mk_loc($sloc))
// 972|  }

///|
fn yy_action_336(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  let _sub_action_1_result = yy_action_19(_args[1].2, _args[2:2])
  guard _args[4].0 is YYObj__list_List__Binder__Type___Func__(_dollar6)
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  guard _sub_action_1_result is YYObj_Type_(_dollar3)
  guard _args[3].0 is YYObj_Func(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      let bindings = _dollar6.add((_dollar2, _dollar3, _dollar5))
      StmtLetand(bindings~, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 969|    "letrec" binder opt_annot "=" letand_func list(and_func) {
// 970|    let bindings = $6.add(($2, $3, $5))
// 971|    StmtLetand(bindings~, loc = mk_loc($sloc))
// 972|  }

///|
fn yy_action_337(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  let _sub_action_1_result = yy_action_17(_args[1].2, _args[2:4])
  guard _args[6].0 is YYObj__list_List__Binder__Type___Func__(_dollar6)
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  guard _sub_action_1_result is YYObj_Type_(_dollar3)
  guard _args[5].0 is YYObj_Func(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      let bindings = _dollar6.add((_dollar2, _dollar3, _dollar5))
      StmtLetand(bindings~, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 958|    "and" binder opt_annot "=" letand_func { ($2, $3, $5) }

///|
fn yy_action_338(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  let _sub_action_1_result = yy_action_19(_args[1].2, _args[2:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  guard _sub_action_1_result is YYObj_Type_(_dollar3)
  guard _args[3].0 is YYObj_Func(_dollar5)
  YYObj__Binder__Type___Func_(
    {
      ()
      (_dollar2, _dollar3, _dollar5)
    },
  )
}

// file:///./parser.mbty
// 953|    arrow_fn_expr { $1 }

///|
fn yy_action_339(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Func(_dollar1)
  YYObj_Func(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 954|    anony_fn { $1 }

///|
fn yy_action_340(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Func(_dollar1)
  YYObj_Func(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 958|    "and" binder opt_annot "=" letand_func { ($2, $3, $5) }

///|
fn yy_action_341(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  let _sub_action_1_result = yy_action_17(_args[1].2, _args[2:4])
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  guard _sub_action_1_result is YYObj_Type_(_dollar3)
  guard _args[5].0 is YYObj_Func(_dollar5)
  YYObj__Binder__Type___Func_(
    {
      ()
      (_dollar2, _dollar3, _dollar5)
    },
  )
}

// file:///./stdlib.mbty
// 45|    X list(X) { $2.add($1) }

///|
fn yy_action_342(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__list_List__Binder__Type___Func__(_dollar2)
  guard _args[0].0 is YYObj__Binder__Type___Func_(_dollar1)
  YYObj__list_List__Binder__Type___Func__(
    {
      ()
      _dollar2.add(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 44|    { @list.empty() }

///|
fn yy_action_343(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj__list_List__Binder__Type___Func__(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 945|    "fn" binder optional_bang "{" { ($2, $3) }

///|
fn yy_action_344(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  guard _args[2].0 is YYObj_Location_(_dollar3)
  YYObj__Binder__Location__(
    {
      ()
      (_dollar2, _dollar3)
    },
  )
}

// file:///./parser.mbty
// 976|    is_async "fn" binder optional_bang parameters func_return_type block_expr { 
// 977|    let (return_type, error_type) = $6
// 978|    let func = Func::Lambda(
// 979|      parameters = $5,
// 980|      params_loc = mk_loc($loc($5)),
// 981|      body = $7,
// 982|      return_type~,
// 983|      error_type~,
// 984|      kind = Lambda,
// 985|      has_error = $4,
// 986|      is_async = $1,
// 987|      loc = mk_loc($sloc)
// 988|    )
// 989|    StmtFunc(binder = $3, func~, loc = mk_loc($sloc))
// 990|  }

///|
fn yy_action_345(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_16(_args[1].2, _args[2:3])
  guard _args[5].0 is YYObj__Type___ErrorType_(_dollar6)
  guard _args[4].0 is YYObj_List_Parameter_(_dollar5)
  let _start_pos_of_item4 = _args[4].1
  let _end_pos_of_item4 = _args[4].2
  guard _args[6].0 is YYObj_Expr(_dollar7)
  guard _args[3].0 is YYObj_Location_(_dollar4)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_1_result is YYObj_Binder(_dollar3)
  YYObj_Statement(
    {
      ()
      let (return_type, error_type) = _dollar6
      let func = Func::Lambda(
        parameters=_dollar5,
        params_loc=mk_loc((_start_pos_of_item4, _end_pos_of_item4)),
        body=_dollar7,
        return_type~,
        error_type~,
        kind=Lambda,
        has_error=_dollar4,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
      StmtFunc(
        binder=_dollar3,
        func~,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
//  991|    is_async fn_header list_semis(multi_pattern_case) "}" { 
//  992|    let (binder, has_error) = $2
//  993|    let func = Func::Match(
//  994|      cases = $3,
//  995|      has_error~,
//  996|      is_async = $1,
//  997|      fn_loc = mk_loc($loc($2)),
//  998|      loc = mk_loc($sloc)
//  999|    )
// 1000|    StmtFunc(binder~, func~, loc = mk_loc($sloc))
// 1001|  }

///|
fn yy_action_346(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  guard _args[1].0 is YYObj__Binder__Location__(_dollar2)
  guard _args[2].0 is YYObj_List_MultiArgCase_(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      let (binder, has_error) = _dollar2
      let func = Func::Match(
        cases=_dollar3,
        has_error~,
        is_async=_dollar1,
        fn_loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
      StmtFunc(binder~, func~, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
//  991|    is_async fn_header list_semis(multi_pattern_case) "}" { 
//  992|    let (binder, has_error) = $2
//  993|    let func = Func::Match(
//  994|      cases = $3,
//  995|      has_error~,
//  996|      is_async = $1,
//  997|      fn_loc = mk_loc($loc($2)),
//  998|      loc = mk_loc($sloc)
//  999|    )
// 1000|    StmtFunc(binder~, func~, loc = mk_loc($sloc))
// 1001|  }

///|
fn yy_action_347(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  guard _args[0].0 is YYObj__Binder__Location__(_dollar2)
  guard _args[1].0 is YYObj_List_MultiArgCase_(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _start_pos_of_item1 = _args[0].1
  let _end_pos_of_item1 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      let (binder, has_error) = _dollar2
      let func = Func::Match(
        cases=_dollar3,
        has_error~,
        is_async=_dollar1,
        fn_loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
      StmtFunc(binder~, func~, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1002|    guard_statement { $1 }

///|
fn yy_action_348(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Statement(_dollar1)
  YYObj_Statement(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1003|    "defer" pipe_expr { StmtDefer(expr = $2, loc = mk_loc($sloc)) }

///|
fn yy_action_349(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      StmtDefer(expr=_dollar2, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1004|    expr_statement { StmtExpr($1) }

///|
fn yy_action_350(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Statement(
    {
      ()
      StmtExpr(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1009|    "guard" infix_expr "else" block_expr { StmtGuard(cond = $2, otherwise = Some($4), loc = mk_loc($sloc)) }

///|
fn yy_action_351(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  guard _args[3].0 is YYObj_Expr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      StmtGuard(
        cond=_dollar2,
        otherwise=Some(_dollar4),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1008|    "guard" infix_expr { StmtGuard(cond = $2, otherwise = None, loc = mk_loc($sloc)) }

///|
fn yy_action_352(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Statement(
    {
      ()
      StmtGuard(
        cond=_dollar2,
        otherwise=None,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1474|    type_name COLONCOLON "{" list_commas_with_trailing_info(record_defn_single) "}" { 
// 1475|    let (fs, trailing) = $4  
// 1476|    let trailing_mark = if trailing { TrailingMark::Comma } else { TrailingMark::None }
// 1477|    @syntax.make_record_expr(loc = mk_loc($sloc), trailing = trailing_mark, Some($1), fs)
// 1478|  }

///|
fn yy_action_353(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[3].0 is YYObj__List_FieldDef___Bool_(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_TypeName(_dollar1)
  YYObj_Expr(
    {
      ()
      let (fs, trailing) = _dollar4
      let trailing_mark = if trailing {
        TrailingMark::Comma
      } else {
        TrailingMark::None
      }
      @syntax.make_record_expr(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        trailing=trailing_mark,
        Some(_dollar1),
        fs,
      )
    },
  )
}

// file:///./parser.mbty
// 1479|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "}" { 
// 1480|    RecordUpdate(type_name = $1, record = $4, fields = @list.empty(), loc = mk_loc($sloc))
// 1481|  }

///|
fn yy_action_354(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_355(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_Option_TypeName_(_dollar1)
  guard _args[4].0 is YYObj_Expr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      RecordUpdate(
        type_name=_dollar1,
        record=_dollar4,
        fields=@list.empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1482|    ioption(terminated(type_name, COLONCOLON)) "{" ".." expr "," list_commas(record_defn_single) "}" { 
// 1483|    RecordUpdate(type_name = $1, record = $4, fields = $6, loc = mk_loc($sloc))
// 1484|  }

///|
fn yy_action_356(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_355(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_Option_TypeName_(_dollar1)
  guard _args[4].0 is YYObj_Expr(_dollar4)
  guard _args[6].0 is YYObj_List_FieldDef_(_dollar6)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      RecordUpdate(
        type_name=_dollar1,
        record=_dollar4,
        fields=_dollar6,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }

///|
fn yy_action_355(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_357(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_TypeName(_dollar1)
  YYObj_Option_TypeName_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 36|    X R { $1 }

///|
fn yy_action_357(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_TypeName(_dollar1)
  YYObj_TypeName(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 170|    non_empty_list_commas(X) { $1 }

///|
fn yy_action_358(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldDef_(_dollar1)
  YYObj_List_FieldDef_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_359(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldDef_(_dollar1)
  YYObj_List_FieldDef_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 169|    { @list.empty() }

///|
fn yy_action_360(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_FieldDef_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 186|    non_empty_list_commas_with_trailing_info(X) { $1 }

///|
fn yy_action_361(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj__List_FieldDef___Bool_(_dollar1)
  YYObj__List_FieldDef___Bool_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1538|    simple_expr ".." LIDENT apply_attr "(" list_commas(argument) ")" { 
// 1539|    let method_name = Label::{ name: $3, loc: mk_loc($loc($3)) }
// 1540|    DotApply(
// 1541|      self = $1,
// 1542|      method_name~,
// 1543|      args = $6,
// 1544|      return_self = true,
// 1545|      attr = $4,
// 1546|      loc = mk_loc($sloc)
// 1547|    )
// 1548|  }

///|
fn yy_action_362(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_363(_args[2].2, _args[3:3])
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[4].0 is YYObj_List_Argument_(_dollar6)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let method_name = Label::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      DotApply(
        self=_dollar1,
        method_name~,
        args=_dollar6,
        return_self=true,
        attr=_dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1538|    simple_expr ".." LIDENT apply_attr "(" list_commas(argument) ")" { 
// 1539|    let method_name = Label::{ name: $3, loc: mk_loc($loc($3)) }
// 1540|    DotApply(
// 1541|      self = $1,
// 1542|      method_name~,
// 1543|      args = $6,
// 1544|      return_self = true,
// 1545|      attr = $4,
// 1546|      loc = mk_loc($sloc)
// 1547|    )
// 1548|  }

///|
fn yy_action_364(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_365(_args[2].2, _args[3:4])
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[5].0 is YYObj_List_Argument_(_dollar6)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let method_name = Label::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      DotApply(
        self=_dollar1,
        method_name~,
        args=_dollar6,
        return_self=true,
        attr=_dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1538|    simple_expr ".." LIDENT apply_attr "(" list_commas(argument) ")" { 
// 1539|    let method_name = Label::{ name: $3, loc: mk_loc($loc($3)) }
// 1540|    DotApply(
// 1541|      self = $1,
// 1542|      method_name~,
// 1543|      args = $6,
// 1544|      return_self = true,
// 1545|      attr = $4,
// 1546|      loc = mk_loc($sloc)
// 1547|    )
// 1548|  }

///|
fn yy_action_366(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_367(_args[2].2, _args[3:4])
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[5].0 is YYObj_List_Argument_(_dollar6)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let method_name = Label::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      DotApply(
        self=_dollar1,
        method_name~,
        args=_dollar6,
        return_self=true,
        attr=_dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1359|    "!" prefix_expr { make_unot(loc = mk_loc($sloc), $2) }

///|
fn yy_action_368(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[1].0 is YYObj_Expr(_dollar2)
  YYObj_Expr(
    {
      ()
      make_unot(loc=mk_loc((_symbol_start_pos, _end_pos)), _dollar2)
    },
  )
}

// file:///./parser.mbty
// 940|    "!" { Some(mk_loc($sloc)) }

///|
fn yy_action_369(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Location_(
    {
      ()
      Some(mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 251|    delimited("(", list_commas(parameter), ")") { $1 }

///|
fn yy_action_370(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_371(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_List_Parameter_(_dollar1)
  YYObj_List_Parameter_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }

///|
fn yy_action_371(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_Parameter_(_dollar2)
  YYObj_List_Parameter_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 170|    non_empty_list_commas(X) { $1 }

///|
fn yy_action_372(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Parameter_(_dollar1)
  YYObj_List_Parameter_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 230|    "_" opt_annot { DiscardPositional(ty = $2, loc = mk_loc($loc($1))) }

///|
fn yy_action_373(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_17(_args[0].2, _args[1:3])
  guard _sub_action_0_result is YYObj_Type_(_dollar2)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_Parameter(
    {
      ()
      DiscardPositional(
        ty=_dollar2,
        loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      )
    },
  )
}

// file:///./parser.mbty
// 230|    "_" opt_annot { DiscardPositional(ty = $2, loc = mk_loc($loc($1))) }

///|
fn yy_action_374(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_19(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_Type_(_dollar2)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_Parameter(
    {
      ()
      DiscardPositional(
        ty=_dollar2,
        loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      )
    },
  )
}

// file:///./parser.mbty
// 231|    binder opt_annot { Positional(binder = $1, ty = $2) }

///|
fn yy_action_375(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_17(_args[0].2, _args[1:3])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _sub_action_1_result is YYObj_Type_(_dollar2)
  YYObj_Parameter(
    {
      ()
      Positional(binder=_dollar1, ty=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 240|    LIDENT "?" opt_annot "=" expr {
// 241|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 242|      Optional(binder~, ty = $3, default = $5)
// 243|    }

///|
fn yy_action_376(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_19(_args[1].2, _args[2:2])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar3)
  guard _args[3].0 is YYObj_Expr(_dollar5)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      Optional(binder~, ty=_dollar3, default=_dollar5)
    },
  )
}

// file:///./parser.mbty
// 240|    LIDENT "?" opt_annot "=" expr {
// 241|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 242|      Optional(binder~, ty = $3, default = $5)
// 243|    }

///|
fn yy_action_377(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_17(_args[1].2, _args[2:4])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar3)
  guard _args[5].0 is YYObj_Expr(_dollar5)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      Optional(binder~, ty=_dollar3, default=_dollar5)
    },
  )
}

// file:///./parser.mbty
// 244|    LIDENT "?" opt_annot {
// 245|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 246|      QuestionOptional(binder~, ty = $3)
// 247|    }

///|
fn yy_action_378(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_17(_args[1].2, _args[2:4])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar3)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      QuestionOptional(binder~, ty=_dollar3)
    },
  )
}

// file:///./parser.mbty
// 244|    LIDENT "?" opt_annot {
// 245|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)) }
// 246|      QuestionOptional(binder~, ty = $3)
// 247|    }

///|
fn yy_action_379(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_19(_args[1].2, _args[2:2])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar3)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      QuestionOptional(binder~, ty=_dollar3)
    },
  )
}

// file:///./parser.mbty
// 231|    binder opt_annot { Positional(binder = $1, ty = $2) }

///|
fn yy_action_380(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_19(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _sub_action_1_result is YYObj_Type_(_dollar2)
  YYObj_Parameter(
    {
      ()
      Positional(binder=_dollar1, ty=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 236|    POST_LABEL opt_annot "=" expr {
// 237|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)).trim_last_char() }
// 238|      Optional(binder~, ty = $2, default = $4)
// 239|    }

///|
fn yy_action_381(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_17(_args[0].2, _args[1:3])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar2)
  guard _args[4].0 is YYObj_Expr(_dollar4)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)).trim_last_char(),
      }
      Optional(binder~, ty=_dollar2, default=_dollar4)
    },
  )
}

// file:///./parser.mbty
// 232|    POST_LABEL opt_annot {
// 233|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)).trim_last_char() }
// 234|      Labelled(binder~, ty = $2)
// 235|    }

///|
fn yy_action_382(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_17(_args[0].2, _args[1:3])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar2)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)).trim_last_char(),
      }
      Labelled(binder~, ty=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 226|    ioption(annot) { $1 }

///|
fn yy_action_17(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_383(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_Option_Type_(_dollar1)
  YYObj_Type_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }

///|
fn yy_action_383(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_384(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_Type(_dollar1)
  YYObj_Option_Type_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 236|    POST_LABEL opt_annot "=" expr {
// 237|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)).trim_last_char() }
// 238|      Optional(binder~, ty = $2, default = $4)
// 239|    }

///|
fn yy_action_385(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_19(_args[0].2, _args[1:1])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar2)
  guard _args[2].0 is YYObj_Expr(_dollar4)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)).trim_last_char(),
      }
      Optional(binder~, ty=_dollar2, default=_dollar4)
    },
  )
}

// file:///./parser.mbty
// 1337|    prefix_expr "..<" prefix_expr { 
// 1338|    Infix(
// 1339|      op = Var::{ name: Ident(name = "..<"), loc: mk_loc($loc($2)) }, 
// 1340|      lhs = $1, 
// 1341|      rhs = $3, 
// 1342|      loc = mk_loc($sloc)
// 1343|    )
// 1344|  }

///|
fn yy_action_386(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=Var::{
          name: Ident(name="..<"),
          loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        },
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1289|    "_" "=>" expr_statement_no_break_continue_return { 
// 1290|    make_arrow_fn(@list.singleton((Unnamed(mk_loc($loc($1))), None)), $3, loc = mk_loc($sloc))
// 1291|  }

///|
fn yy_action_387(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      make_arrow_fn(
        @list.singleton(
          (Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))), None),
        ),
        _dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1527|    simple_expr DOT_LIDENT apply_attr "(" list_commas(argument) ")" { 
// 1528|    let method_name = Label::{ name: $2, loc: mk_loc($loc($2)) }
// 1529|    DotApply(
// 1530|      self = $1,
// 1531|      method_name~,
// 1532|      args = $5,
// 1533|      return_self = false,
// 1534|      attr = $3,
// 1535|      loc = mk_loc($sloc)
// 1536|    )
// 1537|  }

///|
fn yy_action_388(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_363(_args[1].2, _args[2:2])
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[3].0 is YYObj_List_Argument_(_dollar5)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let method_name = Label::{
        name: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      }
      DotApply(
        self=_dollar1,
        method_name~,
        args=_dollar5,
        return_self=false,
        attr=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1527|    simple_expr DOT_LIDENT apply_attr "(" list_commas(argument) ")" { 
// 1528|    let method_name = Label::{ name: $2, loc: mk_loc($loc($2)) }
// 1529|    DotApply(
// 1530|      self = $1,
// 1531|      method_name~,
// 1532|      args = $5,
// 1533|      return_self = false,
// 1534|      attr = $3,
// 1535|      loc = mk_loc($sloc)
// 1536|    )
// 1537|  }

///|
fn yy_action_389(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_365(_args[1].2, _args[2:3])
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[4].0 is YYObj_List_Argument_(_dollar5)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let method_name = Label::{
        name: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      }
      DotApply(
        self=_dollar1,
        method_name~,
        args=_dollar5,
        return_self=false,
        attr=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1527|    simple_expr DOT_LIDENT apply_attr "(" list_commas(argument) ")" { 
// 1528|    let method_name = Label::{ name: $2, loc: mk_loc($loc($2)) }
// 1529|    DotApply(
// 1530|      self = $1,
// 1531|      method_name~,
// 1532|      args = $5,
// 1533|      return_self = false,
// 1534|      attr = $3,
// 1535|      loc = mk_loc($sloc)
// 1536|    )
// 1537|  }

///|
fn yy_action_390(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_367(_args[1].2, _args[2:3])
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[4].0 is YYObj_List_Argument_(_dollar5)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let method_name = Label::{
        name: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      }
      DotApply(
        self=_dollar1,
        method_name~,
        args=_dollar5,
        return_self=false,
        attr=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1373|    simple_expr accessor { Field($1, $2) }

///|
fn yy_action_391(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_392(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _sub_action_0_result is YYObj_Accessor(_dollar2)
  YYObj_LeftValue(
    {
      ()
      Field(_dollar1, _dollar2)
    },
  )
}

// file:///./parser.mbty
// 1549|    simple_expr accessor %prec prec_field { 
// 1550|    Field(record = $1, accessor = $2, loc = mk_loc($sloc))
// 1551|  }

///|
fn yy_action_393(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_392(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _sub_action_0_result is YYObj_Accessor(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Field(
        record=_dollar1,
        accessor=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1565|    DOT_LIDENT { 
// 1566|    if $1 == "_" {
// 1567|      Newtype(loc = mk_loc($loc($1)))
// 1568|    } else {
// 1569|      Label(Label::{ name: $1, loc: mk_loc($sloc) })
// 1570|    }
// 1571|  }

///|
fn yy_action_392(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Accessor(
    {
      ()
      if _dollar1 == "_" {
        Newtype(loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)))
      } else {
        Label(Label::{
          name: _dollar1,
          loc: mk_loc((_symbol_start_pos, _end_pos)),
        })
      }
    },
  )
}

// file:///./parser.mbty
// 1373|    simple_expr accessor { Field($1, $2) }

///|
fn yy_action_394(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_395(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _sub_action_0_result is YYObj_Accessor(_dollar2)
  YYObj_LeftValue(
    {
      ()
      Field(_dollar1, _dollar2)
    },
  )
}

// file:///./parser.mbty
// 1374|    simple_expr "[" expr "]" { Array($1, $3) }

///|
fn yy_action_396(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  YYObj_LeftValue(
    {
      ()
      Array(_dollar1, _dollar3)
    },
  )
}

// file:///./parser.mbty
// 1515|    simple_expr "[" expr "]" { 
// 1516|    ArrayGet(array = $1, index = $3, loc = mk_loc($sloc))
// 1517|  }

///|
fn yy_action_397(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      ArrayGet(
        array=_dollar1,
        index=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1518|    simple_expr "[" option(expr) ":" option(expr) "]" { 
// 1519|    ArrayGetSlice(
// 1520|      array = $1,
// 1521|      start_index = $3,
// 1522|      end_index = $5,
// 1523|      index_loc = mk_loc(($loc($2).0, $loc($6).1)),
// 1524|      loc = mk_loc($sloc)
// 1525|    )
// 1526|  }

///|
fn yy_action_398(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Option_Expr_(_dollar3)
  guard _args[4].0 is YYObj_Option_Expr_(_dollar5)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  let _start_pos_of_item5 = _args[5].1
  let _end_pos_of_item5 = _args[5].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      ArrayGetSlice(
        array=_dollar1,
        start_index=_dollar3,
        end_index=_dollar5,
        index_loc=mk_loc(
          (
            (_start_pos_of_item1, _end_pos_of_item1).0,
            (_start_pos_of_item5, _end_pos_of_item5).1,
          ),
        ),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1512|    simple_expr apply_attr "(" list_commas(argument) ")" { 
// 1513|    Apply(func = $1, args = $4, attr = $2, loc = mk_loc($sloc))
// 1514|  }

///|
fn yy_action_399(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_363(_args[0].2, _args[1:1])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_List_Argument_(_dollar4)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Apply(
        func=_dollar1,
        args=_dollar4,
        attr=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1402|     { NoAttr }

///|
fn yy_action_363(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_ApplyAttr(
    {
      ()
      NoAttr
    },
  )
}

// file:///./parser.mbty
// 1512|    simple_expr apply_attr "(" list_commas(argument) ")" { 
// 1513|    Apply(func = $1, args = $4, attr = $2, loc = mk_loc($sloc))
// 1514|  }

///|
fn yy_action_400(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_365(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[3].0 is YYObj_List_Argument_(_dollar4)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Apply(
        func=_dollar1,
        args=_dollar4,
        attr=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1403|    "!" { Exclamation }

///|
fn yy_action_365(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_ApplyAttr(
    {
      ()
      Exclamation
    },
  )
}

// file:///./parser.mbty
// 1686|    LIDENT "?" { 
// 1687|    let loc = mk_loc($loc($1))
// 1688|    let label = Label::{ name: $1, loc }
// 1689|    let arg_value = @syntax.make_ident_expr(loc~, Var::{ name: Ident(name = $1), loc })
// 1690|    Argument::{ value: arg_value, kind: LabelledOptionPun(label~, question_loc = mk_loc($loc($2))) }
// 1691|  }

///|
fn yy_action_401(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  YYObj_Argument(
    {
      ()
      let loc = mk_loc((_start_pos_of_item0, _end_pos_of_item0))
      let label = Label::{ name: _dollar1, loc }
      let arg_value = @syntax.make_ident_expr(loc~, Var::{
        name: Ident(name=_dollar1),
        loc,
      })
      Argument::{
        value: arg_value,
        kind: LabelledOptionPun(
          label~,
          question_loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        ),
      }
    },
  )
}

// file:///./parser.mbty
// 1663|    "?" { Some(mk_loc($sloc)) }

///|
fn yy_action_402(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Location_(
    {
      ()
      Some(mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1668|    label optional_question "=" expr { 
// 1669|    let arg_kind : ArgumentKind = match $2 {
// 1670|      Some(question_loc) => LabelledOption(label = $1, question_loc~)
// 1671|      None => Labelled($1)
// 1672|    }
// 1673|    Argument::{ value: $4, kind: arg_kind }
// 1674|  }

///|
fn yy_action_403(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_404(_last_pos, _args[0:1])
  guard _args[1].0 is YYObj_Location_(_dollar2)
  guard _sub_action_0_result is YYObj_Label(_dollar1)
  guard _args[3].0 is YYObj_Expr(_dollar4)
  YYObj_Argument(
    {
      ()
      let arg_kind : ArgumentKind = match _dollar2 {
        Some(question_loc) => LabelledOption(label=_dollar1, question_loc~)
        None => Labelled(_dollar1)
      }
      Argument::{ value: _dollar4, kind: arg_kind }
    },
  )
}

// file:///./parser.mbty
// 1664|     { None }

///|
fn yy_action_405(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Location_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1681|    POST_LABEL "=" expr {
// 1682|    let label = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 1683|    let arg_value = $3
// 1684|    Argument::{ value: arg_value, kind: Labelled(label) }
// 1685|  }

///|
fn yy_action_406(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_Expr(_dollar3)
  YYObj_Argument(
    {
      ()
      let label = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      let arg_value = _dollar3
      Argument::{ value: arg_value, kind: Labelled(label) }
    },
  )
}

// file:///./parser.mbty
// 1676|    POST_LABEL { 
// 1677|    let label = Label::{ name: $1, loc: mk_loc($loc($1)) }
// 1678|    let arg_value = @syntax.make_ident_expr(loc = mk_loc($loc($1)), Var::{ name: Ident(name = $1), loc: mk_loc($loc($1)) })
// 1679|    Argument::{ value: arg_value, kind: LabelledPun(label) }
// 1680|  }

///|
fn yy_action_407(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_Argument(
    {
      ()
      let label = Label::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
      }
      let arg_value = @syntax.make_ident_expr(
        loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        Var::{
          name: Ident(name=_dollar1),
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
      )
      Argument::{ value: arg_value, kind: LabelledPun(label) }
    },
  )
}

// file:///./parser.mbty
// 1437|    "(" binder ":" type_ ")" { Constraint(expr = @syntax.binder_to_expr($2), ty = $4, loc = mk_loc($sloc)) }

///|
fn yy_action_408(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  guard _args[3].0 is YYObj_Type(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Constraint(
        expr=@syntax.binder_to_expr(_dollar2),
        ty=_dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1280|    "(" arrow_fn_prefix "=>" expr_statement_no_break_continue_return { 
// 1281|    make_arrow_fn($2, $4, loc = mk_loc($sloc))
// 1282|  }

///|
fn yy_action_409(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List__ArrowFnParam__Type___(_dollar2)
  guard _args[3].0 is YYObj_Expr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      make_arrow_fn(
        _dollar2,
        _dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1283|    "(" ")" "=>" expr_statement_no_break_continue_return { 
// 1284|    make_arrow_fn(@list.empty(), $4, loc = mk_loc($sloc))
// 1285|  }

///|
fn yy_action_410(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[3].0 is YYObj_Expr(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      make_arrow_fn(
        @list.empty(),
        _dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1306|    binder ioption(",") ")" { @list.singleton(Named($1)) }

///|
fn yy_action_411(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_412(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_List_ArrowFnParam_(
    {
      ()
      @list.singleton(Named(_dollar1))
    },
  )
}

// file:///./parser.mbty
// 1306|    binder ioption(",") ")" { @list.singleton(Named($1)) }

///|
fn yy_action_413(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_414(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_List_ArrowFnParam_(
    {
      ()
      @list.singleton(Named(_dollar1))
    },
  )
}

// file:///./parser.mbty
// 1308|    binder "," arrow_fn_prefix_no_constraint { $3.add(Named($1)) }

///|
fn yy_action_415(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj_List_ArrowFnParam_(_dollar3)
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_List_ArrowFnParam_(
    {
      ()
      _dollar3.add(Named(_dollar1))
    },
  )
}

// file:///./parser.mbty
// 1413|    binder "," non_empty_tuple_elems_with_prefix { $3.add(@syntax.binder_to_expr($1)) }

///|
fn yy_action_416(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj_List_Expr_(_dollar3)
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      _dollar3.add(@syntax.binder_to_expr(_dollar1))
    },
  )
}

// file:///./parser.mbty
// 1262|    pipe_expr catch_keyword single_pattern_cases "}" { 
// 1263|    let (catch_all, catch_loc) = $2
// 1264|    Try(
// 1265|      body = $1,
// 1266|      catch_ = $3,
// 1267|      catch_all~,
// 1268|      try_else = None,
// 1269|      has_try = false,
// 1270|      try_loc = mk_loc($loc($1)),
// 1271|      catch_loc~,
// 1272|      else_loc = Location::{ start: Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 }, end: Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 } },
// 1273|      loc = mk_loc($sloc)
// 1274|    )
// 1275|  }

///|
fn yy_action_417(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__Bool__Location_(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_List_Case_(_dollar3)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let (catch_all, catch_loc) = _dollar2
      Try(
        body=_dollar1,
        catch_=_dollar3,
        catch_all~,
        try_else=None,
        has_try=false,
        try_loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        catch_loc~,
        else_loc=Location::{
          start: Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 },
          end: Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 },
        },
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 203|    X option(SEMI) { @list.singleton($1) }

///|
fn yy_action_418(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Case(_dollar1)
  YYObj_List_Case_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1043|    "break" POST_LABEL option(expr) { 
// 1044|    let label = Label::{ name: $2, loc: mk_loc($loc($2)) }
// 1045|    Break(arg = $3, label = Some(label), loc = mk_loc($sloc))
// 1046|  }

///|
fn yy_action_419(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[2].0 is YYObj_Option_Expr_(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let label = Label::{
        name: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      }
      Break(
        arg=_dollar3,
        label=Some(label),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1047|    "break" option(expr) { Break(arg = $2, label = None, loc = mk_loc($sloc)) }

///|
fn yy_action_420(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Option_Expr_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Break(arg=_dollar2, label=None, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1048|    "continue" POST_LABEL list_commas_no_trailing(expr) { 
// 1049|    let label = Label::{ name: $2, loc: mk_loc($loc($2)) }
// 1050|    Continue(args = $3, label = Some(label), loc = mk_loc($sloc))
// 1051|  }

///|
fn yy_action_421(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[2].0 is YYObj_List_Expr_(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let label = Label::{
        name: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      }
      Continue(
        args=_dollar3,
        label=Some(label),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1052|    "continue" list_commas_no_trailing(expr) { Continue(args = $2, label = None, loc = mk_loc($sloc)) }

///|
fn yy_action_422(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_Expr_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Continue(
        args=_dollar2,
        label=None,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 175|    non_empty_list_commas_no_trailing(X) { $1 }

///|
fn yy_action_423(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Expr_(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_424(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Expr_(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  YYObj_List_Expr_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 157|    non_empty_list_commas_rev(X) { $1.rev() }

///|
fn yy_action_425(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Expr_(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_426(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 174|    { @list.empty() }

///|
fn yy_action_427(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Expr_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1053|    "return" option(expr) { Return(return_value = $2, loc = mk_loc($sloc)) }

///|
fn yy_action_428(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Option_Expr_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Return(return_value=_dollar2, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_429(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Option_Expr_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_430(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Expr_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1054|    expr_statement_no_break_continue_return { $1 }

///|
fn yy_action_431(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1063|    loop_label_colon "while" infix_expr block_expr optional_else { 
// 1064|    While(
// 1065|      loop_cond = $3,
// 1066|      loop_body = $4,
// 1067|      while_else = $5,
// 1068|      label = $1,
// 1069|      loc = mk_loc($sloc)
// 1070|    )
// 1071|  }

///|
fn yy_action_432(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_Expr(_dollar3)
  guard _args[3].0 is YYObj_Expr(_dollar4)
  guard _args[4].0 is YYObj_Expr_(_dollar5)
  guard _args[0].0 is YYObj_Label_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      While(
        loop_cond=_dollar3,
        loop_body=_dollar4,
        while_else=_dollar5,
        label=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1186|    loop_label_colon loop_header list_semis(single_pattern_case) "}" { 
// 1187|    Loop(
// 1188|      arg = $2,
// 1189|      body = $3,
// 1190|      label = $1,
// 1191|      loop_loc = mk_loc($loc($2)),
// 1192|      loc = mk_loc($sloc)
// 1193|    )
// 1194|  }

///|
fn yy_action_433(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_434(_args[0].2, _args[1:4])
  guard _sub_action_0_result is YYObj_Expr(_dollar2)
  guard _args[4].0 is YYObj_List_Case_(_dollar3)
  guard _args[0].0 is YYObj_Label_(_dollar1)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Loop(
        arg=_dollar2,
        body=_dollar3,
        label=_dollar1,
        loop_loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1182|    "loop" infix_expr "{" { $2 }

///|
fn yy_action_434(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  YYObj_Expr(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 1198|    list_commas_no_trailing(separated_pair(binder, "=", expr)) { $1 }

///|
fn yy_action_435(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List__Binder__Expr__(_dollar1)
  YYObj_List__Binder__Expr__(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1207|    loop_label_colon "for" for_binders SEMI option(infix_expr) SEMI list_commas_no_trailing(separated_pair(binder, "=", expr)) block_expr optional_else {
// 1208|    For(
// 1209|      binders = $3,
// 1210|      condition = $5,
// 1211|      continue_block = $7,
// 1212|      body = $8,
// 1213|      for_else = $9,
// 1214|      label = $1,
// 1215|      loc = mk_loc($sloc)
// 1216|    )
// 1217|  }

///|
fn yy_action_436(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List__Binder__Expr__(_dollar3)
  guard _args[4].0 is YYObj_Option_Expr_(_dollar5)
  guard _args[6].0 is YYObj_List__Binder__Expr__(_dollar7)
  guard _args[7].0 is YYObj_Expr(_dollar8)
  guard _args[8].0 is YYObj_Expr_(_dollar9)
  guard _args[0].0 is YYObj_Label_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      For(
        binders=_dollar3,
        condition=_dollar5,
        continue_block=_dollar7,
        body=_dollar8,
        for_else=_dollar9,
        label=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_437(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Option_Expr_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_438(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Expr_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1218|    loop_label_colon "for" for_binders block_expr optional_else {
// 1219|    For(
// 1220|      binders = $3,
// 1221|      condition = None,
// 1222|      continue_block = @list.empty(),
// 1223|      body = $4,
// 1224|      for_else = $5,
// 1225|      label = $1,
// 1226|      loc = mk_loc($sloc)
// 1227|    )
// 1228|  }

///|
fn yy_action_439(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List__Binder__Expr__(_dollar3)
  guard _args[3].0 is YYObj_Expr(_dollar4)
  guard _args[4].0 is YYObj_Expr_(_dollar5)
  guard _args[0].0 is YYObj_Label_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      For(
        binders=_dollar3,
        condition=None,
        continue_block=@list.empty(),
        body=_dollar4,
        for_else=_dollar5,
        label=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1202|    "else" block_expr { Some($2) }

///|
fn yy_action_440(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  YYObj_Expr_(
    {
      ()
      Some(_dollar2)
    },
  )
}

// file:///./parser.mbty
// 1232|    loop_label_colon "for" non_empty_list_commas(foreach_binder) "in" expr block_expr optional_else { 
// 1233|    ForEach(
// 1234|      binders = $3,
// 1235|      expr = $5,
// 1236|      body = $6,
// 1237|      else_block = $7,
// 1238|      label = $1,
// 1239|      loc = mk_loc($sloc)
// 1240|    )
// 1241|  }

///|
fn yy_action_441(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_Binder__(_dollar3)
  guard _args[4].0 is YYObj_Expr(_dollar5)
  guard _args[5].0 is YYObj_Expr(_dollar6)
  guard _args[6].0 is YYObj_Expr_(_dollar7)
  guard _args[0].0 is YYObj_Label_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      ForEach(
        binders=_dollar3,
        expr=_dollar5,
        body=_dollar6,
        else_block=_dollar7,
        label=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1203|     { None }

///|
fn yy_action_442(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Expr_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_443(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_444(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj__Binder__Expr_(_dollar1)
  YYObj_List__Binder__Expr__(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 175|    non_empty_list_commas_no_trailing(X) { $1 }

///|
fn yy_action_445(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List__Binder__Expr__(_dollar1)
  YYObj_List__Binder__Expr__(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_446(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Binder__(_dollar1)
  YYObj_List_Binder__(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 1245|    binder { Some($1)}

///|
fn yy_action_447(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_Binder_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1246|    "_" { None }

///|
fn yy_action_448(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Binder_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_449(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Binder__(_dollar1)
  guard _args[2].0 is YYObj_Binder_(_dollar3)
  YYObj_List_Binder__(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 913|    LIDENT { Ident(name = $1) }

///|
fn yy_action_450(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_LongIdent(
    {
      ()
      Ident(name=_dollar1)
    },
  )
}

// file:///./parser.mbty
// 914|    PACKAGE_NAME DOT_LIDENT { Dot(pkg = $1, id = $2) }

///|
fn yy_action_451(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_LongIdent(
    {
      ()
      Dot(pkg=_dollar1, id=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 1035|    "raise" expr { Raise(err_value = $2, loc = mk_loc($sloc)) }

///|
fn yy_action_452(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Raise(err_value=_dollar2, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1036|    "..." { Hole(loc = mk_loc($sloc), kind = Todo) }

///|
fn yy_action_453(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Hole(loc=mk_loc((_symbol_start_pos, _end_pos)), kind=Todo)
    },
  )
}

// file:///./parser.mbty
// 1037|    augmented_assignment_expr { $1 }

///|
fn yy_action_454(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_455(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1024|    left_value assignop expr { 
// 1025|    let loc = mk_loc($sloc)
// 1026|    match $1 {
// 1027|      Var(var_) => Assign(var_~, expr=$3, augmented_by=Some($2), loc~)
// 1028|      Field(record, accessor) => Mutate(record~, accessor~, field=$3, augmented_by=Some($2), loc~)
// 1029|      Array(array, index) => ArrayAugmentedSet(op=$2, array~, index~, value=$3, loc~)
// 1030|    }
// 1031|  }

///|
fn yy_action_455(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_456(_args[0].2, _args[1:2])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_LeftValue(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  YYObj_Expr(
    {
      ()
      let loc = mk_loc((_symbol_start_pos, _end_pos))
      match _dollar1 {
        Var(var_) =>
          Assign(var_~, expr=_dollar3, augmented_by=Some(_dollar2), loc~)
        Field(record, accessor) =>
          Mutate(
            record~,
            accessor~,
            field=_dollar3,
            augmented_by=Some(_dollar2),
            loc~,
          )
        Array(array, index) =>
          ArrayAugmentedSet(op=_dollar2, array~, index~, value=_dollar3, loc~)
      }
    },
  )
}

// file:///./parser.mbty
// 1645|    AUGMENTED_ASSIGNMENT { Var::{ name: Ident(name = $1), loc: mk_loc($sloc) } }

///|
fn yy_action_456(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{
        name: Ident(name=_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1038|    assignment_expr { $1 }

///|
fn yy_action_457(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_458(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1013|    left_value "=" expr { 
// 1014|    let loc = mk_loc($sloc)
// 1015|    match $1 {
// 1016|      Var(var_) => Assign(var_~, expr=$3, augmented_by=None, loc~)
// 1017|      Field(record, accessor) => Mutate(record~, accessor~, field=$3, augmented_by=None, loc~)
// 1018|      Array(array, index) => ArraySet(array~, index~, value=$3, loc~)
// 1019|    }
// 1020|  }

///|
fn yy_action_458(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_LeftValue(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  YYObj_Expr(
    {
      ()
      let loc = mk_loc((_symbol_start_pos, _end_pos))
      match _dollar1 {
        Var(var_) => Assign(var_~, expr=_dollar3, augmented_by=None, loc~)
        Field(record, accessor) =>
          Mutate(record~, accessor~, field=_dollar3, augmented_by=None, loc~)
        Array(array, index) => ArraySet(array~, index~, value=_dollar3, loc~)
      }
    },
  )
}

// file:///./parser.mbty
// 1039|    expr { $1 }

///|
fn yy_action_459(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1286|    binder "=>" expr_statement_no_break_continue_return { 
// 1287|    make_arrow_fn(@list.singleton((Named($1), None)), $3, loc = mk_loc($sloc))
// 1288|  }

///|
fn yy_action_460(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      make_arrow_fn(
        @list.singleton((Named(_dollar1), None)),
        _dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1058|    POST_LABEL ":" { Some(Label::{ name : $1, loc : mk_loc($sloc) }) }

///|
fn yy_action_461(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Label_(
    {
      ()
      Some(Label::{ name: _dollar1, loc: mk_loc((_symbol_start_pos, _end_pos)) })
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_462(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_444(_args[1].2, _args[2:5])
  guard _args[0].0 is YYObj_List__Binder__Expr__(_dollar1)
  guard _sub_action_0_result is YYObj__Binder__Expr_(_dollar3)
  YYObj_List__Binder__Expr__(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./stdlib.mbty
// 28|    X SEP Y { ($1, $3) }

///|
fn yy_action_444(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  YYObj__Binder__Expr_(
    {
      ()
      (_dollar1, _dollar3)
    },
  )
}

// file:///./parser.mbty
// 157|    non_empty_list_commas_rev(X) { $1.rev() }

///|
fn yy_action_463(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List__Binder__Expr__(_dollar1)
  YYObj_List__Binder__Expr__(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_464(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Binder_(_dollar1)
  YYObj_List_Binder__(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 174|    { @list.empty() }

///|
fn yy_action_465(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List__Binder__Expr__(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1075|    pattern option(preceded("if", infix_expr)) "=>" expr_statement { 
// 1076|    Case::{ pattern : $1, guard_ : $2, body : $4 }
// 1077|  }

///|
fn yy_action_466(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  guard _args[1].0 is YYObj_Option_Expr_(_dollar2)
  guard _args[3].0 is YYObj_Expr(_dollar4)
  YYObj_Case(
    {
      ()
      Case::{ pattern: _dollar1, guard_: _dollar2, body: _dollar4 }
    },
  )
}

// file:///./parser.mbty
// 1098|    "catch" "{" { (false, mk_loc($sloc)) }

///|
fn yy_action_467(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj__Bool__Location_(
    {
      ()
      (false, mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1099|    "catch" "!" "{" { (true, mk_loc($sloc)) }

///|
fn yy_action_468(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj__Bool__Location_(
    {
      ()
      (true, mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1088|    list_semis(single_pattern_case) { $1 }

///|
fn yy_action_469(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Case_(_dollar1)
  YYObj_List_Case_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1121|    "try" pipe_expr catch_keyword single_pattern_cases "}" else_keyword single_pattern_cases "}" { 
// 1122|    let (catch_all, catch_loc) = $3
// 1123|    let else_loc = $6
// 1124|    Try(
// 1125|      body = $2,
// 1126|      catch_ = $4,
// 1127|      catch_all~,
// 1128|      try_else = Some($7),
// 1129|      has_try = true,
// 1130|      try_loc = mk_loc($loc($1)),
// 1131|      catch_loc~,
// 1132|      else_loc~,
// 1133|      loc = mk_loc($sloc)
// 1134|    )
// 1135|  }

///|
fn yy_action_470(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_471(_args[4].2, _args[5:7])
  guard _args[2].0 is YYObj__Bool__Location_(_dollar3)
  guard _sub_action_0_result is YYObj_Location(_dollar6)
  guard _args[1].0 is YYObj_Expr(_dollar2)
  guard _args[3].0 is YYObj_List_Case_(_dollar4)
  guard _args[7].0 is YYObj_List_Case_(_dollar7)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let (catch_all, catch_loc) = _dollar3
      let else_loc = _dollar6
      Try(
        body=_dollar2,
        catch_=_dollar4,
        catch_all~,
        try_else=Some(_dollar7),
        has_try=true,
        try_loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        catch_loc~,
        else_loc~,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1103|    "noraise" "{" { mk_loc($sloc) }

///|
fn yy_action_471(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Location(
    {
      ()
      mk_loc((_symbol_start_pos, _end_pos))
    },
  )
}

// file:///./parser.mbty
// 1107|    "try" pipe_expr catch_keyword single_pattern_cases "}" { 
// 1108|    let (catch_all, catch_loc) = $3
// 1109|    Try(
// 1110|      body = $2,
// 1111|      catch_ = $4,
// 1112|      catch_all~,
// 1113|      try_else = None,
// 1114|      has_try = true,
// 1115|      try_loc = mk_loc($loc($1)),
// 1116|      catch_loc~,
// 1117|      else_loc = @basic.Location::{ start: @basic.Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 }, end: @basic.Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 } },
// 1118|      loc = mk_loc($sloc)
// 1119|    )
// 1120|  }

///|
fn yy_action_472(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj__Bool__Location_(_dollar3)
  guard _args[1].0 is YYObj_Expr(_dollar2)
  guard _args[3].0 is YYObj_List_Case_(_dollar4)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let (catch_all, catch_loc) = _dollar3
      Try(
        body=_dollar2,
        catch_=_dollar4,
        catch_all~,
        try_else=None,
        has_try=true,
        try_loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        catch_loc~,
        else_loc=@basic.Location::{
          start: @basic.Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 },
          end: @basic.Position::{ fname: "", lnum: 0, bol: 0, cnum: 0 },
        },
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 214|    non_empty_list_semis(X) { $1 }

///|
fn yy_action_473(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Case_(_dollar1)
  YYObj_List_Case_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1136|    "try?" pipe_expr { 
// 1137|    TryOperator(body = $2, kind = Question, try_loc = mk_loc($loc($1)), loc = mk_loc($sloc))
// 1138|  }

///|
fn yy_action_474(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      TryOperator(
        body=_dollar2,
        kind=Question,
        try_loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1139|    "try!" pipe_expr {
// 1140|    TryOperator(body = $2, kind = Exclamation, try_loc = mk_loc($loc($1)), loc = mk_loc($sloc))
// 1141|  }

///|
fn yy_action_475(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      TryOperator(
        body=_dollar2,
        kind=Exclamation,
        try_loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1145|    "if" infix_expr block_expr "else" block_expr { 
// 1146|    If(cond = $2, ifso = $3, ifnot = Some($5), loc = mk_loc($sloc))
// 1147|  }

///|
fn yy_action_476(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  guard _args[4].0 is YYObj_Expr(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      If(
        cond=_dollar2,
        ifso=_dollar3,
        ifnot=Some(_dollar5),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1148|    "if" infix_expr block_expr "else" if_expr { 
// 1149|    If(cond = $2, ifso = $3, ifnot = Some($5), loc = mk_loc($sloc))
// 1150|  }

///|
fn yy_action_477(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  guard _args[4].0 is YYObj_Expr(_dollar5)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      If(
        cond=_dollar2,
        ifso=_dollar3,
        ifnot=Some(_dollar5),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1151|    "if" infix_expr block_expr { 
// 1152|    If(cond = $2, ifso = $3, ifnot = None, loc = mk_loc($sloc))
// 1153|  }

///|
fn yy_action_478(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      If(
        cond=_dollar2,
        ifso=_dollar3,
        ifnot=None,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1157|    "match" infix_expr "{" { $2 }

///|
fn yy_action_479(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  YYObj_Expr(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 1161|    match_header non_empty_list_semis(single_pattern_case) "}" { 
// 1162|    let expr = $1
// 1163|    Match(
// 1164|      expr~,
// 1165|      cases = $2,
// 1166|      match_loc = mk_loc($loc($1)),
// 1167|      loc = mk_loc($sloc)
// 1168|    )
// 1169|  }

///|
fn yy_action_480(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[1].0 is YYObj_List_Case_(_dollar2)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let expr = _dollar1
      Match(
        expr~,
        cases=_dollar2,
        match_loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1170|    match_header "}" { 
// 1171|    let expr = $1
// 1172|    Match(
// 1173|      expr~,
// 1174|      cases = @list.empty(),
// 1175|      match_loc = mk_loc($loc($1)),
// 1176|      loc = mk_loc($sloc)
// 1177|    )
// 1178|  }

///|
fn yy_action_481(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let expr = _dollar1
      Match(
        expr~,
        cases=@list.empty(),
        match_loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1250|    loop_expr { $1 }

///|
fn yy_action_482(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1251|    for_expr { $1 }

///|
fn yy_action_483(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1252|    foreach_expr { $1 }

///|
fn yy_action_484(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1253|    while_expr { $1 }

///|
fn yy_action_485(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1254|    try_expr { $1 }

///|
fn yy_action_486(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1255|    if_expr { $1 }

///|
fn yy_action_487(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1256|    match_expr { $1 }

///|
fn yy_action_488(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1257|    simple_try_expr { $1 }

///|
fn yy_action_489(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1258|    arrow_fn_expr { Function(func = $1, loc = mk_loc($sloc)) }

///|
fn yy_action_490(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Func(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Function(func=_dollar1, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1078|    "..." { 
// 1079|    Case::{ 
// 1080|      pattern : Pattern::Any(loc = mk_loc($sloc)), 
// 1081|      guard_ : None, 
// 1082|      body : Hole(loc = mk_loc($sloc), kind = Todo) 
// 1083|    }
// 1084|  }

///|
fn yy_action_491(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Case(
    {
      ()
      Case::{
        pattern: Pattern::Any(loc=mk_loc((_symbol_start_pos, _end_pos))),
        guard_: None,
        body: Hole(loc=mk_loc((_symbol_start_pos, _end_pos)), kind=Todo),
      }
    },
  )
}

// file:///./parser.mbty
// 204|    X SEMI non_empty_list_semis(X) { $3.add($1) }

///|
fn yy_action_492(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_Case_(_dollar3)
  guard _args[0].0 is YYObj_Case(_dollar1)
  YYObj_List_Case_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 213|    { @list.empty() }

///|
fn yy_action_493(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Case_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1313|    pipe_expr "|>" infix_expr { 
// 1314|    Pipe(lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1315|  }

///|
fn yy_action_494(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Pipe(
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1276|    pipe_expr { $1 }

///|
fn yy_action_495(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1307|    "_" ioption(",") ")" { @list.singleton(Unnamed(mk_loc($loc($1)))) }

///|
fn yy_action_496(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_412(_args[0].2, _args[1:1])
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_List_ArrowFnParam_(
    {
      ()
      @list.singleton(Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))))
    },
  )
}

// file:///./parser.mbty
// 1307|    "_" ioption(",") ")" { @list.singleton(Unnamed(mk_loc($loc($1)))) }

///|
fn yy_action_497(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_414(_args[0].2, _args[1:2])
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_List_ArrowFnParam_(
    {
      ()
      @list.singleton(Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))))
    },
  )
}

// file:///./parser.mbty
// 1309|    "_" "," arrow_fn_prefix_no_constraint { $3.add(Unnamed(mk_loc($loc($1)))) }

///|
fn yy_action_498(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_ArrowFnParam_(_dollar3)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_List_ArrowFnParam_(
    {
      ()
      _dollar3.add(Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))))
    },
  )
}

// file:///./parser.mbty
// 1414|    "_" "," non_empty_tuple_elems_with_prefix { $3.add(Expr::Hole(loc = mk_loc($loc($1)), kind = Incomplete)) }

///|
fn yy_action_499(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_Expr_(_dollar3)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_List_Expr_(
    {
      ()
      _dollar3.add(
        Expr::Hole(
          loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
          kind=Incomplete,
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 1438|    "(" "_" ":" type_ ")" { Constraint(expr = Hole(loc = mk_loc($loc($2)), kind = Incomplete), ty = $4, loc = mk_loc($sloc)) }

///|
fn yy_action_500(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[3].0 is YYObj_Type(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Constraint(
        expr=Hole(
          loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
          kind=Incomplete,
        ),
        ty=_dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1296|    "_" ioption(",") ")" { @list.singleton((Unnamed(mk_loc($loc($1))), None)) }

///|
fn yy_action_501(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_412(_args[0].2, _args[1:1])
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton(
        (Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))), None),
      )
    },
  )
}

// file:///./parser.mbty
// 1295|    binder ioption(",") ")" { @list.singleton((Named($1), None)) }

///|
fn yy_action_502(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_412(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton((Named(_dollar1), None))
    },
  )
}

// file:///./parser.mbty
// 1295|    binder ioption(",") ")" { @list.singleton((Named($1), None)) }

///|
fn yy_action_503(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_414(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton((Named(_dollar1), None))
    },
  )
}

// file:///./parser.mbty
// 1299|    binder "," arrow_fn_prefix { $3.add((Named($1), None)) }

///|
fn yy_action_504(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj_List__ArrowFnParam__Type___(_dollar3)
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      _dollar3.add((Named(_dollar1), None))
    },
  )
}

// file:///./parser.mbty
// 1297|    binder ":" type_ ioption(",") ")" { @list.singleton((Named($1), Some($3))) }

///|
fn yy_action_505(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_412(_args[2].2, _args[3:3])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton((Named(_dollar1), Some(_dollar3)))
    },
  )
}

// file:///./parser.mbty
// 1297|    binder ":" type_ ioption(",") ")" { @list.singleton((Named($1), Some($3))) }

///|
fn yy_action_506(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_414(_args[2].2, _args[3:4])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton((Named(_dollar1), Some(_dollar3)))
    },
  )
}

// file:///./parser.mbty
// 1301|    binder ":" type_ "," arrow_fn_prefix { $5.add((Named($1), Some($3))) }

///|
fn yy_action_507(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _args[4].0 is YYObj_List__ArrowFnParam__Type___(_dollar5)
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      _dollar5.add((Named(_dollar1), Some(_dollar3)))
    },
  )
}

// file:///./parser.mbty
// 1296|    "_" ioption(",") ")" { @list.singleton((Unnamed(mk_loc($loc($1))), None)) }

///|
fn yy_action_508(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_414(_args[0].2, _args[1:2])
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton(
        (Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))), None),
      )
    },
  )
}

// file:///./parser.mbty
// 1300|    "_" "," arrow_fn_prefix { $3.add((Unnamed(mk_loc($loc($1))), None)) }

///|
fn yy_action_509(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List__ArrowFnParam__Type___(_dollar3)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      _dollar3.add(
        (Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))), None),
      )
    },
  )
}

// file:///./parser.mbty
// 1298|    "_" ":" type_ ioption(",") ")" { @list.singleton((Unnamed(mk_loc($loc($1))), Some($3))) }

///|
fn yy_action_510(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_412(_args[2].2, _args[3:3])
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton(
        (
          Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))),
          Some(_dollar3),
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 1298|    "_" ":" type_ ioption(",") ")" { @list.singleton((Unnamed(mk_loc($loc($1))), Some($3))) }

///|
fn yy_action_511(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_414(_args[2].2, _args[3:4])
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      @list.singleton(
        (
          Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))),
          Some(_dollar3),
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 1302|    "_" ":" type_ "," arrow_fn_prefix { $5.add((Unnamed(mk_loc($loc($1))), Some($3))) }

///|
fn yy_action_512(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[4].0 is YYObj_List__ArrowFnParam__Type___(_dollar5)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_List__ArrowFnParam__Type___(
    {
      ()
      _dollar5.add(
        (
          Unnamed(mk_loc((_start_pos_of_item0, _end_pos_of_item0))),
          Some(_dollar3),
        ),
      )
    },
  )
}

// file:///./parser.mbty
// 1512|    simple_expr apply_attr "(" list_commas(argument) ")" { 
// 1513|    Apply(func = $1, args = $4, attr = $2, loc = mk_loc($sloc))
// 1514|  }

///|
fn yy_action_513(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_367(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[3].0 is YYObj_List_Argument_(_dollar4)
  guard _sub_action_0_result is YYObj_ApplyAttr(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Apply(
        func=_dollar1,
        args=_dollar4,
        attr=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1404|    "?" { Question }

///|
fn yy_action_367(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_ApplyAttr(
    {
      ()
      Question
    },
  )
}

// file:///./parser.mbty
// 1372|    var { Var($1) }

///|
fn yy_action_514(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_515(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Var(_dollar1)
  YYObj_LeftValue(
    {
      ()
      Var(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1598|    qual_ident { Var::{ name: $1, loc: mk_loc($sloc) } }

///|
fn yy_action_515(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_LongIdent(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{ name: _dollar1, loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_516(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_517(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1649|    INFIX4 { Var::{ name: Ident(name = $1), loc: mk_loc($sloc) } }

///|
fn yy_action_517(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{
        name: Ident(name=_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_518(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_519(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1650|    INFIX3 { Var::{ name: Ident(name = $1), loc: mk_loc($sloc) } }

///|
fn yy_action_519(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{
        name: Ident(name=_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_520(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_521(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1651|    INFIX2 { Var::{ name: Ident(name = $1), loc: mk_loc($sloc) } }

///|
fn yy_action_521(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{
        name: Ident(name=_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_522(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_523(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1652|    INFIX1 { Var::{ name: Ident(name = $1), loc: mk_loc($sloc) } }

///|
fn yy_action_523(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{
        name: Ident(name=_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_524(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_525(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1653|    PLUS { Var::{ name: Ident(name = "+"), loc: mk_loc($sloc) } }

///|
fn yy_action_525(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{ name: Ident(name="+"), loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_526(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_527(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1654|    MINUS { Var::{ name: Ident(name = "-"), loc: mk_loc($sloc) } }

///|
fn yy_action_527(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{ name: Ident(name="-"), loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_528(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_529(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1655|    AMPER { Var::{ name: Ident(name = "&"), loc: mk_loc($sloc) } }

///|
fn yy_action_529(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{ name: Ident(name="&"), loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_530(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_531(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1656|    CARET { Var::{ name: Ident(name = "^"), loc: mk_loc($sloc) } }

///|
fn yy_action_531(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{ name: Ident(name="^"), loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_532(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_533(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1657|    BAR { Var::{ name: Ident(name = "|"), loc: mk_loc($sloc) } }

///|
fn yy_action_533(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{ name: Ident(name="|"), loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_534(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_535(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1658|    AMPERAMPER { Var::{ name: Ident(name = "&&"), loc: mk_loc($sloc) } }

///|
fn yy_action_535(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{
        name: Ident(name="&&"),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1320|    infix_expr infixop infix_expr { 
// 1321|    Infix(op = $2, lhs = $1, rhs = $3, loc = mk_loc($sloc))
// 1322|  }

///|
fn yy_action_536(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_537(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Var(_dollar2)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=_dollar2,
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1659|    BARBAR { Var::{ name: Ident(name = "||"), loc: mk_loc($sloc) } }

///|
fn yy_action_537(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Var(
    {
      ()
      Var::{
        name: Ident(name="||"),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1316|    infix_expr { $1 }

///|
fn yy_action_538(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1323|    postfix_expr { $1 }

///|
fn yy_action_539(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1327|    range_expr "as" type_name { 
// 1328|    As(expr = $1, trait_ = $3, loc = mk_loc($sloc))
// 1329|  }

///|
fn yy_action_540(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_TypeName(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      As(
        expr=_dollar1,
        trait_=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1330|    range_expr "is" range_pattern { 
// 1331|    Is(expr = $1, pat = $3, loc = mk_loc($sloc))
// 1332|  }

///|
fn yy_action_541(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Pattern(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Is(expr=_dollar1, pat=_dollar3, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1333|    range_expr { $1 }

///|
fn yy_action_542(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1505|    LIDENT "?" "(" list_commas(argument) ")" { 
// 1506|    let func = @syntax.make_ident_expr(
// 1507|      loc = mk_loc($loc($1)), 
// 1508|      Var::{ name: Ident(name = $1), loc: mk_loc($loc($1)) }
// 1509|    )
// 1510|    Apply(func~, args = $4, attr = Question, loc = mk_loc($sloc))
// 1511|  }

///|
fn yy_action_543(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[0].0 is YYObj_String(_dollar1)
  guard _args[3].0 is YYObj_List_Argument_(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let func = @syntax.make_ident_expr(
        loc=mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        Var::{
          name: Ident(name=_dollar1),
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
      )
      Apply(
        func~,
        args=_dollar4,
        attr=Question,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 170|    non_empty_list_commas(X) { $1 }

///|
fn yy_action_544(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Argument_(_dollar1)
  YYObj_List_Argument_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 918|    LIDENT %prec prec_apply_non_ident_fn { Ident(name = $1) }

///|
fn yy_action_545(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_LongIdent(
    {
      ()
      Ident(name=_dollar1)
    },
  )
}

// file:///./parser.mbty
// 919|    PACKAGE_NAME DOT_LIDENT { Dot(pkg = $1, id = $2) }

///|
fn yy_action_546(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_LongIdent(
    {
      ()
      Dot(pkg=_dollar1, id=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 1345|    prefix_expr "..=" prefix_expr { 
// 1346|    Infix(
// 1347|      op = Var::{ name: Ident(name = "..="), loc: mk_loc($loc($2)) }, 
// 1348|      lhs = $1, 
// 1349|      rhs = $3, 
// 1350|      loc = mk_loc($sloc)
// 1351|    )
// 1352|  }

///|
fn yy_action_547(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Infix(
        op=Var::{
          name: Ident(name="..="),
          loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        },
        lhs=_dollar1,
        rhs=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1353|    prefix_expr { $1 }

///|
fn yy_action_548(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 232|    POST_LABEL opt_annot {
// 233|      let binder = Binder::{ name: $1, loc: mk_loc($loc($1)).trim_last_char() }
// 234|      Labelled(binder~, ty = $2)
// 235|    }

///|
fn yy_action_549(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_19(_args[0].2, _args[1:1])
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_0_result is YYObj_Type_(_dollar2)
  YYObj_Parameter(
    {
      ()
      let binder = Binder::{
        name: _dollar1,
        loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)).trim_last_char(),
      }
      Labelled(binder~, ty=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 226|    ioption(annot) { $1 }

///|
fn yy_action_19(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_550(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_Option_Type_(_dollar1)
  YYObj_Type_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./stdlib.mbty
// 9|    { None }

///|
fn yy_action_550(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Type_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_551(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Parameter_(_dollar1)
  guard _args[2].0 is YYObj_Parameter(_dollar3)
  YYObj_List_Parameter_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_552(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Parameter_(_dollar1)
  YYObj_List_Parameter_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_553(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Parameter(_dollar1)
  YYObj_List_Parameter_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 169|    { @list.empty() }

///|
fn yy_action_554(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Parameter_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 949|    "fn" optional_bang "{" { $2 }

///|
fn yy_action_555(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Location_(_dollar2)
  YYObj_Location_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 1444|    is_async "fn" optional_bang parameters func_return_type block_expr { 
// 1445|    let (return_type, error_type) = $5
// 1446|    Lambda(
// 1447|      parameters = $4,
// 1448|      params_loc = mk_loc($loc($4)),
// 1449|      body = $6,
// 1450|      return_type~,
// 1451|      error_type~,
// 1452|      kind = Lambda,
// 1453|      has_error = $3,
// 1454|      is_async = $1,
// 1455|      loc = mk_loc($sloc)
// 1456|    )
// 1457|  }

///|
fn yy_action_556(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  guard _args[3].0 is YYObj__Type___ErrorType_(_dollar5)
  guard _args[2].0 is YYObj_List_Parameter_(_dollar4)
  let _start_pos_of_item3 = _args[2].1
  let _end_pos_of_item3 = _args[2].2
  guard _args[4].0 is YYObj_Expr(_dollar6)
  guard _args[1].0 is YYObj_Location_(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      let (return_type, error_type) = _dollar5
      Lambda(
        parameters=_dollar4,
        params_loc=mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        body=_dollar6,
        return_type~,
        error_type~,
        kind=Lambda,
        has_error=_dollar3,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1357|    id(plus) prefix_expr { make_uplus(loc = mk_loc($sloc), $1, $2) }

///|
fn yy_action_557(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_558(_last_pos, _args[0:1])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_String(_dollar1)
  guard _args[1].0 is YYObj_Expr(_dollar2)
  YYObj_Expr(
    {
      ()
      make_uplus(loc=mk_loc((_symbol_start_pos, _end_pos)), _dollar1, _dollar2)
    },
  )
}

// file:///./parser.mbty
// 218|    X { $1 }

///|
fn yy_action_558(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_559(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_String(_dollar1)
  YYObj_String(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1364|    PLUS { "+" }

///|
fn yy_action_559(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_String(
    {
      ()
      "+"
    },
  )
}

// file:///./parser.mbty
// 1358|    id(minus) prefix_expr { make_uminus(loc = mk_loc($sloc), $1, $2) }

///|
fn yy_action_560(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_561(_last_pos, _args[0:1])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_String(_dollar1)
  guard _args[1].0 is YYObj_Expr(_dollar2)
  YYObj_Expr(
    {
      ()
      make_uminus(loc=mk_loc((_symbol_start_pos, _end_pos)), _dollar1, _dollar2)
    },
  )
}

// file:///./parser.mbty
// 218|    X { $1 }

///|
fn yy_action_561(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_562(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_String(_dollar1)
  YYObj_String(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1368|    MINUS { "-" }

///|
fn yy_action_562(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_String(
    {
      ()
      "-"
    },
  )
}

// file:///./parser.mbty
// 1408|    expr ioption(",") ")" { @list.singleton($1) }

///|
fn yy_action_563(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_412(_args[0].2, _args[1:1])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1408|    expr ioption(",") ")" { @list.singleton($1) }

///|
fn yy_action_564(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_414(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1409|    expr "," non_empty_tuple_elems { $3.add($1) }

///|
fn yy_action_565(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_Expr_(_dollar3)
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1439|    "(" expr ":" type_ ")" { Constraint(expr = $2, ty = $4, loc = mk_loc($sloc)) }

///|
fn yy_action_566(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  guard _args[3].0 is YYObj_Type(_dollar4)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Constraint(
        expr=_dollar2,
        ty=_dollar4,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1415|    non_empty_tuple_elems { $1 }

///|
fn yy_action_567(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Expr_(_dollar1)
  YYObj_List_Expr_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1419|    "(" arrow_fn_prefix_no_constraint { 
// 1420|    let es = $2.map(@syntax.arrow_fn_param_to_expr)
// 1421|    match es {
// 1422|      @list.More(expr, tail=Empty) => {
// 1423|        match expr {
// 1424|          Constraint(..) => expr
// 1425|          _ => Group(expr~, group = Paren, loc = mk_loc($sloc))
// 1426|        }
// 1427|      }
// 1428|      _ => @syntax.make_tuple_expr(loc = mk_loc($sloc), es)
// 1429|    }
// 1430|  }

///|
fn yy_action_568(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_ArrowFnParam_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let es = _dollar2.map(@syntax.arrow_fn_param_to_expr)
      match es {
        @list.More(expr, tail=Empty) =>
          match expr {
            Constraint(..) => expr
            _ =>
              Group(
                expr~,
                group=Paren,
                loc=mk_loc((_symbol_start_pos, _end_pos)),
              )
          }
        _ =>
          @syntax.make_tuple_expr(loc=mk_loc((_symbol_start_pos, _end_pos)), es)
      }
    },
  )
}

// file:///./parser.mbty
// 1431|    "(" non_empty_tuple_elems_with_prefix { 
// 1432|    match $2 {
// 1433|      More(expr, tail=Empty) => Group(expr~, group = Paren, loc = mk_loc($sloc))
// 1434|      exprs => @syntax.make_tuple_expr(loc = mk_loc($sloc), exprs)
// 1435|    }
// 1436|  }

///|
fn yy_action_569(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_Expr_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      match _dollar2 {
        More(expr, tail=Empty) =>
          Group(expr~, group=Paren, loc=mk_loc((_symbol_start_pos, _end_pos)))
        exprs =>
          @syntax.make_tuple_expr(
            loc=mk_loc((_symbol_start_pos, _end_pos)),
            exprs,
          )
      }
    },
  )
}

// file:///./parser.mbty
// 1440|    "(" ")" { Unit(loc = mk_loc($sloc), faked = false) }

///|
fn yy_action_570(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Unit(loc=mk_loc((_symbol_start_pos, _end_pos)), faked=false)
    },
  )
}

// file:///./parser.mbty
// 1675|    expr { Argument::{ value: $1, kind: Positional } }

///|
fn yy_action_571(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Argument(
    {
      ()
      Argument::{ value: _dollar1, kind: Positional }
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_572(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Argument_(_dollar1)
  guard _args[2].0 is YYObj_Argument(_dollar3)
  YYObj_List_Argument_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_573(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Argument_(_dollar1)
  YYObj_List_Argument_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_574(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Argument(_dollar1)
  YYObj_List_Argument_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 169|    { @list.empty() }

///|
fn yy_action_575(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Argument_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1549|    simple_expr accessor %prec prec_field { 
// 1550|    Field(record = $1, accessor = $2, loc = mk_loc($sloc))
// 1551|  }

///|
fn yy_action_576(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_395(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_Expr(_dollar1)
  guard _sub_action_0_result is YYObj_Accessor(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Field(
        record=_dollar1,
        accessor=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1572|    DOT_INT { Index(tuple_index = $1, loc = mk_loc($sloc)) }

///|
fn yy_action_395(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Int(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Accessor(
    {
      ()
      Index(tuple_index=_dollar1, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1360|    simple_expr { $1 }

///|
fn yy_action_577(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1948|    labeled_expr { $1 }

///|
fn yy_action_578(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_313(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_FieldDef(_dollar1)
  YYObj_FieldDef(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1953|    label ":" expr { @syntax.make_field_def(loc = mk_loc($sloc), $1, $3, false) }

///|
fn yy_action_313(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_404(_last_pos, _args[0:1])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_Label(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  YYObj_FieldDef(
    {
      ()
      @syntax.make_field_def(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar1,
        _dollar3,
        false,
      )
    },
  )
}

// file:///./parser.mbty
// 1949|   label_pun { $1 }

///|
fn yy_action_579(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_311(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_FieldDef(_dollar1)
  YYObj_FieldDef(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1957|    label { @syntax.make_field_def(loc = mk_loc($sloc), $1, @syntax.label_to_expr(loc = mk_loc($sloc), $1), true) }

///|
fn yy_action_311(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_404(_last_pos, _args[0:1])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_Label(_dollar1)
  YYObj_FieldDef(
    {
      ()
      @syntax.make_field_def(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar1,
        @syntax.label_to_expr(
          loc=mk_loc((_symbol_start_pos, _end_pos)),
          _dollar1,
        ),
        true,
      )
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_580(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldDef_(_dollar1)
  guard _args[2].0 is YYObj_FieldDef(_dollar3)
  YYObj_List_FieldDef_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 179|    non_empty_list_commas_rev(X) option(",") { 
// 180|    ($1.rev(), $2 is Some(_)) 
// 181|  }

///|
fn yy_action_581(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldDef_(_dollar1)
  guard _args[1].0 is YYObj_Option_Unit_(_dollar2)
  YYObj__List_FieldDef___Bool_(
    {
      ()
      (_dollar1.rev(), _dollar2 is Some(_))
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_582(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_FieldDef(_dollar1)
  YYObj_List_FieldDef_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 185|    { (@list.empty(), false) }

///|
fn yy_action_583(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj__List_FieldDef___Bool_(
    {
      ()
      (@list.empty(), false)
    },
  )
}

// file:///./parser.mbty
// 1552|    type_name "::" LIDENT { 
// 1553|    let method_name = Label::{ name: $3, loc: mk_loc($loc($3)) }
// 1554|    Method(type_name = $1, method_name~, loc = mk_loc($sloc))
// 1555|  }

///|
fn yy_action_584(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  guard _args[0].0 is YYObj_TypeName(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      let method_name = Label::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      Method(
        type_name=_dollar1,
        method_name~,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 191|    non_empty_list_semi_rev_aux(X) SEMI X { $1.add($3) }

///|
fn yy_action_585(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Statement_(_dollar1)
  guard _args[2].0 is YYObj_Statement(_dollar3)
  YYObj_List_Statement_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 190|    X { @list.singleton($1) }

///|
fn yy_action_586(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Statement(_dollar1)
  YYObj_List_Statement_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 208|    { @list.empty() }

///|
fn yy_action_587(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_Statement_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1444|    is_async "fn" optional_bang parameters func_return_type block_expr { 
// 1445|    let (return_type, error_type) = $5
// 1446|    Lambda(
// 1447|      parameters = $4,
// 1448|      params_loc = mk_loc($loc($4)),
// 1449|      body = $6,
// 1450|      return_type~,
// 1451|      error_type~,
// 1452|      kind = Lambda,
// 1453|      has_error = $3,
// 1454|      is_async = $1,
// 1455|      loc = mk_loc($sloc)
// 1456|    )
// 1457|  }

///|
fn yy_action_588(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  guard _args[4].0 is YYObj__Type___ErrorType_(_dollar5)
  guard _args[3].0 is YYObj_List_Parameter_(_dollar4)
  let _start_pos_of_item3 = _args[3].1
  let _end_pos_of_item3 = _args[3].2
  guard _args[5].0 is YYObj_Expr(_dollar6)
  guard _args[2].0 is YYObj_Location_(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      let (return_type, error_type) = _dollar5
      Lambda(
        parameters=_dollar4,
        params_loc=mk_loc((_start_pos_of_item3, _end_pos_of_item3)),
        body=_dollar6,
        return_type~,
        error_type~,
        kind=Lambda,
        has_error=_dollar3,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1826|    "->" return_type { 
// 1827|    match $2 {
// 1828|      (ty, err) => (Some(ty), err)
// 1829|    }
// 1830|  }

///|
fn yy_action_589(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__Type__ErrorType_(_dollar2)
  YYObj__Type___ErrorType_(
    {
      ()
      match _dollar2 {
        (ty, err) => (Some(ty), err)
      }
    },
  )
}

// file:///./parser.mbty
// 1831|    error_annotation { (None, $1) }

///|
fn yy_action_590(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_ErrorType(_dollar1)
  YYObj__Type___ErrorType_(
    {
      ()
      (None, _dollar1)
    },
  )
}

// file:///./parser.mbty
// 1832|     { (None, NoErrorType) }

///|
fn yy_action_591(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj__Type___ErrorType_(
    {
      ()
      (None, NoErrorType)
    },
  )
}

// file:///./parser.mbty
// 941|     { None }

///|
fn yy_action_592(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Location_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1458|    is_async fn_header_no_binder list_semis(multi_pattern_case) "}" { 
// 1459|    Match(
// 1460|      cases = $3,
// 1461|      has_error = $2,
// 1462|      is_async = $1,
// 1463|      fn_loc = mk_loc($loc($2)),
// 1464|      loc = mk_loc($sloc)
// 1465|    )
// 1466|  }

///|
fn yy_action_593(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj_List_MultiArgCase_(_dollar3)
  guard _args[1].0 is YYObj_Location_(_dollar2)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Func(
    {
      ()
      Match(
        cases=_dollar3,
        has_error=_dollar2,
        is_async=_dollar1,
        fn_loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 214|    non_empty_list_semis(X) { $1 }

///|
fn yy_action_594(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MultiArgCase_(_dollar1)
  YYObj_List_MultiArgCase_(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1502|    "_" %prec prec_lower_than_arrow_fn { Hole(loc = mk_loc($sloc), kind = Incomplete) }

///|
fn yy_action_595(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Hole(loc=mk_loc((_symbol_start_pos, _end_pos)), kind=Incomplete)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_596(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Expr_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_597(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Pattern_(_dollar1)
  YYObj_List_Pattern_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_598(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Pattern_(_dollar1)
  guard _args[2].0 is YYObj_Pattern(_dollar3)
  YYObj_List_Pattern_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 1757|    "{" "}" { Record(fields = @list.empty(), is_closed = true, loc = mk_loc($sloc)) }

///|
fn yy_action_599(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Record(
        fields=@list.empty(),
        is_closed=true,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1758|    "{" ".." option(",") "}" { Record(fields = @list.empty(), is_closed = false, loc = mk_loc($sloc)) }

///|
fn yy_action_600(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Record(
        fields=@list.empty(),
        is_closed=false,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1759|    "{" non_empty_fields_pat "}" { 
// 1760|    let (fields, is_closed) = $2
// 1761|    Record(fields~, is_closed~, loc = mk_loc($sloc))
// 1762|  }

///|
fn yy_action_601(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__List_FieldPat___Bool_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      let (fields, is_closed) = _dollar2
      Record(fields~, is_closed~, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1763|    "{" non_empty_map_elems_pat "}" { 
// 1764|    let (elems, is_closed) = $2
// 1765|    Map(elems~, is_closed~, loc = mk_loc($sloc))
// 1766|  }

///|
fn yy_action_602(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__List_MapPatElem___Bool_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      let (elems, is_closed) = _dollar2
      Map(elems~, is_closed~, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1961|    non_empty_list_commas(fields_pat_single) { ($1, true) }

///|
fn yy_action_603(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldPat_(_dollar1)
  YYObj__List_FieldPat___Bool_(
    {
      ()
      (_dollar1, true)
    },
  )
}

// file:///./parser.mbty
// 1962|    non_empty_list_commas_with_tail(fields_pat_single) ".." option(",") { ($1, false) }

///|
fn yy_action_604(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldPat_(_dollar1)
  YYObj__List_FieldPat___Bool_(
    {
      ()
      (_dollar1, false)
    },
  )
}

// file:///./parser.mbty
// 1979|    non_empty_list_commas(map_elem_pat) { ($1, true) }

///|
fn yy_action_605(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MapPatElem_(_dollar1)
  YYObj__List_MapPatElem___Bool_(
    {
      ()
      (_dollar1, true)
    },
  )
}

// file:///./parser.mbty
// 1980|    non_empty_list_commas_with_tail(map_elem_pat) ".." option(",") { ($1, false) }

///|
fn yy_action_606(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MapPatElem_(_dollar1)
  YYObj__List_MapPatElem___Bool_(
    {
      ()
      (_dollar1, false)
    },
  )
}

// file:///./parser.mbty
// 1966|    fpat_labeled_pattern { $1 }

///|
fn yy_action_607(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_608(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_FieldPat(_dollar1)
  YYObj_FieldPat(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1971|    label ":" pattern { @syntax.make_field_pat(loc = mk_loc($sloc), $1, $3, false) }

///|
fn yy_action_608(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_404(_last_pos, _args[0:1])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_Label(_dollar1)
  guard _args[2].0 is YYObj_Pattern(_dollar3)
  YYObj_FieldPat(
    {
      ()
      @syntax.make_field_pat(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar1,
        _dollar3,
        false,
      )
    },
  )
}

// file:///./parser.mbty
// 1967|   fpat_label_pun { $1 }

///|
fn yy_action_609(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_610(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_FieldPat(_dollar1)
  YYObj_FieldPat(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1975|    label { @syntax.make_field_pat(loc = mk_loc($sloc), $1, @syntax.label_to_pat(loc = mk_loc($sloc), $1), true) }

///|
fn yy_action_610(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_404(_last_pos, _args[0:1])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _sub_action_0_result is YYObj_Label(_dollar1)
  YYObj_FieldPat(
    {
      ()
      @syntax.make_field_pat(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar1,
        @syntax.label_to_pat(
          loc=mk_loc((_symbol_start_pos, _end_pos)),
          _dollar1,
        ),
        true,
      )
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_611(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldPat_(_dollar1)
  guard _args[2].0 is YYObj_FieldPat(_dollar3)
  YYObj_List_FieldPat_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 165|    non_empty_list_commas_rev(X) "," { $1.rev() }

///|
fn yy_action_612(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldPat_(_dollar1)
  YYObj_List_FieldPat_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_613(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_FieldPat_(_dollar1)
  YYObj_List_FieldPat_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 1634|    simple_constant { $1 }

///|
fn yy_action_614(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Constant(_dollar1)
  YYObj_Constant(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1635|    MINUS INT { make_int("-" + $2) }

///|
fn yy_action_615(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_Constant(
    {
      ()
      make_int("-" + _dollar2)
    },
  )
}

// file:///./parser.mbty
// 1636|    MINUS DOUBLE { make_double("-" + $2) }

///|
fn yy_action_616(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_Constant(
    {
      ()
      make_double("-" + _dollar2)
    },
  )
}

// file:///./parser.mbty
// 1637|    MINUS FLOAT { make_float("-" + $2) }

///|
fn yy_action_617(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_Constant(
    {
      ()
      make_float("-" + _dollar2)
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_618(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_619(_args[1].2, _args[2:6])
  guard _args[0].0 is YYObj_List_MapPatElem_(_dollar1)
  guard _sub_action_0_result is YYObj_MapPatElem(_dollar3)
  YYObj_List_MapPatElem_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 165|    non_empty_list_commas_rev(X) "," { $1.rev() }

///|
fn yy_action_620(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MapPatElem_(_dollar1)
  YYObj_List_MapPatElem_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_621(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MapPatElem_(_dollar1)
  YYObj_List_MapPatElem_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_622(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_FieldPat(_dollar1)
  YYObj_List_FieldPat_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_623(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _dollar1 = ()
  YYObj_Option_Unit_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_624(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_619(_last_pos, _args[0:4])
  guard _sub_action_0_result is YYObj_MapPatElem(_dollar1)
  YYObj_List_MapPatElem_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1984|    map_syntax_key option("?") ":" pattern { 
// 1985|    MapPatElem::{
// 1986|      key: $1,
// 1987|      pat: $4,
// 1988|      match_absent: $2 is Some(_),
// 1989|      key_loc: mk_loc($loc($1)),
// 1990|      loc: mk_loc($sloc)
// 1991|    }
// 1992|  }

///|
fn yy_action_619(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Constant(_dollar1)
  guard _args[3].0 is YYObj_Pattern(_dollar4)
  guard _args[1].0 is YYObj_Option_Unit_(_dollar2)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_MapPatElem(
    {
      ()
      MapPatElem::{
        key: _dollar1,
        pat: _dollar4,
        match_absent: _dollar2 is Some(_),
        key_loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1756|    "[" array_sub_patterns "]" { Array(pats = $2, loc = mk_loc($sloc)) }

///|
fn yy_action_625(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_ArrayPatterns(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Array(pats=_dollar2, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1784|    ".." binder { Binder($2) }

///|
fn yy_action_626(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[0].2, _args[1:2])
  guard _sub_action_0_result is YYObj_Binder(_dollar2)
  YYObj_DotDotBinder(
    {
      ()
      Binder(_dollar2)
    },
  )
}

// file:///./parser.mbty
// 1785|    ".." "_" { Underscore }

///|
fn yy_action_627(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_DotDotBinder(
    {
      ()
      Underscore
    },
  )
}

// file:///./parser.mbty
// 1786|    ".." "as" binder { BinderAs($3) }

///|
fn yy_action_628(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[1].2, _args[2:3])
  guard _sub_action_0_result is YYObj_Binder(_dollar3)
  YYObj_DotDotBinder(
    {
      ()
      BinderAs(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 1787|    ".." { NoBinder }

///|
fn yy_action_629(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_DotDotBinder(
    {
      ()
      NoBinder
    },
  )
}

// file:///./parser.mbty
// 1793|    array_sub_pattern "," array_sub_patterns { 
// 1794|    match $3 {
// 1795|      Closed(ps) => Closed(ps.add($1))
// 1796|      Open(ps1, ps2, b) => Open(ps1.add($1), ps2, b)
// 1797|    }
// 1798|  }

///|
fn yy_action_630(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_ArrayPatterns(_dollar3)
  guard _args[0].0 is YYObj_ArrayPattern(_dollar1)
  YYObj_ArrayPatterns(
    {
      ()
      match _dollar3 {
        Closed(ps) => Closed(ps.add(_dollar1))
        Open(ps1, ps2, b) => Open(ps1.add(_dollar1), ps2, b)
      }
    },
  )
}

// file:///./parser.mbty
// 1792|    array_sub_pattern { Closed(@list.singleton($1)) }

///|
fn yy_action_631(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_ArrayPattern(_dollar1)
  YYObj_ArrayPatterns(
    {
      ()
      Closed(@list.singleton(_dollar1))
    },
  )
}

// file:///./parser.mbty
// 1799|    dotdot_binder "," non_empty_list_commas(array_sub_pattern) { Open(@list.empty(), $3, $1) }

///|
fn yy_action_632(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_ArrayPattern_(_dollar3)
  guard _args[0].0 is YYObj_DotDotBinder(_dollar1)
  YYObj_ArrayPatterns(
    {
      ()
      Open(@list.empty(), _dollar3, _dollar1)
    },
  )
}

// file:///./parser.mbty
// 1770|    pattern { Pattern($1) }

///|
fn yy_action_633(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  YYObj_ArrayPattern(
    {
      ()
      Pattern(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1753|    "(" pattern ")" { $2 }

///|
fn yy_action_634(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Pattern(_dollar2)
  YYObj_Pattern(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_635(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  YYObj_List_Pattern_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1754|    "(" pattern "," non_empty_list_commas(pattern) ")" { @syntax.make_tuple_pattern(loc = mk_loc($sloc), $4.add($2)) }

///|
fn yy_action_636(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[3].0 is YYObj_List_Pattern_(_dollar4)
  guard _args[1].0 is YYObj_Pattern(_dollar2)
  YYObj_Pattern(
    {
      ()
      @syntax.make_tuple_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar4.add(_dollar2),
      )
    },
  )
}

// file:///./parser.mbty
// 1755|    "(" pattern annot ")" { Constraint(pat = $2, ty = $3, loc = mk_loc($sloc)) }

///|
fn yy_action_637(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_384(_args[1].2, _args[2:4])
  guard _args[1].0 is YYObj_Pattern(_dollar2)
  guard _sub_action_0_result is YYObj_Type(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Constraint(
        pat=_dollar2,
        ty=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 222|    ":" type_ { $2 }

///|
fn yy_action_384(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Type(_dollar2)
  YYObj_Type(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 1863|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type { 
// 1864|    let (ty_res, ty_err) = $8
// 1865|    let ts = match $5 { 
// 1866|      None => @list.empty() 
// 1867|      Some(ts) => ts 
// 1868|    }
// 1869|    Arrow(args = ts.add($3), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1870|  }

///|
fn yy_action_638(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_639(_args[3].2, _args[4:4])
  guard _args[6].0 is YYObj__Type__ErrorType_(_dollar8)
  guard _sub_action_1_result is YYObj_Option_List_Type__(_dollar5)
  guard _args[2].0 is YYObj_Type(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar8
      let ts = match _dollar5 {
        None => @list.empty()
        Some(ts) => ts
      }
      Arrow(
        args=ts.add(_dollar3),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1863|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type { 
// 1864|    let (ty_res, ty_err) = $8
// 1865|    let ts = match $5 { 
// 1866|      None => @list.empty() 
// 1867|      Some(ts) => ts 
// 1868|    }
// 1869|    Arrow(args = ts.add($3), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1870|  }

///|
fn yy_action_640(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_641(_args[3].2, _args[4:5])
  guard _args[7].0 is YYObj__Type__ErrorType_(_dollar8)
  guard _sub_action_1_result is YYObj_Option_List_Type__(_dollar5)
  guard _args[2].0 is YYObj_Type(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar8
      let ts = match _dollar5 {
        None => @list.empty()
        Some(ts) => ts
      }
      Arrow(
        args=ts.add(_dollar3),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1875|    is_async "(" type_ ")" "->" return_type { 
// 1876|    let (ty_res, ty_err) = $6
// 1877|    Arrow(args = @list.singleton($3), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1878|  }

///|
fn yy_action_642(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  guard _args[5].0 is YYObj__Type__ErrorType_(_dollar6)
  guard _args[2].0 is YYObj_Type(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar6
      Arrow(
        args=@list.singleton(_dollar3),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1850|    qual_ident_ty_inline optional_type_arguments %prec prec_lower_than_as { 
// 1851|    Name(
// 1852|      constr_id = ConstrId::{ id: $1, loc: mk_loc($loc($1)) },
// 1853|      tys = $2,
// 1854|      loc = mk_loc($sloc)
// 1855|    )
// 1856|  }

///|
fn yy_action_643(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_644(_last_pos, _args[0:2])
  let _sub_action_1_result = yy_action_645(_args[1].2, _args[2:5])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_1_result is YYObj_List_Type_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Name(
        constr_id=ConstrId::{
          id: _dollar1,
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
        tys=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1850|    qual_ident_ty_inline optional_type_arguments %prec prec_lower_than_as { 
// 1851|    Name(
// 1852|      constr_id = ConstrId::{ id: $1, loc: mk_loc($loc($1)) },
// 1853|      tys = $2,
// 1854|      loc = mk_loc($sloc)
// 1855|    )
// 1856|  }

///|
fn yy_action_646(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_644(_last_pos, _args[0:2])
  let _sub_action_1_result = yy_action_647(_args[1].2, _args[2:2])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_1_result is YYObj_List_Type_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Name(
        constr_id=ConstrId::{
          id: _dollar1,
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
        tys=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1850|    qual_ident_ty_inline optional_type_arguments %prec prec_lower_than_as { 
// 1851|    Name(
// 1852|      constr_id = ConstrId::{ id: $1, loc: mk_loc($loc($1)) },
// 1853|      tys = $2,
// 1854|      loc = mk_loc($sloc)
// 1855|    )
// 1856|  }

///|
fn yy_action_648(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_649(_last_pos, _args[0:2])
  let _sub_action_1_result = yy_action_645(_args[1].2, _args[2:5])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_1_result is YYObj_List_Type_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Name(
        constr_id=ConstrId::{
          id: _dollar1,
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
        tys=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_650(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Type_(_dollar1)
  YYObj_List_Type_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 1863|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type { 
// 1864|    let (ty_res, ty_err) = $8
// 1865|    let ts = match $5 { 
// 1866|      None => @list.empty() 
// 1867|      Some(ts) => ts 
// 1868|    }
// 1869|    Arrow(args = ts.add($3), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1870|  }

///|
fn yy_action_651(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_641(_args[2].2, _args[3:4])
  guard _args[6].0 is YYObj__Type__ErrorType_(_dollar8)
  guard _sub_action_1_result is YYObj_Option_List_Type__(_dollar5)
  guard _args[1].0 is YYObj_Type(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar8
      let ts = match _dollar5 {
        None => @list.empty()
        Some(ts) => ts
      }
      Arrow(
        args=ts.add(_dollar3),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }

///|
fn yy_action_641(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Type_(_dollar1)
  YYObj_Option_List_Type__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1848|    "(" type_ "," non_empty_list_commas(type_) ")" { @syntax.make_tuple_type(loc = mk_loc($sloc), $4.add($2)) }

///|
fn yy_action_652(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[3].0 is YYObj_List_Type_(_dollar4)
  guard _args[1].0 is YYObj_Type(_dollar2)
  YYObj_Type(
    {
      ()
      @syntax.make_tuple_type(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar4.add(_dollar2),
      )
    },
  )
}

// file:///./parser.mbty
// 1863|    is_async "(" type_ "," ioption(non_empty_list_commas(type_)) ")" "->" return_type { 
// 1864|    let (ty_res, ty_err) = $8
// 1865|    let ts = match $5 { 
// 1866|      None => @list.empty() 
// 1867|      Some(ts) => ts 
// 1868|    }
// 1869|    Arrow(args = ts.add($3), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1870|  }

///|
fn yy_action_653(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  let _sub_action_1_result = yy_action_639(_args[2].2, _args[3:3])
  guard _args[5].0 is YYObj__Type__ErrorType_(_dollar8)
  guard _sub_action_1_result is YYObj_Option_List_Type__(_dollar5)
  guard _args[1].0 is YYObj_Type(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar8
      let ts = match _dollar5 {
        None => @list.empty()
        Some(ts) => ts
      }
      Arrow(
        args=ts.add(_dollar3),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./stdlib.mbty
// 9|    { None }

///|
fn yy_action_639(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_List_Type__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1875|    is_async "(" type_ ")" "->" return_type { 
// 1876|    let (ty_res, ty_err) = $6
// 1877|    Arrow(args = @list.singleton($3), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1878|  }

///|
fn yy_action_654(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  guard _args[4].0 is YYObj__Type__ErrorType_(_dollar6)
  guard _args[1].0 is YYObj_Type(_dollar3)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar6
      Arrow(
        args=@list.singleton(_dollar3),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1849|    "(" type_ ")" { $2 }

///|
fn yy_action_655(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Type(_dollar2)
  YYObj_Type(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 1818|    type_ { ($1, NoErrorType) }

///|
fn yy_action_656(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  YYObj__Type__ErrorType_(
    {
      ()
      (_dollar1, NoErrorType)
    },
  )
}

// file:///./parser.mbty
// 1805|    "raise" error_type { ErrorType(ty = $2) }

///|
fn yy_action_657(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Type(_dollar2)
  YYObj_ErrorType(
    {
      ()
      ErrorType(ty=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 1807|    "raise" "?" { 
// 1808|    let fake_error = Type::Name(
// 1809|      constr_id = ConstrId::{ id: Ident(name = "Error"), loc: mk_loc($sloc) },
// 1810|      tys = @list.empty(),
// 1811|      loc = mk_loc($sloc)
// 1812|    )
// 1813|    MaybeError(ty = fake_error)
// 1814|  }

///|
fn yy_action_658(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_ErrorType(
    {
      ()
      let fake_error = Type::Name(
        constr_id=ConstrId::{
          id: Ident(name="Error"),
          loc: mk_loc((_symbol_start_pos, _end_pos)),
        },
        tys=@list.empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
      MaybeError(ty=fake_error)
    },
  )
}

// file:///./parser.mbty
// 1804|    "raise" { DefaultErrorType(loc = mk_loc($sloc)) }

///|
fn yy_action_659(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_ErrorType(
    {
      ()
      DefaultErrorType(loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1806|    "noraise" { Noraise(loc = mk_loc($sloc)) }

///|
fn yy_action_660(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_ErrorType(
    {
      ()
      Noraise(loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1820|    simple_type "!" error_type { ($1, ErrorType(ty = $3)) }

///|
fn yy_action_661(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj__Type__ErrorType_(
    {
      ()
      (_dollar1, ErrorType(ty=_dollar3))
    },
  )
}

// file:///./parser.mbty
// 1819|    simple_type "!" { ($1, DefaultErrorType(loc = mk_loc($loc($2)))) }

///|
fn yy_action_662(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  YYObj__Type__ErrorType_(
    {
      ()
      (
        _dollar1,
        DefaultErrorType(loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1))),
      )
    },
  )
}

// file:///./parser.mbty
// 1821|    simple_type "?" error_type { ($1, MaybeError(ty = $3)) }

///|
fn yy_action_663(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj__Type__ErrorType_(
    {
      ()
      (_dollar1, MaybeError(ty=_dollar3))
    },
  )
}

// file:///./parser.mbty
// 1836|    qual_ident_ty { 
// 1837|    Name(
// 1838|      constr_id = ConstrId::{ id: $1, loc: mk_loc($sloc) },
// 1839|      tys = @list.empty(),
// 1840|      loc = mk_loc($sloc)
// 1841|    )
// 1842|  }

///|
fn yy_action_664(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_LongIdent(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Name(
        constr_id=ConstrId::{
          id: _dollar1,
          loc: mk_loc((_symbol_start_pos, _end_pos)),
        },
        tys=@list.empty(),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1843|    "_" { Any(loc = mk_loc($sloc)) }

///|
fn yy_action_665(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Any(loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1847|    simple_type "?" { @syntax.make_option_type(loc = mk_loc($sloc), constr_loc = mk_loc($loc($2)), $1) }

///|
fn yy_action_666(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[0].0 is YYObj_Type(_dollar1)
  YYObj_Type(
    {
      ()
      @syntax.make_option_type(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        constr_loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        _dollar1,
      )
    },
  )
}

// file:///./parser.mbty
// 1822|    simple_type error_annotation { ($1, $2) }

///|
fn yy_action_667(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  guard _args[1].0 is YYObj_ErrorType(_dollar2)
  YYObj__Type__ErrorType_(
    {
      ()
      (_dollar1, _dollar2)
    },
  )
}

// file:///./parser.mbty
// 1862|    simple_type { $1 }

///|
fn yy_action_668(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  YYObj_Type(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1871|    is_async "(" ")" "->" return_type { 
// 1872|    let (ty_res, ty_err) = $5
// 1873|    Arrow(args = @list.empty(), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1874|  }

///|
fn yy_action_669(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_9(_last_pos, _args[0:0])
  guard _args[3].0 is YYObj__Type__ErrorType_(_dollar5)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar5
      Arrow(
        args=@list.empty(),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 260|     { false }

///|
fn yy_action_9(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Bool(
    {
      ()
      false
    },
  )
}

// file:///./parser.mbty
// 1850|    qual_ident_ty_inline optional_type_arguments %prec prec_lower_than_as { 
// 1851|    Name(
// 1852|      constr_id = ConstrId::{ id: $1, loc: mk_loc($loc($1)) },
// 1853|      tys = $2,
// 1854|      loc = mk_loc($sloc)
// 1855|    )
// 1856|  }

///|
fn yy_action_670(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_671(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_645(_args[0].2, _args[1:4])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_1_result is YYObj_List_Type_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Name(
        constr_id=ConstrId::{
          id: _dollar1,
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
        tys=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 282|    ioption(delimited("[", non_empty_list_commas(type_), "]")) {
// 283|    match $1 {
// 284|      None => @list.empty()
// 285|      Some(params) => params
// 286|    }
// 287|  }

///|
fn yy_action_645(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_672(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_Option_List_Type__(_dollar1)
  YYObj_List_Type_(
    {
      ()
      match _dollar1 {
        None => @list.empty()
        Some(params) => params
      }
    },
  )
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }

///|
fn yy_action_672(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_673(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj_List_Type_(_dollar1)
  YYObj_Option_List_Type__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }

///|
fn yy_action_673(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_Type_(_dollar2)
  YYObj_List_Type_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 1850|    qual_ident_ty_inline optional_type_arguments %prec prec_lower_than_as { 
// 1851|    Name(
// 1852|      constr_id = ConstrId::{ id: $1, loc: mk_loc($loc($1)) },
// 1853|      tys = $2,
// 1854|      loc = mk_loc($sloc)
// 1855|    )
// 1856|  }

///|
fn yy_action_674(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_671(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_647(_args[0].2, _args[1:1])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_1_result is YYObj_List_Type_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Name(
        constr_id=ConstrId::{
          id: _dollar1,
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
        tys=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_675(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_Type_(_dollar1)
  guard _args[2].0 is YYObj_Type(_dollar3)
  YYObj_List_Type_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_676(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Type(_dollar1)
  YYObj_List_Type_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1850|    qual_ident_ty_inline optional_type_arguments %prec prec_lower_than_as { 
// 1851|    Name(
// 1852|      constr_id = ConstrId::{ id: $1, loc: mk_loc($loc($1)) },
// 1853|      tys = $2,
// 1854|      loc = mk_loc($sloc)
// 1855|    )
// 1856|  }

///|
fn yy_action_677(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_649(_last_pos, _args[0:2])
  let _sub_action_1_result = yy_action_647(_args[1].2, _args[2:2])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _sub_action_1_result is YYObj_List_Type_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Name(
        constr_id=ConstrId::{
          id: _dollar1,
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
        tys=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 282|    ioption(delimited("[", non_empty_list_commas(type_), "]")) {
// 283|    match $1 {
// 284|      None => @list.empty()
// 285|      Some(params) => params
// 286|    }
// 287|  }

///|
fn yy_action_647(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_678(_last_pos, _args[0:0])
  guard _sub_action_0_result is YYObj_Option_List_Type__(_dollar1)
  YYObj_List_Type_(
    {
      ()
      match _dollar1 {
        None => @list.empty()
        Some(params) => params
      }
    },
  )
}

// file:///./stdlib.mbty
// 9|    { None }

///|
fn yy_action_678(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_List_Type__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1857|    "&" qual_ident_ty { Object(ConstrId::{ id: $2, loc: mk_loc($loc($2)) }) }

///|
fn yy_action_679(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_LongIdent(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  YYObj_Type(
    {
      ()
      Object(ConstrId::{
        id: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      })
    },
  )
}

// file:///./parser.mbty
// 1858|    "_" { Any(loc = mk_loc($sloc)) }

///|
fn yy_action_680(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      Any(loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1871|    is_async "(" ")" "->" return_type { 
// 1872|    let (ty_res, ty_err) = $5
// 1873|    Arrow(args = @list.empty(), res = ty_res, err = ty_err, is_async = $1, loc = mk_loc($sloc))
// 1874|  }

///|
fn yy_action_681(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_6(_last_pos, _args[0:1])
  guard _args[4].0 is YYObj__Type__ErrorType_(_dollar5)
  guard _sub_action_0_result is YYObj_Bool(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Type(
    {
      ()
      let (ty_res, ty_err) = _dollar5
      Arrow(
        args=@list.empty(),
        res=ty_res,
        err=ty_err,
        is_async=_dollar1,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 259|    "async" { true }

///|
fn yy_action_6(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Bool(
    {
      ()
      true
    },
  )
}

// file:///./parser.mbty
// 1741|    constr option(delimited("(", constr_pat_arguments, ")")) { 
// 1742|    let (args, is_open) = match $2 {
// 1743|      None => (None, false)
// 1744|      Some((args, is_open)) => (Some(args), is_open)
// 1745|    }
// 1746|    @syntax.make_constr_pattern(loc = mk_loc($sloc), $1, args, is_open)
// 1747|  }

///|
fn yy_action_682(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Option__List_ConstrPatArg___Bool__(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_Constructor(_dollar1)
  YYObj_Pattern(
    {
      ()
      let (args, is_open) = match _dollar2 {
        None => (None, false)
        Some((args, is_open)) => (Some(args), is_open)
      }
      @syntax.make_constr_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar1,
        args,
        is_open,
      )
    },
  )
}

// file:///./parser.mbty
// 1996|    constr_pat_argument option(",") { (@list.singleton($1), false) }

///|
fn yy_action_683(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_ConstrPatArg(_dollar1)
  YYObj__List_ConstrPatArg___Bool_(
    {
      ()
      (@list.singleton(_dollar1), false)
    },
  )
}

// file:///./parser.mbty
// 2010|    label "=" pattern { 
// 2011|    ConstrPatArg::{
// 2012|      pat: $3,
// 2013|      kind: Labelled($1)
// 2014|    }
// 2015|  }

///|
fn yy_action_684(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_404(_last_pos, _args[0:1])
  guard _args[2].0 is YYObj_Pattern(_dollar3)
  guard _sub_action_0_result is YYObj_Label(_dollar1)
  YYObj_ConstrPatArg(
    {
      ()
      ConstrPatArg::{ pat: _dollar3, kind: Labelled(_dollar1) }
    },
  )
}

// file:///./parser.mbty
// 1561|    LIDENT { Label::{ name: $1, loc: mk_loc($sloc) } }

///|
fn yy_action_404(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Label(
    {
      ()
      Label::{ name: _dollar1, loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1750|    binder delimited("(", constr_pat_arguments_no_open, ")") {
// 1751|    Pattern::SpecialConstr(binder = $1, args = $2, loc = mk_loc($sloc))
// 1752|  }

///|
fn yy_action_685(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  let _sub_action_1_result = yy_action_686(_args[0].2, _args[1:4])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  guard _sub_action_1_result is YYObj_List_ConstrPatArg_(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Pattern::SpecialConstr(
        binder=_dollar1,
        args=_dollar2,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }

///|
fn yy_action_686(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_ConstrPatArg_(_dollar2)
  YYObj_List_ConstrPatArg_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./parser.mbty
// 2005|    constr_pat_argument option(",") { @list.singleton($1) }

///|
fn yy_action_687(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_ConstrPatArg(_dollar1)
  YYObj_List_ConstrPatArg_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1711|    pattern "as" binder { @syntax.make_alias_pattern(loc = mk_loc($sloc), $1, $3) }

///|
fn yy_action_688(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_args[1].2, _args[2:3])
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  guard _sub_action_0_result is YYObj_Binder(_dollar3)
  YYObj_Pattern(
    {
      ()
      @syntax.make_alias_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        _dollar1,
        _dollar3,
      )
    },
  )
}

// file:///./parser.mbty
// 2025|    pattern { 
// 2026|    ConstrPatArg::{
// 2027|      pat: $1,
// 2028|      kind: Positional
// 2029|    }
// 2030|  }

///|
fn yy_action_689(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  YYObj_ConstrPatArg(
    {
      ()
      ConstrPatArg::{ pat: _dollar1, kind: Positional }
    },
  )
}

// file:///./parser.mbty
// 1712|    or_pattern { $1 }

///|
fn yy_action_690(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  YYObj_Pattern(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1716|    range_pattern "|" or_pattern { Or(pat1 = $1, pat2 = $3, loc = mk_loc($sloc)) }

///|
fn yy_action_691(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  guard _args[2].0 is YYObj_Pattern(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Or(
        pat1=_dollar1,
        pat2=_dollar3,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1717|    range_pattern { $1 }

///|
fn yy_action_692(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  YYObj_Pattern(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1721|    simple_pattern "..<" simple_pattern { Range(lhs = $1, rhs = $3, inclusive = false, loc = mk_loc($sloc)) }

///|
fn yy_action_693(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  guard _args[2].0 is YYObj_Pattern(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Range(
        lhs=_dollar1,
        rhs=_dollar3,
        inclusive=false,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1378|    UIDENT { 
// 1379|    Constructor::{
// 1380|      name: ConstrName::{ name: $1, loc: mk_loc($loc($1)) },
// 1381|      extra_info: NoExtraInfo,
// 1382|      loc: mk_loc($sloc)
// 1383|    }
// 1384|  }

///|
fn yy_action_694(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Constructor(
    {
      ()
      Constructor::{
        name: ConstrName::{
          name: _dollar1,
          loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        },
        extra_info: NoExtraInfo,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1385|    PACKAGE_NAME DOT_UIDENT { 
// 1386|    Constructor::{
// 1387|      name: ConstrName::{ name: $2, loc: mk_loc($loc($2)) },
// 1388|      extra_info: Package($1),
// 1389|      loc: mk_loc($sloc)
// 1390|    }
// 1391|  }

///|
fn yy_action_695(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Constructor(
    {
      ()
      Constructor::{
        name: ConstrName::{
          name: _dollar2,
          loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
        },
        extra_info: Package(_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1392|    type_name "::" UIDENT { 
// 1393|    Constructor::{
// 1394|      name: ConstrName::{ name: $3, loc: mk_loc($loc($3)) },
// 1395|      extra_info: TypeName($1),
// 1396|      loc: mk_loc($sloc)
// 1397|    }
// 1398|  }

///|
fn yy_action_696(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  guard _args[0].0 is YYObj_TypeName(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Constructor(
    {
      ()
      Constructor::{
        name: ConstrName::{
          name: _dollar3,
          loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
        },
        extra_info: TypeName(_dollar1),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1722|    simple_pattern "..=" simple_pattern { Range(lhs = $1, rhs = $3, inclusive = true, loc = mk_loc($sloc)) }

///|
fn yy_action_697(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  guard _args[2].0 is YYObj_Pattern(_dollar3)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Range(
        lhs=_dollar1,
        rhs=_dollar3,
        inclusive=true,
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 1723|    simple_pattern { $1 }

///|
fn yy_action_698(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Pattern(_dollar1)
  YYObj_Pattern(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1727|    TRUE { @syntax.make_constant_pattern(loc = mk_loc($sloc), Bool(true)) }

///|
fn yy_action_699(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        Bool(true),
      )
    },
  )
}

// file:///./parser.mbty
// 1728|    FALSE { @syntax.make_constant_pattern(loc = mk_loc($sloc), Bool(false)) }

///|
fn yy_action_700(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        Bool(false),
      )
    },
  )
}

// file:///./parser.mbty
// 1729|    CHAR { @syntax.make_constant_pattern(loc = mk_loc($sloc), Char($1)) }

///|
fn yy_action_701(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_CharLiteral(_dollar1)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        Char(_dollar1),
      )
    },
  )
}

// file:///./parser.mbty
// 1730|    INT { @syntax.make_constant_pattern(loc = mk_loc($sloc), @syntax.make_int($1)) }

///|
fn yy_action_702(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        @syntax.make_int(_dollar1),
      )
    },
  )
}

// file:///./parser.mbty
// 1731|    BYTE { @syntax.make_constant_pattern(loc = mk_loc($sloc), Byte($1)) }

///|
fn yy_action_703(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_CharLiteral(_dollar1)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        Byte(_dollar1),
      )
    },
  )
}

// file:///./parser.mbty
// 1732|    DOUBLE { @syntax.make_constant_pattern(loc = mk_loc($sloc), @syntax.make_double($1)) }

///|
fn yy_action_704(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        @syntax.make_double(_dollar1),
      )
    },
  )
}

// file:///./parser.mbty
// 1733|    FLOAT { @syntax.make_constant_pattern(loc = mk_loc($sloc), @syntax.make_float($1)) }

///|
fn yy_action_705(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        @syntax.make_float(_dollar1),
      )
    },
  )
}

// file:///./parser.mbty
// 1734|    "-" INT { @syntax.make_constant_pattern(loc = mk_loc($sloc), @syntax.make_int("-" + $2)) }

///|
fn yy_action_706(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        @syntax.make_int("-" + _dollar2),
      )
    },
  )
}

// file:///./parser.mbty
// 1735|    "-" DOUBLE { @syntax.make_constant_pattern(loc = mk_loc($sloc), @syntax.make_double("-" + $2)) }

///|
fn yy_action_707(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        @syntax.make_double("-" + _dollar2),
      )
    },
  )
}

// file:///./parser.mbty
// 1736|    "-" FLOAT { @syntax.make_constant_pattern(loc = mk_loc($sloc), @syntax.make_float("-" + $2)) }

///|
fn yy_action_708(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        @syntax.make_float("-" + _dollar2),
      )
    },
  )
}

// file:///./parser.mbty
// 1737|    STRING { @syntax.make_constant_pattern(loc = mk_loc($sloc), String($1)) }

///|
fn yy_action_709(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_StringLiteral(_dollar1)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        String(_dollar1),
      )
    },
  )
}

// file:///./parser.mbty
// 1738|    BYTES { @syntax.make_constant_pattern(loc = mk_loc($sloc), Bytes($1)) }

///|
fn yy_action_710(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_StringLiteral(_dollar1)
  YYObj_Pattern(
    {
      ()
      @syntax.make_constant_pattern(
        loc=mk_loc((_symbol_start_pos, _end_pos)),
        Bytes(_dollar1),
      )
    },
  )
}

// file:///./parser.mbty
// 1739|    UNDERSCORE { Any(loc = mk_loc($sloc)) }

///|
fn yy_action_711(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Pattern(
    {
      ()
      Any(loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 2006|    constr_pat_argument "," constr_pat_arguments_no_open { $3.add($1) }

///|
fn yy_action_712(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_ConstrPatArg_(_dollar3)
  guard _args[0].0 is YYObj_ConstrPatArg(_dollar1)
  YYObj_List_ConstrPatArg_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1740|    binder { Var($1) }

///|
fn yy_action_713(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_16(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_Binder(_dollar1)
  YYObj_Pattern(
    {
      ()
      Var(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1576|    LIDENT { Binder::{ name: $1, loc: mk_loc($sloc) } }

///|
fn yy_action_16(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Binder(
    {
      ()
      Binder::{ name: _dollar1, loc: mk_loc((_symbol_start_pos, _end_pos)) }
    },
  )
}

// file:///./parser.mbty
// 1998|    constr_pat_argument "," constr_pat_arguments { 
// 1999|    let (args, is_open) = $3
// 2000|    (args.add($1), is_open)
// 2001|  }

///|
fn yy_action_714(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj__List_ConstrPatArg___Bool_(_dollar3)
  guard _args[0].0 is YYObj_ConstrPatArg(_dollar1)
  YYObj__List_ConstrPatArg___Bool_(
    {
      ()
      let (args, is_open) = _dollar3
      (args.add(_dollar1), is_open)
    },
  )
}

// file:///./parser.mbty
// 1997|    ".." option(",") { (@list.empty(), true) }

///|
fn yy_action_715(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj__List_ConstrPatArg___Bool_(
    {
      ()
      (@list.empty(), true)
    },
  )
}

// file:///./parser.mbty
// 2016|    POST_LABEL { 
// 2017|    let loc = mk_loc($loc($1))
// 2018|    let label = Label::{ name: $1, loc }
// 2019|    let pat = @syntax.label_to_pat(loc = loc.trim_last_char(), label)
// 2020|    ConstrPatArg::{
// 2021|      pat,
// 2022|      kind: LabelledPun(label)
// 2023|    }
// 2024|  }

///|
fn yy_action_716(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_ConstrPatArg(
    {
      ()
      let loc = mk_loc((_start_pos_of_item0, _end_pos_of_item0))
      let label = Label::{ name: _dollar1, loc }
      let pat = @syntax.label_to_pat(loc=loc.trim_last_char(), label)
      ConstrPatArg::{ pat, kind: LabelledPun(label) }
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_717(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_718(_last_pos, _args[0:3])
  guard _sub_action_0_result is YYObj__List_ConstrPatArg___Bool_(_dollar1)
  YYObj_Option__List_ConstrPatArg___Bool__(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 40|    L X R { $2 }

///|
fn yy_action_718(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj__List_ConstrPatArg___Bool_(_dollar2)
  YYObj__List_ConstrPatArg___Bool_(
    {
      ()
      _dollar2
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_719(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option__List_ConstrPatArg___Bool__(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1771|    ".." STRING { StringSpread(str = $2, loc = mk_loc($loc($2))) }

///|
fn yy_action_720(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_StringLiteral(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  YYObj_ArrayPattern(
    {
      ()
      StringSpread(
        str=_dollar2,
        loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      )
    },
  )
}

// file:///./parser.mbty
// 1772|    ".." BYTES { BytesSpread(bytes = $2, loc = mk_loc($loc($2))) }

///|
fn yy_action_721(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_StringLiteral(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  YYObj_ArrayPattern(
    {
      ()
      BytesSpread(
        bytes=_dollar2,
        loc=mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      )
    },
  )
}

// file:///./parser.mbty
// 1773|    ".." UIDENT { 
// 1774|    let binder = Binder::{ name: $2, loc: mk_loc($loc($2)) }
// 1775|    ConstSpread(binder~, pkg = None, loc = mk_loc($sloc))
// 1776|  }

///|
fn yy_action_722(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_String(_dollar2)
  let _start_pos_of_item1 = _args[1].1
  let _end_pos_of_item1 = _args[1].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_ArrayPattern(
    {
      ()
      let binder = Binder::{
        name: _dollar2,
        loc: mk_loc((_start_pos_of_item1, _end_pos_of_item1)),
      }
      ConstSpread(binder~, pkg=None, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1777|    ".." PACKAGE_NAME DOT_UIDENT { 
// 1778|    let binder = Binder::{ name: $3, loc: mk_loc($loc($3)) }
// 1779|    ConstSpread(binder~, pkg = Some($2), loc = mk_loc($sloc))
// 1780|  }

///|
fn yy_action_723(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_String(_dollar3)
  let _start_pos_of_item2 = _args[2].1
  let _end_pos_of_item2 = _args[2].2
  guard _args[1].0 is YYObj_String(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_ArrayPattern(
    {
      ()
      let binder = Binder::{
        name: _dollar3,
        loc: mk_loc((_start_pos_of_item2, _end_pos_of_item2)),
      }
      ConstSpread(
        binder~,
        pkg=Some(_dollar2),
        loc=mk_loc((_symbol_start_pos, _end_pos)),
      )
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_724(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_ArrayPattern_(_dollar1)
  guard _args[2].0 is YYObj_ArrayPattern(_dollar3)
  YYObj_List_ArrayPattern_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_725(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_ArrayPattern_(_dollar1)
  YYObj_List_ArrayPattern_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_726(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_ArrayPattern(_dollar1)
  YYObj_List_ArrayPattern_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1800|    dotdot_binder ioption(",") { Open(@list.empty(), @list.empty(), $1) }

///|
fn yy_action_727(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_414(_args[0].2, _args[1:2])
  guard _args[0].0 is YYObj_DotDotBinder(_dollar1)
  YYObj_ArrayPatterns(
    {
      ()
      Open(@list.empty(), @list.empty(), _dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 10|    X { Some($1) }

///|
fn yy_action_414(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _dollar1 = ()
  YYObj_Option_Unit_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1800|    dotdot_binder ioption(",") { Open(@list.empty(), @list.empty(), $1) }

///|
fn yy_action_728(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_412(_args[0].2, _args[1:1])
  guard _args[0].0 is YYObj_DotDotBinder(_dollar1)
  YYObj_ArrayPatterns(
    {
      ()
      Open(@list.empty(), @list.empty(), _dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 9|    { None }

///|
fn yy_action_412(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Unit_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 1791|     { Closed(@list.empty()) }

///|
fn yy_action_729(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_ArrayPatterns(
    {
      ()
      Closed(@list.empty())
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_730(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Unit_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 204|    X SEMI non_empty_list_semis(X) { $3.add($1) }

///|
fn yy_action_731(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[2].0 is YYObj_List_MultiArgCase_(_dollar3)
  guard _args[0].0 is YYObj_MultiArgCase(_dollar1)
  YYObj_List_MultiArgCase_(
    {
      ()
      _dollar3.add(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_732(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Bool(_dollar1)
  YYObj_Option_Bool_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 203|    X option(SEMI) { @list.singleton($1) }

///|
fn yy_action_733(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_MultiArgCase(_dollar1)
  YYObj_List_MultiArgCase_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_734(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Bool_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 213|    { @list.empty() }

///|
fn yy_action_735(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_MultiArgCase_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1700|    map_syntax_key ":" expr { 
// 1701|    MapExprElem::{
// 1702|      key: $1,
// 1703|      expr: $3,
// 1704|      key_loc: mk_loc($loc($1)),
// 1705|      loc: mk_loc($sloc)
// 1706|    }
// 1707|  }

///|
fn yy_action_736(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Constant(_dollar1)
  guard _args[2].0 is YYObj_Expr(_dollar3)
  let _start_pos_of_item0 = _args[0].1
  let _end_pos_of_item0 = _args[0].2
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_MapExprElem(
    {
      ()
      MapExprElem::{
        key: _dollar1,
        expr: _dollar3,
        key_loc: mk_loc((_start_pos_of_item0, _end_pos_of_item0)),
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_737(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MapExprElem_(_dollar1)
  guard _args[2].0 is YYObj_MapExprElem(_dollar3)
  YYObj_List_MapExprElem_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_738(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MapExprElem_(_dollar1)
  YYObj_List_MapExprElem_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_739(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_MapExprElem(_dollar1)
  YYObj_List_MapExprElem_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 169|    { @list.empty() }

///|
fn yy_action_740(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_MapExprElem_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1500|    anony_fn { Function(func = $1, loc = mk_loc($sloc)) }

///|
fn yy_action_741(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Func(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Function(func=_dollar1, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1501|    atomic_expr { $1 }

///|
fn yy_action_742(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1503|    qual_ident_simple_expr { @syntax.make_ident_expr(loc = mk_loc($sloc), Var::{ name: $1, loc: mk_loc($sloc) }) }

///|
fn yy_action_743(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_LongIdent(_dollar1)
  YYObj_Expr(
    {
      ()
      @syntax.make_ident_expr(loc=mk_loc((_symbol_start_pos, _end_pos)), Var::{
        name: _dollar1,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      })
    },
  )
}

// file:///./parser.mbty
// 1504|    constr { Constr(constr = $1, loc = mk_loc($sloc)) }

///|
fn yy_action_744(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Constructor(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      Constr(constr=_dollar1, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1696|    ".." expr { Spread(expr = $2, loc = mk_loc($sloc)) }

///|
fn yy_action_745(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_Expr(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_SpreadableElem(
    {
      ()
      Spread(expr=_dollar2, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 153|    non_empty_list_commas_rev(X) "," X { $1.add($3) }

///|
fn yy_action_746(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_SpreadableElem_(_dollar1)
  guard _args[2].0 is YYObj_SpreadableElem(_dollar3)
  YYObj_List_SpreadableElem_(
    {
      ()
      _dollar1.add(_dollar3)
    },
  )
}

// file:///./stdlib.mbty
// 5|    X { Some($1) }

///|
fn yy_action_747(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _dollar1 = ()
  YYObj_Option_Unit_(
    {
      ()
      Some(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 161|    non_empty_list_commas_rev(X) option(",") { $1.rev() }

///|
fn yy_action_748(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_SpreadableElem_(_dollar1)
  YYObj_List_SpreadableElem_(
    {
      ()
      _dollar1.rev()
    },
  )
}

// file:///./stdlib.mbty
// 4|    { None }

///|
fn yy_action_749(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Option_Unit_(
    {
      ()
      None
    },
  )
}

// file:///./parser.mbty
// 152|    X { @list.singleton($1) }

///|
fn yy_action_750(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_SpreadableElem(_dollar1)
  YYObj_List_SpreadableElem_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 169|    { @list.empty() }

///|
fn yy_action_751(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_List_SpreadableElem_(
    {
      ()
      @list.empty()
    },
  )
}

// file:///./parser.mbty
// 1557|    tuple_expr { $1 }

///|
fn yy_action_752(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_Expr(_dollar1)
  YYObj_Expr(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 1602|    qual_ident_ty { TypeName::{ name: $1, is_object: false, loc: mk_loc($sloc) } }

///|
fn yy_action_753(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_LongIdent(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TypeName(
    {
      ()
      TypeName::{
        name: _dollar1,
        is_object: false,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 929|    qual_ident_ty_inline { $1 }

///|
fn yy_action_754(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_671(_last_pos, _args[0:1])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  YYObj_LongIdent(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 923|    UIDENT { LongIdent::Ident(name = $1) }

///|
fn yy_action_671(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_LongIdent(
    {
      ()
      LongIdent::Ident(name=_dollar1)
    },
  )
}

// file:///./parser.mbty
// 929|    qual_ident_ty_inline { $1 }

///|
fn yy_action_755(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_644(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  YYObj_LongIdent(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 924|    PACKAGE_NAME DOT_LIDENT { LongIdent::Dot(pkg = $1, id = $2) }

///|
fn yy_action_644(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_LongIdent(
    {
      ()
      LongIdent::Dot(pkg=_dollar1, id=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 929|    qual_ident_ty_inline { $1 }

///|
fn yy_action_756(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _sub_action_0_result = yy_action_649(_last_pos, _args[0:2])
  guard _sub_action_0_result is YYObj_LongIdent(_dollar1)
  YYObj_LongIdent(
    {
      ()
      _dollar1
    },
  )
}

// file:///./parser.mbty
// 925|    PACKAGE_NAME DOT_UIDENT { LongIdent::Dot(pkg = $1, id = $2) }

///|
fn yy_action_649(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  guard _args[1].0 is YYObj_String(_dollar2)
  YYObj_LongIdent(
    {
      ()
      LongIdent::Dot(pkg=_dollar1, id=_dollar2)
    },
  )
}

// file:///./parser.mbty
// 1603|    "&" qual_ident_ty { TypeName::{ name: $2, is_object: true, loc: mk_loc($sloc) } }

///|
fn yy_action_757(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_LongIdent(_dollar2)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_TypeName(
    {
      ()
      TypeName::{
        name: _dollar2,
        is_object: true,
        loc: mk_loc((_symbol_start_pos, _end_pos)),
      }
    },
  )
}

// file:///./parser.mbty
// 1614|    simple_constant { make_constant_expr(loc = mk_loc($sloc), $1) }

///|
fn yy_action_758(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_Constant(_dollar1)
  YYObj_Expr(
    {
      ()
      make_constant_expr(loc=mk_loc((_symbol_start_pos, _end_pos)), _dollar1)
    },
  )
}

// file:///./parser.mbty
// 1615|    non_empty_list(multiline_string) { 
// 1616|    MultilineString(elems = $1, loc = mk_loc($sloc))
// 1617|  }

///|
fn yy_action_759(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_List_MultilineStringElem_(_dollar1)
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  YYObj_Expr(
    {
      ()
      MultilineString(elems=_dollar1, loc=mk_loc((_symbol_start_pos, _end_pos)))
    },
  )
}

// file:///./parser.mbty
// 1618|    INTERP { make_interp_expr(loc = mk_loc($sloc), $1) }

///|
fn yy_action_760(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  let _symbol_start_pos = _get_symbol_start_pos(_args, _last_pos)
  let _end_pos = if _args.length() == 0 {
    _last_pos
  } else {
    _args[_args.length() - 1].2
  }
  guard _args[0].0 is YYObj_InterpLiteral(_dollar1)
  YYObj_Expr(
    {
      ()
      make_interp_expr(loc=mk_loc((_symbol_start_pos, _end_pos)), _dollar1)
    },
  )
}

// file:///./parser.mbty
// 1622|    TRUE { Bool(true) }

///|
fn yy_action_761(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Constant(
    {
      ()
      Bool(true)
    },
  )
}

// file:///./parser.mbty
// 1623|    FALSE { Bool(false) }

///|
fn yy_action_762(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Constant(
    {
      ()
      Bool(false)
    },
  )
}

// file:///./parser.mbty
// 1624|    BYTE { Byte($1) }

///|
fn yy_action_763(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_CharLiteral(_dollar1)
  YYObj_Constant(
    {
      ()
      Byte(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1625|    BYTES { Bytes($1) }

///|
fn yy_action_764(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_StringLiteral(_dollar1)
  YYObj_Constant(
    {
      ()
      Bytes(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1626|    CHAR { Char($1) }

///|
fn yy_action_765(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_CharLiteral(_dollar1)
  YYObj_Constant(
    {
      ()
      Char(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1627|    INT { make_int($1) }

///|
fn yy_action_766(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_Constant(
    {
      ()
      make_int(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1628|    DOUBLE { make_double($1) }

///|
fn yy_action_767(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_Constant(
    {
      ()
      make_double(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1629|    FLOAT { make_float($1) }

///|
fn yy_action_768(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_Constant(
    {
      ()
      make_float(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1630|    STRING { String($1) }

///|
fn yy_action_769(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_StringLiteral(_dollar1)
  YYObj_Constant(
    {
      ()
      String(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1607|    MULTILINE_STRING { String($1) }

///|
fn yy_action_770(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_String(_dollar1)
  YYObj_MultilineStringElem(
    {
      ()
      String(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1608|    MULTILINE_INTERP { 
// 1609|    Interp(make_interps($1))
// 1610|  }

///|
fn yy_action_771(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_InterpLiteral(_dollar1)
  YYObj_MultilineStringElem(
    {
      ()
      Interp(make_interps(_dollar1))
    },
  )
}

// file:///./parser.mbty
// 148|    X non_empty_list(X) { $2.add($1) }

///|
fn yy_action_772(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[1].0 is YYObj_List_MultilineStringElem_(_dollar2)
  guard _args[0].0 is YYObj_MultilineStringElem(_dollar1)
  YYObj_List_MultilineStringElem_(
    {
      ()
      _dollar2.add(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 147|    X { @list.singleton($1) }

///|
fn yy_action_773(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  guard _args[0].0 is YYObj_MultilineStringElem(_dollar1)
  YYObj_List_MultilineStringElem_(
    {
      ()
      @list.singleton(_dollar1)
    },
  )
}

// file:///./parser.mbty
// 1059|     { None}

///|
fn yy_action_774(
  _last_pos : Position,
  _args : ArrayView[(YYObj, Position, Position)],
) -> YYObj {
  YYObj_Label_(
    {
      ()
      None
    },
  )
}

///|
fn yy_input(
  token : Token,
  _start_pos : Position,
  _end_pos : Position,
) -> (YYSymbol, YYObj) {
  match token {
    CHAR(data) => (T_CHAR, YYObj_CharLiteral(data))
    INT(data) => (T_INT, YYObj_String(data))
    BYTE(data) => (T_BYTE, YYObj_CharLiteral(data))
    BYTES(data) => (T_BYTES, YYObj_StringLiteral(data))
    FLOAT(data) => (T_FLOAT, YYObj_String(data))
    DOUBLE(data) => (T_DOUBLE, YYObj_String(data))
    STRING(data) => (T_STRING, YYObj_StringLiteral(data))
    MULTILINE_STRING(data) => (T_MULTILINE_STRING, YYObj_String(data))
    MULTILINE_INTERP(data) => (T_MULTILINE_INTERP, YYObj_InterpLiteral(data))
    INTERP(data) => (T_INTERP, YYObj_InterpLiteral(data))
    ATTRIBUTE(data) => (T_ATTRIBUTE, YYObj__String__String___String_(data))
    LIDENT(data) => (T_LIDENT, YYObj_String(data))
    UIDENT(data) => (T_UIDENT, YYObj_String(data))
    POST_LABEL(data) => (T_POST_LABEL, YYObj_String(data))
    COMMENT(data) => (T_COMMENT, YYObj_Comment(data))
    NEWLINE => (T_NEWLINE, YYObj_Void)
    INFIX1(data) => (T_INFIX1, YYObj_String(data))
    INFIX2(data) => (T_INFIX2, YYObj_String(data))
    INFIX3(data) => (T_INFIX3, YYObj_String(data))
    INFIX4(data) => (T_INFIX4, YYObj_String(data))
    AUGMENTED_ASSIGNMENT(data) => (T_AUGMENTED_ASSIGNMENT, YYObj_String(data))
    EOF => (T_EOF, YYObj_Void)
    FALSE => (T_FALSE, YYObj_Void)
    TRUE => (T_TRUE, YYObj_Void)
    PUB => (T_PUB, YYObj_Void)
    PRIV => (T_PRIV, YYObj_Void)
    READONLY => (T_READONLY, YYObj_Void)
    IMPORT => (T_IMPORT, YYObj_Void)
    EXTERN => (T_EXTERN, YYObj_Void)
    BREAK => (T_BREAK, YYObj_Void)
    CONTINUE => (T_CONTINUE, YYObj_Void)
    STRUCT => (T_STRUCT, YYObj_Void)
    ENUM => (T_ENUM, YYObj_Void)
    TRAIT => (T_TRAIT, YYObj_Void)
    DERIVE => (T_DERIVE, YYObj_Void)
    IMPL => (T_IMPL, YYObj_Void)
    WITH => (T_WITH, YYObj_Void)
    RAISE => (T_RAISE, YYObj_Void)
    THROW => (T_THROW, YYObj_Void)
    TRY => (T_TRY, YYObj_Void)
    CATCH => (T_CATCH, YYObj_Void)
    ASYNC => (T_ASYNC, YYObj_Void)
    TYPEALIAS => (T_TYPEALIAS, YYObj_Void)
    TRAITALIAS => (T_TRAITALIAS, YYObj_Void)
    FNALIAS => (T_FNALIAS, YYObj_Void)
    EQUAL => (T_EQUAL, YYObj_Void)
    LPAREN => (T_LPAREN, YYObj_Void)
    RPAREN => (T_RPAREN, YYObj_Void)
    COMMA => (T_COMMA, YYObj_Void)
    MINUS => (T_MINUS, YYObj_Void)
    QUESTION => (T_QUESTION, YYObj_Void)
    EXCLAMATION => (T_EXCLAMATION, YYObj_Void)
    DOT_LIDENT(data) => (T_DOT_LIDENT, YYObj_String(data))
    DOT_UIDENT(data) => (T_DOT_UIDENT, YYObj_String(data))
    DOT_INT(data) => (T_DOT_INT, YYObj_Int(data))
    DOT_LPAREN => (T_DOT_LPAREN, YYObj_Void)
    COLONCOLON => (T_COLONCOLON, YYObj_Void)
    COLON => (T_COLON, YYObj_Void)
    SEMI(data) => (T_SEMI, YYObj_Bool(data))
    LBRACKET => (T_LBRACKET, YYObj_Void)
    PLUS => (T_PLUS, YYObj_Void)
    RBRACKET => (T_RBRACKET, YYObj_Void)
    UNDERSCORE => (T_UNDERSCORE, YYObj_Void)
    BAR => (T_BAR, YYObj_Void)
    LBRACE => (T_LBRACE, YYObj_Void)
    RBRACE => (T_RBRACE, YYObj_Void)
    AMPERAMPER => (T_AMPERAMPER, YYObj_Void)
    AMPER => (T_AMPER, YYObj_Void)
    CARET => (T_CARET, YYObj_Void)
    BARBAR => (T_BARBAR, YYObj_Void)
    PACKAGE_NAME(data) => (T_PACKAGE_NAME, YYObj_String(data))
    AS => (T_AS, YYObj_Void)
    PIPE => (T_PIPE, YYObj_Void)
    ELSE => (T_ELSE, YYObj_Void)
    FN => (T_FN, YYObj_Void)
    IF => (T_IF, YYObj_Void)
    LET => (T_LET, YYObj_Void)
    CONST => (T_CONST, YYObj_Void)
    MATCH => (T_MATCH, YYObj_Void)
    USING => (T_USING, YYObj_Void)
    MUTABLE => (T_MUTABLE, YYObj_Void)
    TYPE => (T_TYPE, YYObj_Void)
    FAT_ARROW => (T_FAT_ARROW, YYObj_Void)
    THIN_ARROW => (T_THIN_ARROW, YYObj_Void)
    WHILE => (T_WHILE, YYObj_Void)
    RETURN => (T_RETURN, YYObj_Void)
    DOTDOT => (T_DOTDOT, YYObj_Void)
    RANGE_INCLUSIVE => (T_RANGE_INCLUSIVE, YYObj_Void)
    RANGE_EXCLUSIVE => (T_RANGE_EXCLUSIVE, YYObj_Void)
    ELLIPSIS => (T_ELLIPSIS, YYObj_Void)
    TEST => (T_TEST, YYObj_Void)
    LOOP => (T_LOOP, YYObj_Void)
    GUARD => (T_GUARD, YYObj_Void)
    DEFER => (T_DEFER, YYObj_Void)
    FOR => (T_FOR, YYObj_Void)
    IN => (T_IN, YYObj_Void)
    IS => (T_IS, YYObj_Void)
    SUBERROR => (T_SUBERROR, YYObj_Void)
    AND => (T_AND, YYObj_Void)
    LETREC => (T_LETREC, YYObj_Void)
    ENUMVIEW => (T_ENUMVIEW, YYObj_Void)
    NORAISE => (T_NORAISE, YYObj_Void)
    TRY_QUESTION => (T_TRY_QUESTION, YYObj_Void)
    TRY_EXCLAMATION => (T_TRY_EXCLAMATION, YYObj_Void)
  }
}

///|
fn yy_state_0(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_expression => Shift(yy_state_1)
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_784)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_1(_lookahead : YYSymbol) -> YYDecision {
  Accept
}

///|
fn yy_state_2(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_3)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_non_empty_list_multiline_string_, yy_action_773)
    _ => Error
  }
}

///|
fn yy_state_3(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_multiline_string_, yy_action_772)
}

///|
fn yy_state_4(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_multiline_string, yy_action_771)
}

///|
fn yy_state_5(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_multiline_string, yy_action_770)
}

///|
fn yy_state_6(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_769)
}

///|
fn yy_state_7(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_768)
}

///|
fn yy_state_8(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_767)
}

///|
fn yy_state_9(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_766)
}

///|
fn yy_state_10(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_765)
}

///|
fn yy_state_11(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_764)
}

///|
fn yy_state_12(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_763)
}

///|
fn yy_state_13(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_762)
}

///|
fn yy_state_14(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_constant, yy_action_761)
}

///|
fn yy_state_15(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_atomic_expr, yy_action_760)
}

///|
fn yy_state_16(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_atomic_expr, yy_action_759)
}

///|
fn yy_state_17(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_atomic_expr, yy_action_758)
}

///|
fn yy_state_18(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_qual_ident_ty => Shift(yy_state_19)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    _ => Error
  }
}

///|
fn yy_state_19(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_type_name, yy_action_757)
}

///|
fn yy_state_20(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_21)
    T_DOT_LIDENT => Shift(yy_state_22)
    _ => Error
  }
}

///|
fn yy_state_21(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_qual_ident_ty, yy_action_756)
}

///|
fn yy_state_22(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_qual_ident_ty, yy_action_755)
}

///|
fn yy_state_23(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_qual_ident_ty, yy_action_754)
}

///|
fn yy_state_24(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_type_name, yy_action_753)
}

///|
fn yy_state_25(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_752)
}

///|
fn yy_state_26(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_spreadable_elem => Shift(yy_state_27)
    NT_non_empty_list_commas_rev_spreadable_elem_ => Shift(yy_state_28)
    T_DOTDOT => Shift(yy_state_32)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_780)
    NT_non_empty_list_commas_spreadable_elem_ => Shift(yy_state_781)
    NT_list_commas_spreadable_elem_ => Shift(yy_state_782)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACKET => Reduce(0, NT_list_commas_spreadable_elem_, yy_action_751)
    _ => Error
  }
}

///|
fn yy_state_27(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_spreadable_elem_,
    yy_action_750,
  )
}

///|
fn yy_state_28(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_29)
    T_COMMA => Shift(yy_state_30)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_29(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_spreadable_elem_, yy_action_748)
}

///|
fn yy_state_30(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_spreadable_elem => Shift(yy_state_31)
    T_DOTDOT => Shift(yy_state_32)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_780)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_31(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_spreadable_elem_,
    yy_action_746,
  )
}

///|
fn yy_state_32(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_expr => Shift(yy_state_33)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_33(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_spreadable_elem, yy_action_745)
}

///|
fn yy_state_34(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_744)
}

///|
fn yy_state_35(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_743)
}

///|
fn yy_state_36(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_742)
}

///|
fn yy_state_37(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_741)
}

///|
fn yy_state_38(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_map_expr_elem => Shift(yy_state_39)
    NT_non_empty_list_commas_rev_map_expr_elem_ => Shift(yy_state_40)
    NT_map_syntax_key => Shift(yy_state_44)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    NT_statement => Shift(yy_state_276)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_PLUS => Shift(yy_state_321)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_534)
    T_RETURN => Shift(yy_state_535)
    T_CONTINUE => Shift(yy_state_538)
    T_BREAK => Shift(yy_state_547)
    T_GUARD => Shift(yy_state_672)
    NT_expr_statement => Shift(yy_state_676)
    T_DEFER => Shift(yy_state_677)
    NT_guard_statement => Shift(yy_state_679)
    NT_fn_header => Shift(yy_state_680)
    T_ASYNC => Shift(yy_state_683)
    T_LETREC => Shift(yy_state_694)
    T_LET => Shift(yy_state_720)
    T_FN => Shift(yy_state_736)
    NT_non_empty_list_commas_map_expr_elem_ => Shift(yy_state_752)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_753)
    NT_simple_constant => Shift(yy_state_755)
    NT_list_commas_map_expr_elem_ => Shift(yy_state_756)
    NT_none_empty_list_semis_rev_with_trailing_info_statement_ =>
      Shift(yy_state_758)
    T_DOTDOT => Shift(yy_state_760)
    NT_record_defn => Shift(yy_state_766)
    T_MINUS => Shift(yy_state_768)
    T_LIDENT => Shift(yy_state_772)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACE => Reduce(0, NT_list_commas_map_expr_elem_, yy_action_740)
    _ => Error
  }
}

///|
fn yy_state_39(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_map_expr_elem_,
    yy_action_739,
  )
}

///|
fn yy_state_40(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_41)
    T_COMMA => Shift(yy_state_42)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_41(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_map_expr_elem_, yy_action_738)
}

///|
fn yy_state_42(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    NT_map_expr_elem => Shift(yy_state_43)
    NT_map_syntax_key => Shift(yy_state_44)
    T_MINUS => Shift(yy_state_229)
    NT_simple_constant => Shift(yy_state_233)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_43(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_map_expr_elem_,
    yy_action_737,
  )
}

///|
fn yy_state_44(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_45)
    _ => Error
  }
}

///|
fn yy_state_45(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_expr => Shift(yy_state_46)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_46(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_map_expr_elem, yy_action_736)
}

///|
fn yy_state_47(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_multi_pattern_case => Shift(yy_state_48)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_52)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_205)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_259)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_264)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_750)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_735)
    _ => Error
  }
}

///|
fn yy_state_48(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_SEMI_ => Shift(yy_state_49)
    T_SEMI => Shift(yy_state_50)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_49(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_semis_multi_pattern_case_,
    yy_action_733,
  )
}

///|
fn yy_state_50(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_multi_pattern_case => Shift(yy_state_48)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_51)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_52)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_205)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_259)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_732)
    _ => Error
  }
}

///|
fn yy_state_51(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_semis_multi_pattern_case_,
    yy_action_731,
  )
}

///|
fn yy_state_52(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_53)
    NT_option_COMMA_ => Shift(yy_state_258)
    T_RPAREN | T_IF | T_FAT_ARROW => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_53(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_257)
    T_RPAREN | T_IF | T_FAT_ARROW => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_54(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    NT_map_syntax_key => Shift(yy_state_55)
    NT_fields_pat_single => Shift(yy_state_221)
    NT_non_empty_list_commas_rev_map_elem_pat_ => Shift(yy_state_222)
    T_MINUS => Shift(yy_state_229)
    NT_simple_constant => Shift(yy_state_233)
    NT_non_empty_list_commas_rev_fields_pat_single_ => Shift(yy_state_234)
    T_LIDENT => Shift(yy_state_238)
    NT_non_empty_list_commas_with_tail_map_elem_pat_ => Shift(yy_state_241)
    NT_non_empty_list_commas_map_elem_pat_ => Shift(yy_state_244)
    NT_non_empty_list_commas_with_tail_fields_pat_single_ => Shift(yy_state_245)
    NT_non_empty_list_commas_fields_pat_single_ => Shift(yy_state_248)
    NT_non_empty_map_elems_pat => Shift(yy_state_249)
    NT_non_empty_fields_pat => Shift(yy_state_251)
    T_DOTDOT => Shift(yy_state_253)
    T_RBRACE => Shift(yy_state_256)
    _ => Error
  }
}

///|
fn yy_state_55(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_QUESTION_ => Shift(yy_state_56)
    T_QUESTION => Shift(yy_state_220)
    T_COLON => Reduce(0, NT_option_QUESTION_, yy_action_730)
    _ => Error
  }
}

///|
fn yy_state_56(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_57)
    _ => Error
  }
}

///|
fn yy_state_57(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_219)
    _ => Error
  }
}

///|
fn yy_state_58(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    NT_dotdot_binder => Shift(yy_state_59)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_207)
    NT_array_sub_pattern => Shift(yy_state_209)
    T_DOTDOT => Shift(yy_state_212)
    NT_array_sub_patterns => Shift(yy_state_217)
    T_RBRACKET => Reduce(0, NT_array_sub_patterns, yy_action_729)
    _ => Error
  }
}

///|
fn yy_state_59(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_60)
    T_RBRACKET => Reduce(1, NT_array_sub_patterns, yy_action_728)
    _ => Error
  }
}

///|
fn yy_state_60(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    NT_array_sub_pattern => Shift(yy_state_61)
    NT_non_empty_list_commas_rev_array_sub_pattern_ => Shift(yy_state_62)
    T_DOTDOT => Shift(yy_state_66)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_207)
    NT_non_empty_list_commas_array_sub_pattern_ => Shift(yy_state_208)
    T_RBRACKET => Reduce(2, NT_array_sub_patterns, yy_action_727)
    _ => Error
  }
}

///|
fn yy_state_61(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_array_sub_pattern_,
    yy_action_726,
  )
}

///|
fn yy_state_62(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_63)
    T_COMMA => Shift(yy_state_64)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_63(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_array_sub_pattern_,
    yy_action_725,
  )
}

///|
fn yy_state_64(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    NT_array_sub_pattern => Shift(yy_state_65)
    T_DOTDOT => Shift(yy_state_66)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_207)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_65(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_array_sub_pattern_,
    yy_action_724,
  )
}

///|
fn yy_state_66(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_67)
    T_UIDENT => Shift(yy_state_69)
    T_BYTES => Shift(yy_state_70)
    T_STRING => Shift(yy_state_71)
    _ => Error
  }
}

///|
fn yy_state_67(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_68)
    _ => Error
  }
}

///|
fn yy_state_68(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_array_sub_pattern, yy_action_723)
}

///|
fn yy_state_69(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_array_sub_pattern, yy_action_722)
}

///|
fn yy_state_70(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_array_sub_pattern, yy_action_721)
}

///|
fn yy_state_71(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_array_sub_pattern, yy_action_720)
}

///|
fn yy_state_72(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_129)
    _ => Error
  }
}

///|
fn yy_state_73(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_74)
    NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__ =>
      Shift(yy_state_128)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_IF
    | T_FAT_ARROW
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_AND =>
      Reduce(
        0,
        NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__,
        yy_action_719,
      )
    _ => Error
  }
}

///|
fn yy_state_74(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    NT_constr_pat_arguments => Shift(yy_state_75)
    T_POST_LABEL => Shift(yy_state_77)
    T_DOTDOT => Shift(yy_state_78)
    NT_constr_pat_argument => Shift(yy_state_81)
    T_LIDENT => Shift(yy_state_84)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_120)
    _ => Error
  }
}

///|
fn yy_state_75(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_76)
    _ => Error
  }
}

///|
fn yy_state_76(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_option_delimited_LPAREN_constr_pat_arguments_RPAREN__,
    yy_action_717,
  )
}

///|
fn yy_state_77(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_constr_pat_argument, yy_action_716)
}

///|
fn yy_state_78(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_79)
    NT_option_COMMA_ => Shift(yy_state_80)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_79(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_COMMA_, yy_action_747)
}

///|
fn yy_state_80(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_constr_pat_arguments, yy_action_715)
}

///|
fn yy_state_81(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_82)
    NT_option_COMMA_ => Shift(yy_state_127)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_82(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_POST_LABEL => Shift(yy_state_77)
    T_DOTDOT => Shift(yy_state_78)
    NT_constr_pat_argument => Shift(yy_state_81)
    NT_constr_pat_arguments => Shift(yy_state_83)
    T_LIDENT => Shift(yy_state_84)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_120)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_83(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_constr_pat_arguments, yy_action_714)
}

///|
fn yy_state_84(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_85)
    T_LPAREN => Shift(yy_state_87)
    T_RPAREN | T_COMMA | T_BAR | T_AS | T_RANGE_INCLUSIVE | T_RANGE_EXCLUSIVE =>
      Reduce(1, NT_simple_pattern, yy_action_713)
    _ => Error
  }
}

///|
fn yy_state_85(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_126)
    _ => Error
  }
}

///|
fn yy_state_86(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_87)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_IF
    | T_FAT_ARROW
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_AND => Reduce(1, NT_simple_pattern, yy_action_713)
    _ => Error
  }
}

///|
fn yy_state_87(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_POST_LABEL => Shift(yy_state_77)
    T_LIDENT => Shift(yy_state_84)
    NT_constr_pat_argument => Shift(yy_state_88)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_120)
    NT_constr_pat_arguments_no_open => Shift(yy_state_124)
    _ => Error
  }
}

///|
fn yy_state_88(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_89)
    NT_option_COMMA_ => Shift(yy_state_123)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_89(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_POST_LABEL => Shift(yy_state_77)
    T_LIDENT => Shift(yy_state_84)
    NT_constr_pat_argument => Shift(yy_state_88)
    NT_constr_pat_arguments_no_open => Shift(yy_state_90)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_120)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_90(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_constr_pat_arguments_no_open, yy_action_712)
}

///|
fn yy_state_91(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_711)
}

///|
fn yy_state_92(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_710)
}

///|
fn yy_state_93(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_709)
}

///|
fn yy_state_94(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FLOAT => Shift(yy_state_95)
    T_DOUBLE => Shift(yy_state_96)
    T_INT => Shift(yy_state_97)
    _ => Error
  }
}

///|
fn yy_state_95(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_708)
}

///|
fn yy_state_96(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_707)
}

///|
fn yy_state_97(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_706)
}

///|
fn yy_state_98(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_705)
}

///|
fn yy_state_99(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_704)
}

///|
fn yy_state_100(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_703)
}

///|
fn yy_state_101(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_702)
}

///|
fn yy_state_102(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_701)
}

///|
fn yy_state_103(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_700)
}

///|
fn yy_state_104(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_pattern, yy_action_699)
}

///|
fn yy_state_105(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RANGE_INCLUSIVE => Shift(yy_state_106)
    T_RANGE_EXCLUSIVE => Shift(yy_state_114)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_IF
    | T_FAT_ARROW
    | T_AND => Reduce(1, NT_range_pattern, yy_action_698)
    _ => Error
  }
}

///|
fn yy_state_106(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_107)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    _ => Error
  }
}

///|
fn yy_state_107(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_pattern, yy_action_697)
}

///|
fn yy_state_108(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_109)
    _ => Error
  }
}

///|
fn yy_state_109(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_110)
    _ => Error
  }
}

///|
fn yy_state_110(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_constr, yy_action_696)
}

///|
fn yy_state_111(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LIDENT => Shift(yy_state_22)
    T_DOT_UIDENT => Shift(yy_state_112)
    _ => Error
  }
}

///|
fn yy_state_112(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Reduce(2, NT_qual_ident_ty, yy_action_756)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_EQUAL
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_IF
    | T_FAT_ARROW
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_constr, yy_action_695)
    _ => Error
  }
}

///|
fn yy_state_113(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Reduce(1, NT_qual_ident_ty, yy_action_754)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_EQUAL
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_IF
    | T_FAT_ARROW
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_constr, yy_action_694)
    _ => Error
  }
}

///|
fn yy_state_114(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_simple_pattern => Shift(yy_state_115)
    _ => Error
  }
}

///|
fn yy_state_115(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_pattern, yy_action_693)
}

///|
fn yy_state_116(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BAR => Shift(yy_state_117)
    T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_RBRACKET
    | T_RBRACE
    | T_AS
    | T_IF
    | T_FAT_ARROW => Reduce(1, NT_or_pattern, yy_action_692)
    _ => Error
  }
}

///|
fn yy_state_117(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_118)
    _ => Error
  }
}

///|
fn yy_state_118(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_or_pattern, yy_action_691)
}

///|
fn yy_state_119(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_pattern, yy_action_690)
}

///|
fn yy_state_120(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_RPAREN | T_COMMA => Reduce(1, NT_constr_pat_argument, yy_action_689)
    _ => Error
  }
}

///|
fn yy_state_121(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_122)
    _ => Error
  }
}

///|
fn yy_state_122(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_pattern, yy_action_688)
}

///|
fn yy_state_123(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_constr_pat_arguments_no_open, yy_action_687)
}

///|
fn yy_state_124(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_125)
    _ => Error
  }
}

///|
fn yy_state_125(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_pattern, yy_action_685)
}

///|
fn yy_state_126(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_RPAREN | T_COMMA => Reduce(3, NT_constr_pat_argument, yy_action_684)
    _ => Error
  }
}

///|
fn yy_state_127(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_constr_pat_arguments, yy_action_683)
}

///|
fn yy_state_128(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_682)
}

///|
fn yy_state_129(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_COLON => Shift(yy_state_130)
    T_COMMA => Shift(yy_state_202)
    T_RPAREN => Shift(yy_state_206)
    _ => Error
  }
}

///|
fn yy_state_130(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_200)
    _ => Error
  }
}

///|
fn yy_state_131(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_132)
    _ => Error
  }
}

///|
fn yy_state_132(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_RPAREN => Shift(yy_state_133)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_188)
    _ => Error
  }
}

///|
fn yy_state_133(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_134)
    _ => Error
  }
}

///|
fn yy_state_134(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    NT_return_type => Shift(yy_state_135)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    _ => Error
  }
}

///|
fn yy_state_135(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_, yy_action_681)
}

///|
fn yy_state_136(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_type, yy_action_680)
}

///|
fn yy_state_137(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_138)
    _ => Error
  }
}

///|
fn yy_state_138(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_type, yy_action_679)
}

///|
fn yy_state_139(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_140)
    T_DOT_LIDENT => Shift(yy_state_184)
    _ => Error
  }
}

///|
fn yy_state_140(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_141)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_RAISE
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_QUESTION
    | T_EXCLAMATION
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS
    | T_NORAISE => Reduce(2, NT_simple_type, yy_action_677)
    _ => Error
  }
}

///|
fn yy_state_141(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_142)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_143)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_non_empty_list_commas_type__ => Shift(yy_state_182)
    _ => Error
  }
}

///|
fn yy_state_142(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_type__, yy_action_676)
}

///|
fn yy_state_143(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_144)
    NT_option_COMMA_ => Shift(yy_state_181)
    T_RPAREN | T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_144(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_145)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    T_RPAREN | T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_145(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_type__, yy_action_675)
}

///|
fn yy_state_146(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_147)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_RAISE
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_QUESTION
    | T_EXCLAMATION
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS
    | T_NORAISE => Reduce(1, NT_simple_type, yy_action_674)
    _ => Error
  }
}

///|
fn yy_state_147(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_142)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_143)
    T_UIDENT => Shift(yy_state_146)
    NT_non_empty_list_commas_type__ => Shift(yy_state_148)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    _ => Error
  }
}

///|
fn yy_state_148(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_149)
    _ => Error
  }
}

///|
fn yy_state_149(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_type, yy_action_670)
}

///|
fn yy_state_150(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    T_RPAREN => Shift(yy_state_151)
    NT_type_ => Shift(yy_state_167)
    NT_simple_type => Shift(yy_state_179)
    _ => Error
  }
}

///|
fn yy_state_151(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_152)
    _ => Error
  }
}

///|
fn yy_state_152(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_return_type => Shift(yy_state_153)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    _ => Error
  }
}

///|
fn yy_state_153(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_, yy_action_669)
}

///|
fn yy_state_154(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_error_annotation => Shift(yy_state_155)
    T_QUESTION => Shift(yy_state_156)
    T_EXCLAMATION => Shift(yy_state_160)
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS => Reduce(1, NT_type_, yy_action_668)
    _ => Error
  }
}

///|
fn yy_state_155(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_return_type, yy_action_667)
}

///|
fn yy_state_156(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    T_UNDERSCORE => Shift(yy_state_157)
    NT_qual_ident_ty => Shift(yy_state_158)
    NT_error_type => Shift(yy_state_159)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_RAISE
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_QUESTION
    | T_EXCLAMATION
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS
    | T_NORAISE => Reduce(2, NT_simple_type, yy_action_666)
    _ => Error
  }
}

///|
fn yy_state_157(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_error_type, yy_action_665)
}

///|
fn yy_state_158(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_error_type, yy_action_664)
}

///|
fn yy_state_159(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_return_type, yy_action_663)
}

///|
fn yy_state_160(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    T_UNDERSCORE => Shift(yy_state_157)
    NT_qual_ident_ty => Shift(yy_state_158)
    NT_error_type => Shift(yy_state_161)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS => Reduce(2, NT_return_type, yy_action_662)
    _ => Error
  }
}

///|
fn yy_state_161(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_return_type, yy_action_661)
}

///|
fn yy_state_162(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_error_annotation, yy_action_660)
}

///|
fn yy_state_163(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    T_UNDERSCORE => Shift(yy_state_157)
    NT_qual_ident_ty => Shift(yy_state_158)
    T_QUESTION => Shift(yy_state_164)
    NT_error_type => Shift(yy_state_165)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS => Reduce(1, NT_error_annotation, yy_action_659)
    _ => Error
  }
}

///|
fn yy_state_164(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_error_annotation, yy_action_658)
}

///|
fn yy_state_165(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_error_annotation, yy_action_657)
}

///|
fn yy_state_166(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_return_type, yy_action_656)
}

///|
fn yy_state_167(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_168)
    T_COMMA => Shift(yy_state_171)
    _ => Error
  }
}

///|
fn yy_state_168(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_169)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_RAISE
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_QUESTION
    | T_EXCLAMATION
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS
    | T_NORAISE => Reduce(3, NT_simple_type, yy_action_655)
    _ => Error
  }
}

///|
fn yy_state_169(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    NT_return_type => Shift(yy_state_170)
    _ => Error
  }
}

///|
fn yy_state_170(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_, yy_action_654)
}

///|
fn yy_state_171(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_142)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_143)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    T_RPAREN => Shift(yy_state_172)
    NT_non_empty_list_commas_type__ => Shift(yy_state_175)
    NT_simple_type => Shift(yy_state_179)
    _ => Error
  }
}

///|
fn yy_state_172(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_173)
    _ => Error
  }
}

///|
fn yy_state_173(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    NT_return_type => Shift(yy_state_174)
    _ => Error
  }
}

///|
fn yy_state_174(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_, yy_action_653)
}

///|
fn yy_state_175(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_176)
    _ => Error
  }
}

///|
fn yy_state_176(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_177)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_RAISE
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_QUESTION
    | T_EXCLAMATION
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS
    | T_NORAISE => Reduce(5, NT_simple_type, yy_action_652)
    _ => Error
  }
}

///|
fn yy_state_177(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    NT_return_type => Shift(yy_state_178)
    _ => Error
  }
}

///|
fn yy_state_178(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_type_, yy_action_651)
}

///|
fn yy_state_179(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_180)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_SEMI
    | T_RBRACKET
    | T_RBRACE
    | T_AS => Reduce(1, NT_type_, yy_action_668)
    _ => Error
  }
}

///|
fn yy_state_180(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_type, yy_action_666)
}

///|
fn yy_state_181(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_type__, yy_action_650)
}

///|
fn yy_state_182(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_183)
    _ => Error
  }
}

///|
fn yy_state_183(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_type, yy_action_648)
}

///|
fn yy_state_184(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_185)
    T_EOF
    | T_DERIVE
    | T_WITH
    | T_RAISE
    | T_EQUAL
    | T_RPAREN
    | T_COMMA
    | T_QUESTION
    | T_EXCLAMATION
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AS
    | T_NORAISE => Reduce(2, NT_simple_type, yy_action_646)
    _ => Error
  }
}

///|
fn yy_state_185(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_142)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_143)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_non_empty_list_commas_type__ => Shift(yy_state_186)
    _ => Error
  }
}

///|
fn yy_state_186(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_187)
    _ => Error
  }
}

///|
fn yy_state_187(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_type, yy_action_643)
}

///|
fn yy_state_188(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_189)
    T_COMMA => Shift(yy_state_192)
    _ => Error
  }
}

///|
fn yy_state_189(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_190)
    _ => Error
  }
}

///|
fn yy_state_190(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    NT_return_type => Shift(yy_state_191)
    _ => Error
  }
}

///|
fn yy_state_191(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_, yy_action_642)
}

///|
fn yy_state_192(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_142)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_143)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_non_empty_list_commas_type__ => Shift(yy_state_193)
    T_RPAREN => Shift(yy_state_197)
    _ => Error
  }
}

///|
fn yy_state_193(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_194)
    _ => Error
  }
}

///|
fn yy_state_194(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_195)
    _ => Error
  }
}

///|
fn yy_state_195(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    NT_return_type => Shift(yy_state_196)
    _ => Error
  }
}

///|
fn yy_state_196(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_type_, yy_action_640)
}

///|
fn yy_state_197(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_THIN_ARROW => Shift(yy_state_198)
    _ => Error
  }
}

///|
fn yy_state_198(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    NT_return_type => Shift(yy_state_199)
    _ => Error
  }
}

///|
fn yy_state_199(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_type_, yy_action_638)
}

///|
fn yy_state_200(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_201)
    _ => Error
  }
}

///|
fn yy_state_201(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_pattern, yy_action_637)
}

///|
fn yy_state_202(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_52)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_203)
    NT_pattern => Shift(yy_state_205)
    _ => Error
  }
}

///|
fn yy_state_203(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_204)
    _ => Error
  }
}

///|
fn yy_state_204(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_pattern, yy_action_636)
}

///|
fn yy_state_205(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_RPAREN | T_COMMA | T_IF | T_FAT_ARROW =>
      Reduce(1, NT_non_empty_list_commas_rev_pattern_, yy_action_635)
    _ => Error
  }
}

///|
fn yy_state_206(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_634)
}

///|
fn yy_state_207(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_COMMA | T_RBRACKET => Reduce(1, NT_array_sub_pattern, yy_action_633)
    _ => Error
  }
}

///|
fn yy_state_208(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_array_sub_patterns, yy_action_632)
}

///|
fn yy_state_209(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_210)
    T_RBRACKET => Reduce(1, NT_array_sub_patterns, yy_action_631)
    _ => Error
  }
}

///|
fn yy_state_210(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    NT_dotdot_binder => Shift(yy_state_59)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_207)
    NT_array_sub_pattern => Shift(yy_state_209)
    NT_array_sub_patterns => Shift(yy_state_211)
    T_DOTDOT => Shift(yy_state_212)
    T_RBRACKET => Reduce(0, NT_array_sub_patterns, yy_action_729)
    _ => Error
  }
}

///|
fn yy_state_211(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_array_sub_patterns, yy_action_630)
}

///|
fn yy_state_212(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_67)
    T_UIDENT => Shift(yy_state_69)
    T_BYTES => Shift(yy_state_70)
    T_STRING => Shift(yy_state_71)
    T_AS => Shift(yy_state_213)
    T_UNDERSCORE => Shift(yy_state_215)
    T_LIDENT => Shift(yy_state_216)
    T_COMMA | T_RBRACKET => Reduce(1, NT_dotdot_binder, yy_action_629)
    _ => Error
  }
}

///|
fn yy_state_213(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_214)
    _ => Error
  }
}

///|
fn yy_state_214(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_dotdot_binder, yy_action_628)
}

///|
fn yy_state_215(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_dotdot_binder, yy_action_627)
}

///|
fn yy_state_216(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_dotdot_binder, yy_action_626)
}

///|
fn yy_state_217(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_218)
    _ => Error
  }
}

///|
fn yy_state_218(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_625)
}

///|
fn yy_state_219(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_COMMA | T_RBRACE =>
      Reduce(4, NT_non_empty_list_commas_rev_map_elem_pat_, yy_action_624)
    _ => Error
  }
}

///|
fn yy_state_220(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_QUESTION_, yy_action_623)
}

///|
fn yy_state_221(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_fields_pat_single_,
    yy_action_622,
  )
}

///|
fn yy_state_222(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_223)
    T_COMMA => Shift(yy_state_224)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_223(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_map_elem_pat_, yy_action_621)
}

///|
fn yy_state_224(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    NT_map_syntax_key => Shift(yy_state_225)
    T_MINUS => Shift(yy_state_229)
    NT_simple_constant => Shift(yy_state_233)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_747)
    T_DOTDOT =>
      Reduce(2, NT_non_empty_list_commas_with_tail_map_elem_pat_, yy_action_620)
    _ => Error
  }
}

///|
fn yy_state_225(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_220)
    NT_option_QUESTION_ => Shift(yy_state_226)
    T_COLON => Reduce(0, NT_option_QUESTION_, yy_action_730)
    _ => Error
  }
}

///|
fn yy_state_226(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_227)
    _ => Error
  }
}

///|
fn yy_state_227(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_228)
    _ => Error
  }
}

///|
fn yy_state_228(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_COMMA | T_RBRACE =>
      Reduce(6, NT_non_empty_list_commas_rev_map_elem_pat_, yy_action_618)
    _ => Error
  }
}

///|
fn yy_state_229(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FLOAT => Shift(yy_state_230)
    T_DOUBLE => Shift(yy_state_231)
    T_INT => Shift(yy_state_232)
    _ => Error
  }
}

///|
fn yy_state_230(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_map_syntax_key, yy_action_617)
}

///|
fn yy_state_231(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_map_syntax_key, yy_action_616)
}

///|
fn yy_state_232(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_map_syntax_key, yy_action_615)
}

///|
fn yy_state_233(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_map_syntax_key, yy_action_614)
}

///|
fn yy_state_234(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_235)
    T_COMMA => Shift(yy_state_236)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_235(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_fields_pat_single_,
    yy_action_613,
  )
}

///|
fn yy_state_236(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fields_pat_single => Shift(yy_state_237)
    T_LIDENT => Shift(yy_state_238)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_747)
    T_DOTDOT =>
      Reduce(
        2,
        NT_non_empty_list_commas_with_tail_fields_pat_single_,
        yy_action_612,
      )
    _ => Error
  }
}

///|
fn yy_state_237(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_fields_pat_single_,
    yy_action_611,
  )
}

///|
fn yy_state_238(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_239)
    T_COMMA | T_RBRACE => Reduce(1, NT_fields_pat_single, yy_action_609)
    _ => Error
  }
}

///|
fn yy_state_239(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_240)
    _ => Error
  }
}

///|
fn yy_state_240(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_COMMA | T_RBRACE => Reduce(3, NT_fields_pat_single, yy_action_607)
    _ => Error
  }
}

///|
fn yy_state_241(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOTDOT => Shift(yy_state_242)
    _ => Error
  }
}

///|
fn yy_state_242(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_79)
    NT_option_COMMA_ => Shift(yy_state_243)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_243(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_map_elems_pat, yy_action_606)
}

///|
fn yy_state_244(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_map_elems_pat, yy_action_605)
}

///|
fn yy_state_245(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOTDOT => Shift(yy_state_246)
    _ => Error
  }
}

///|
fn yy_state_246(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_79)
    NT_option_COMMA_ => Shift(yy_state_247)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_247(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_fields_pat, yy_action_604)
}

///|
fn yy_state_248(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_fields_pat, yy_action_603)
}

///|
fn yy_state_249(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_250)
    _ => Error
  }
}

///|
fn yy_state_250(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_602)
}

///|
fn yy_state_251(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_252)
    _ => Error
  }
}

///|
fn yy_state_252(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_pattern, yy_action_601)
}

///|
fn yy_state_253(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_79)
    NT_option_COMMA_ => Shift(yy_state_254)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_254(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_255)
    _ => Error
  }
}

///|
fn yy_state_255(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_pattern, yy_action_600)
}

///|
fn yy_state_256(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_pattern, yy_action_599)
}

///|
fn yy_state_257(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_RPAREN | T_COMMA | T_IF | T_FAT_ARROW =>
      Reduce(3, NT_non_empty_list_commas_rev_pattern_, yy_action_598)
    _ => Error
  }
}

///|
fn yy_state_258(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_pattern_, yy_action_597)
}

///|
fn yy_state_259(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_IF => Shift(yy_state_260)
    NT_option_preceded_IF_infix_expr__ => Shift(yy_state_747)
    T_FAT_ARROW => Reduce(0, NT_option_preceded_IF_infix_expr__, yy_action_596)
    _ => Error
  }
}

///|
fn yy_state_260(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_746)
    _ => Error
  }
}

///|
fn yy_state_261(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_simple_expr, yy_action_595)
}

///|
fn yy_state_262(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_263)
    T_FN => Shift(yy_state_267)
    _ => Error
  }
}

///|
fn yy_state_263(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_multi_pattern_case => Shift(yy_state_48)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_52)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_205)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_259)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_264)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_265)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_735)
    _ => Error
  }
}

///|
fn yy_state_264(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_multi_pattern_case_, yy_action_594)
}

///|
fn yy_state_265(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_266)
    _ => Error
  }
}

///|
fn yy_state_266(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_anony_fn, yy_action_593)
}

///|
fn yy_state_267(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_268)
    T_EXCLAMATION => Shift(yy_state_629)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_268(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameters => Shift(yy_state_269)
    T_LBRACE => Shift(yy_state_328)
    T_LPAREN => Shift(yy_state_329)
    _ => Error
  }
}

///|
fn yy_state_269(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_273)
    T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_270(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_func_return_type, yy_action_590)
}

///|
fn yy_state_271(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_154)
    NT_type_ => Shift(yy_state_166)
    NT_return_type => Shift(yy_state_272)
    _ => Error
  }
}

///|
fn yy_state_272(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_return_type, yy_action_589)
}

///|
fn yy_state_273(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_block_expr => Shift(yy_state_274)
    T_LBRACE => Shift(yy_state_275)
    _ => Error
  }
}

///|
fn yy_state_274(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_anony_fn, yy_action_588)
}

///|
fn yy_state_275(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    NT_statement => Shift(yy_state_276)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_277)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_534)
    T_RETURN => Shift(yy_state_535)
    T_CONTINUE => Shift(yy_state_538)
    T_BREAK => Shift(yy_state_547)
    T_GUARD => Shift(yy_state_672)
    NT_expr_statement => Shift(yy_state_676)
    T_DEFER => Shift(yy_state_677)
    NT_guard_statement => Shift(yy_state_679)
    NT_fn_header => Shift(yy_state_680)
    T_ASYNC => Shift(yy_state_683)
    T_LETREC => Shift(yy_state_694)
    T_LET => Shift(yy_state_720)
    T_FN => Shift(yy_state_736)
    NT_non_empty_list_semis_rev_statement_ => Shift(yy_state_743)
    NT_list_semis_rev_statement_ => Shift(yy_state_744)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACE => Reduce(0, NT_list_semis_rev_statement_, yy_action_587)
    _ => Error
  }
}

///|
fn yy_state_276(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_semi_rev_aux_statement_, yy_action_586)
}

///|
fn yy_state_277(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_278)
    NT_option_SEMI_ => Shift(yy_state_742)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_278(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    NT_statement => Shift(yy_state_279)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_534)
    T_RETURN => Shift(yy_state_535)
    T_CONTINUE => Shift(yy_state_538)
    T_BREAK => Shift(yy_state_547)
    T_GUARD => Shift(yy_state_672)
    NT_expr_statement => Shift(yy_state_676)
    T_DEFER => Shift(yy_state_677)
    NT_guard_statement => Shift(yy_state_679)
    NT_fn_header => Shift(yy_state_680)
    T_ASYNC => Shift(yy_state_683)
    T_LETREC => Shift(yy_state_694)
    T_LET => Shift(yy_state_720)
    T_FN => Shift(yy_state_736)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_732)
    _ => Error
  }
}

///|
fn yy_state_279(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semi_rev_aux_statement_, yy_action_585)
}

///|
fn yy_state_280(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_281)
    _ => Error
  }
}

///|
fn yy_state_281(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_110)
    T_LIDENT => Shift(yy_state_282)
    T_LBRACE => Shift(yy_state_283)
    _ => Error
  }
}

///|
fn yy_state_282(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_584)
}

///|
fn yy_state_283(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_284)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_285)
    T_LIDENT => Shift(yy_state_289)
    NT_non_empty_list_commas_with_trailing_info_record_defn_single_ =>
      Shift(yy_state_660)
    T_DOTDOT => Shift(yy_state_661)
    NT_list_commas_with_trailing_info_record_defn_single_ => Shift(yy_state_670)
    T_RBRACE =>
      Reduce(
        0,
        NT_list_commas_with_trailing_info_record_defn_single_,
        yy_action_583,
      )
    _ => Error
  }
}

///|
fn yy_state_284(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_record_defn_single_,
    yy_action_582,
  )
}

///|
fn yy_state_285(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_286)
    T_COMMA => Shift(yy_state_287)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_286(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_with_trailing_info_record_defn_single_,
    yy_action_581,
  )
}

///|
fn yy_state_287(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_288)
    T_LIDENT => Shift(yy_state_289)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_288(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_record_defn_single_,
    yy_action_580,
  )
}

///|
fn yy_state_289(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_290)
    T_COMMA | T_RBRACE => Reduce(1, NT_record_defn_single, yy_action_579)
    _ => Error
  }
}

///|
fn yy_state_290(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_expr => Shift(yy_state_291)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_291(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_record_defn_single, yy_action_578)
}

///|
fn yy_state_292(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_INT => Shift(yy_state_293)
    T_DOTDOT => Shift(yy_state_294)
    T_QUESTION => Shift(yy_state_381)
    T_EXCLAMATION => Shift(yy_state_578)
    T_LPAREN => Shift(yy_state_582)
    T_DOT_LIDENT => Shift(yy_state_656)
    T_LBRACKET => Shift(yy_state_657)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_prefix_expr, yy_action_577)
    _ => Error
  }
}

///|
fn yy_state_293(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_simple_expr, yy_action_576)
}

///|
fn yy_state_294(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_295)
    _ => Error
  }
}

///|
fn yy_state_295(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_296)
    T_EXCLAMATION => Shift(yy_state_649)
    T_LPAREN => Shift(yy_state_653)
    _ => Error
  }
}

///|
fn yy_state_296(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_297)
    _ => Error
  }
}

///|
fn yy_state_297(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_647)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_298(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_argument_, yy_action_574)
}

///|
fn yy_state_299(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_300)
    T_COMMA => Shift(yy_state_301)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_300(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_argument_, yy_action_573)
}

///|
fn yy_state_301(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_302)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_302(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_argument_, yy_action_572)
}

///|
fn yy_state_303(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_argument, yy_action_571)
}

///|
fn yy_state_304(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_prefix_expr => Shift(yy_state_646)
    _ => Error
  }
}

///|
fn yy_state_305(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_RPAREN => Shift(yy_state_306)
    NT_non_empty_tuple_elems_with_prefix => Shift(yy_state_307)
    NT_arrow_fn_prefix_no_constraint => Shift(yy_state_308)
    NT_non_empty_tuple_elems => Shift(yy_state_309)
    NT_expr => Shift(yy_state_310)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_UNDERSCORE => Shift(yy_state_630)
    T_LIDENT => Shift(yy_state_642)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_306(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_tuple_expr, yy_action_570)
}

///|
fn yy_state_307(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_tuple_expr, yy_action_569)
}

///|
fn yy_state_308(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_tuple_expr, yy_action_568)
}

///|
fn yy_state_309(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_tuple_elems_with_prefix, yy_action_567)
}

///|
fn yy_state_310(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_311)
    T_COMMA => Shift(yy_state_314)
    T_RPAREN => Shift(yy_state_318)
    _ => Error
  }
}

///|
fn yy_state_311(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_312)
    _ => Error
  }
}

///|
fn yy_state_312(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_313)
    _ => Error
  }
}

///|
fn yy_state_313(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_tuple_expr, yy_action_566)
}

///|
fn yy_state_314(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    NT_non_empty_tuple_elems => Shift(yy_state_315)
    T_RPAREN => Shift(yy_state_316)
    NT_expr => Shift(yy_state_317)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_315(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_tuple_elems, yy_action_565)
}

///|
fn yy_state_316(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_tuple_elems, yy_action_564)
}

///|
fn yy_state_317(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_314)
    T_RPAREN => Shift(yy_state_318)
    _ => Error
  }
}

///|
fn yy_state_318(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_tuple_elems, yy_action_563)
}

///|
fn yy_state_319(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    NT_prefix_expr => Shift(yy_state_320)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    _ => Error
  }
}

///|
fn yy_state_320(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_prefix_expr, yy_action_560)
}

///|
fn yy_state_321(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    NT_prefix_expr => Shift(yy_state_322)
    T_FN => Shift(yy_state_323)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    _ => Error
  }
}

///|
fn yy_state_322(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_prefix_expr, yy_action_557)
}

///|
fn yy_state_323(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_324)
    T_EXCLAMATION => Shift(yy_state_629)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_324(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameters => Shift(yy_state_325)
    T_LBRACE => Shift(yy_state_328)
    T_LPAREN => Shift(yy_state_329)
    _ => Error
  }
}

///|
fn yy_state_325(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_326)
    T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_326(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_327)
    _ => Error
  }
}

///|
fn yy_state_327(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_anony_fn, yy_action_556)
}

///|
fn yy_state_328(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_fn_header_no_binder, yy_action_555)
}

///|
fn yy_state_329(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameter => Shift(yy_state_330)
    NT_non_empty_list_commas_rev_parameter_ => Shift(yy_state_331)
    T_POST_LABEL => Shift(yy_state_335)
    T_LIDENT => Shift(yy_state_613)
    T_UNDERSCORE => Shift(yy_state_623)
    NT_non_empty_list_commas_parameter_ => Shift(yy_state_626)
    NT_list_commas_parameter_ => Shift(yy_state_627)
    T_RPAREN => Reduce(0, NT_list_commas_parameter_, yy_action_554)
    _ => Error
  }
}

///|
fn yy_state_330(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_parameter_, yy_action_553)
}

///|
fn yy_state_331(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_332)
    T_COMMA => Shift(yy_state_333)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_332(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_parameter_, yy_action_552)
}

///|
fn yy_state_333(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_parameter => Shift(yy_state_334)
    T_POST_LABEL => Shift(yy_state_335)
    T_LIDENT => Shift(yy_state_613)
    T_UNDERSCORE => Shift(yy_state_623)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_334(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_parameter_, yy_action_551)
}

///|
fn yy_state_335(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_336)
    T_COLON => Shift(yy_state_609)
    T_RPAREN | T_COMMA => Reduce(1, NT_parameter, yy_action_549)
    _ => Error
  }
}

///|
fn yy_state_336(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_608)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_337(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RANGE_INCLUSIVE => Shift(yy_state_338)
    T_RANGE_EXCLUSIVE => Shift(yy_state_606)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_IS
    | T_AND => Reduce(1, NT_range_expr, yy_action_548)
    _ => Error
  }
}

///|
fn yy_state_338(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_339)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    _ => Error
  }
}

///|
fn yy_state_339(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_expr, yy_action_547)
}

///|
fn yy_state_340(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_112)
    T_DOT_LIDENT => Shift(yy_state_341)
    _ => Error
  }
}

///|
fn yy_state_341(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_qual_ident_simple_expr, yy_action_546)
    T_COLONCOLON => Reduce(2, NT_qual_ident_ty, yy_action_755)
    _ => Error
  }
}

///|
fn yy_state_342(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_343(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_344)
    _ => Error
  }
}

///|
fn yy_state_344(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_list_commas_argument_ => Shift(yy_state_346)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_345(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_argument_, yy_action_544)
}

///|
fn yy_state_346(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_347)
    _ => Error
  }
}

///|
fn yy_state_347(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_543)
}

///|
fn yy_state_348(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_IS => Shift(yy_state_349)
    T_AS => Shift(yy_state_351)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(1, NT_postfix_expr, yy_action_542)
    _ => Error
  }
}

///|
fn yy_state_349(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_350)
    _ => Error
  }
}

///|
fn yy_state_350(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_postfix_expr, yy_action_541)
}

///|
fn yy_state_351(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_type_name => Shift(yy_state_352)
    _ => Error
  }
}

///|
fn yy_state_352(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_postfix_expr, yy_action_540)
}

///|
fn yy_state_353(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_infix_expr, yy_action_539)
}

///|
fn yy_state_354(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_PIPE
    | T_AND => Reduce(1, NT_pipe_expr, yy_action_538)
    _ => Error
  }
}

///|
fn yy_state_355(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_356)
    _ => Error
  }
}

///|
fn yy_state_356(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_536)
    _ => Error
  }
}

///|
fn yy_state_357(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_358)
    _ => Error
  }
}

///|
fn yy_state_358(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_534)
    _ => Error
  }
}

///|
fn yy_state_359(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_360)
    _ => Error
  }
}

///|
fn yy_state_360(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_532)
    _ => Error
  }
}

///|
fn yy_state_361(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_362)
    _ => Error
  }
}

///|
fn yy_state_362(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_530)
    _ => Error
  }
}

///|
fn yy_state_363(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_364)
    _ => Error
  }
}

///|
fn yy_state_364(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_528)
    _ => Error
  }
}

///|
fn yy_state_365(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_366)
    _ => Error
  }
}

///|
fn yy_state_366(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_INFIX1
    | T_INFIX2
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_526)
    _ => Error
  }
}

///|
fn yy_state_367(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_368)
    _ => Error
  }
}

///|
fn yy_state_368(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_INFIX1
    | T_INFIX2
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_524)
    _ => Error
  }
}

///|
fn yy_state_369(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_370)
    _ => Error
  }
}

///|
fn yy_state_370(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_INFIX1
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_522)
    _ => Error
  }
}

///|
fn yy_state_371(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_372)
    _ => Error
  }
}

///|
fn yy_state_372(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_INFIX1
    | T_INFIX2
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_520)
    _ => Error
  }
}

///|
fn yy_state_373(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_374)
    _ => Error
  }
}

///|
fn yy_state_374(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX4 => Shift(yy_state_375)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_AND => Reduce(3, NT_infix_expr, yy_action_518)
    _ => Error
  }
}

///|
fn yy_state_375(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_376)
    _ => Error
  }
}

///|
fn yy_state_376(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_infix_expr, yy_action_516)
}

///|
fn yy_state_377(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_378)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_simple_expr, yy_action_595)
    _ => Error
  }
}

///|
fn yy_state_378(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_605)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_379(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_left_value, yy_action_514)
}

///|
fn yy_state_380(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOTDOT => Shift(yy_state_294)
    T_QUESTION => Shift(yy_state_381)
    T_EXCLAMATION => Shift(yy_state_578)
    T_LPAREN => Shift(yy_state_582)
    T_LBRACKET => Shift(yy_state_585)
    T_DOT_INT => Shift(yy_state_592)
    T_DOT_LIDENT => Shift(yy_state_593)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_COLON
    | T_SEMI
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_prefix_expr, yy_action_577)
    _ => Error
  }
}

///|
fn yy_state_381(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_382)
    _ => Error
  }
}

///|
fn yy_state_382(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_list_commas_argument_ => Shift(yy_state_383)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_383(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_384)
    _ => Error
  }
}

///|
fn yy_state_384(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_513)
}

///|
fn yy_state_385(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    NT_non_empty_tuple_elems_with_prefix => Shift(yy_state_307)
    NT_arrow_fn_prefix_no_constraint => Shift(yy_state_308)
    NT_non_empty_tuple_elems => Shift(yy_state_309)
    NT_expr => Shift(yy_state_310)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_LPAREN => Shift(yy_state_385)
    T_UNDERSCORE => Shift(yy_state_386)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_RPAREN => Shift(yy_state_560)
    NT_arrow_fn_prefix => Shift(yy_state_563)
    T_LIDENT => Shift(yy_state_566)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_386(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_378)
    T_COLON => Shift(yy_state_387)
    T_COMMA => Shift(yy_state_412)
    T_RPAREN => Shift(yy_state_417)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_simple_expr, yy_action_595)
    _ => Error
  }
}

///|
fn yy_state_387(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_388)
    _ => Error
  }
}

///|
fn yy_state_388(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_389)
    T_RPAREN => Shift(yy_state_411)
    _ => Error
  }
}

///|
fn yy_state_389(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_arrow_fn_prefix => Shift(yy_state_390)
    T_RPAREN => Shift(yy_state_391)
    T_UNDERSCORE => Shift(yy_state_392)
    T_LIDENT => Shift(yy_state_399)
    _ => Error
  }
}

///|
fn yy_state_390(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_arrow_fn_prefix, yy_action_512)
}

///|
fn yy_state_391(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_arrow_fn_prefix, yy_action_511)
}

///|
fn yy_state_392(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_393)
    T_COMMA => Shift(yy_state_396)
    T_RPAREN => Shift(yy_state_410)
    _ => Error
  }
}

///|
fn yy_state_393(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_394)
    _ => Error
  }
}

///|
fn yy_state_394(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_389)
    T_RPAREN => Shift(yy_state_395)
    _ => Error
  }
}

///|
fn yy_state_395(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_arrow_fn_prefix, yy_action_510)
}

///|
fn yy_state_396(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UNDERSCORE => Shift(yy_state_392)
    NT_arrow_fn_prefix => Shift(yy_state_397)
    T_RPAREN => Shift(yy_state_398)
    T_LIDENT => Shift(yy_state_399)
    _ => Error
  }
}

///|
fn yy_state_397(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix, yy_action_509)
}

///|
fn yy_state_398(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix, yy_action_508)
}

///|
fn yy_state_399(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_400)
    T_COMMA => Shift(yy_state_406)
    T_RPAREN => Shift(yy_state_409)
    _ => Error
  }
}

///|
fn yy_state_400(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_401)
    _ => Error
  }
}

///|
fn yy_state_401(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_402)
    T_RPAREN => Shift(yy_state_405)
    _ => Error
  }
}

///|
fn yy_state_402(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UNDERSCORE => Shift(yy_state_392)
    T_LIDENT => Shift(yy_state_399)
    NT_arrow_fn_prefix => Shift(yy_state_403)
    T_RPAREN => Shift(yy_state_404)
    _ => Error
  }
}

///|
fn yy_state_403(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_arrow_fn_prefix, yy_action_507)
}

///|
fn yy_state_404(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_arrow_fn_prefix, yy_action_506)
}

///|
fn yy_state_405(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_arrow_fn_prefix, yy_action_505)
}

///|
fn yy_state_406(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UNDERSCORE => Shift(yy_state_392)
    T_LIDENT => Shift(yy_state_399)
    NT_arrow_fn_prefix => Shift(yy_state_407)
    T_RPAREN => Shift(yy_state_408)
    _ => Error
  }
}

///|
fn yy_state_407(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix, yy_action_504)
}

///|
fn yy_state_408(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix, yy_action_503)
}

///|
fn yy_state_409(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_arrow_fn_prefix, yy_action_502)
}

///|
fn yy_state_410(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_arrow_fn_prefix, yy_action_501)
}

///|
fn yy_state_411(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Reduce(4, NT_arrow_fn_prefix, yy_action_510)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(5, NT_tuple_expr, yy_action_500)
    _ => Error
  }
}

///|
fn yy_state_412(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    NT_non_empty_tuple_elems => Shift(yy_state_309)
    NT_expr => Shift(yy_state_317)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_LPAREN => Shift(yy_state_385)
    NT_arrow_fn_prefix => Shift(yy_state_397)
    NT_non_empty_tuple_elems_with_prefix => Shift(yy_state_413)
    NT_arrow_fn_prefix_no_constraint => Shift(yy_state_414)
    T_RPAREN => Shift(yy_state_415)
    T_UNDERSCORE => Shift(yy_state_416)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_554)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_413(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_tuple_elems_with_prefix, yy_action_499)
}

///|
fn yy_state_414(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix_no_constraint, yy_action_498)
}

///|
fn yy_state_415(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Reduce(3, NT_arrow_fn_prefix, yy_action_508)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(3, NT_arrow_fn_prefix_no_constraint, yy_action_497)
    _ => Error
  }
}

///|
fn yy_state_416(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_378)
    T_COLON => Shift(yy_state_393)
    T_COMMA => Shift(yy_state_412)
    T_RPAREN => Shift(yy_state_417)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_simple_expr, yy_action_595)
    _ => Error
  }
}

///|
fn yy_state_417(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Reduce(2, NT_arrow_fn_prefix, yy_action_501)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_arrow_fn_prefix_no_constraint, yy_action_496)
    _ => Error
  }
}

///|
fn yy_state_418(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PIPE => Shift(yy_state_419)
    NT_catch_keyword => Shift(yy_state_421)
    T_CATCH => Shift(yy_state_466)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(1, NT_simple_try_expr, yy_action_495)
    _ => Error
  }
}

///|
fn yy_state_419(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_420)
    _ => Error
  }
}

///|
fn yy_state_420(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_PIPE
    | T_AND => Reduce(3, NT_pipe_expr, yy_action_494)
    _ => Error
  }
}

///|
fn yy_state_421(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_single_pattern_case => Shift(yy_state_422)
    T_ELLIPSIS => Shift(yy_state_425)
    NT_pattern => Shift(yy_state_426)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_458)
    NT_list_semis_single_pattern_case_ => Shift(yy_state_465)
    NT_single_pattern_cases => Shift(yy_state_552)
    T_RBRACE => Reduce(0, NT_list_semis_single_pattern_case_, yy_action_493)
    _ => Error
  }
}

///|
fn yy_state_422(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_423)
    NT_option_SEMI_ => Shift(yy_state_551)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_423(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_single_pattern_case => Shift(yy_state_422)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_424)
    T_ELLIPSIS => Shift(yy_state_425)
    NT_pattern => Shift(yy_state_426)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_732)
    _ => Error
  }
}

///|
fn yy_state_424(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_semis_single_pattern_case_,
    yy_action_492,
  )
}

///|
fn yy_state_425(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_single_pattern_case, yy_action_491)
}

///|
fn yy_state_426(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_IF => Shift(yy_state_260)
    NT_option_preceded_IF_infix_expr__ => Shift(yy_state_427)
    T_FAT_ARROW => Reduce(0, NT_option_preceded_IF_infix_expr__, yy_action_596)
    _ => Error
  }
}

///|
fn yy_state_427(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_428)
    _ => Error
  }
}

///|
fn yy_state_428(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_expr_statement => Shift(yy_state_470)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_534)
    T_RETURN => Shift(yy_state_535)
    T_CONTINUE => Shift(yy_state_538)
    T_BREAK => Shift(yy_state_547)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_429(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_490)
}

///|
fn yy_state_430(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_489)
}

///|
fn yy_state_431(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_488)
}

///|
fn yy_state_432(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_487)
}

///|
fn yy_state_433(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_486)
}

///|
fn yy_state_434(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_485)
}

///|
fn yy_state_435(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_484)
}

///|
fn yy_state_436(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_483)
}

///|
fn yy_state_437(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr, yy_action_482)
}

///|
fn yy_state_438(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_single_pattern_case => Shift(yy_state_422)
    T_ELLIPSIS => Shift(yy_state_425)
    NT_pattern => Shift(yy_state_426)
    T_RBRACE => Shift(yy_state_439)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_440)
    _ => Error
  }
}

///|
fn yy_state_439(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_match_expr, yy_action_481)
}

///|
fn yy_state_440(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_441)
    _ => Error
  }
}

///|
fn yy_state_441(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_match_expr, yy_action_480)
}

///|
fn yy_state_442(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_443)
    _ => Error
  }
}

///|
fn yy_state_443(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_LBRACE => Shift(yy_state_444)
    _ => Error
  }
}

///|
fn yy_state_444(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_match_header, yy_action_479)
}

///|
fn yy_state_445(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_446)
    _ => Error
  }
}

///|
fn yy_state_446(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    NT_block_expr => Shift(yy_state_447)
    _ => Error
  }
}

///|
fn yy_state_447(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_448)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(3, NT_if_expr, yy_action_478)
    _ => Error
  }
}

///|
fn yy_state_448(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    T_IF => Shift(yy_state_445)
    NT_if_expr => Shift(yy_state_449)
    NT_block_expr => Shift(yy_state_450)
    _ => Error
  }
}

///|
fn yy_state_449(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_if_expr, yy_action_477)
}

///|
fn yy_state_450(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_if_expr, yy_action_476)
}

///|
fn yy_state_451(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    NT_pipe_expr => Shift(yy_state_452)
    _ => Error
  }
}

///|
fn yy_state_452(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PIPE => Shift(yy_state_419)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(2, NT_try_expr, yy_action_475)
    _ => Error
  }
}

///|
fn yy_state_453(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    NT_pipe_expr => Shift(yy_state_454)
    _ => Error
  }
}

///|
fn yy_state_454(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PIPE => Shift(yy_state_419)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(2, NT_try_expr, yy_action_474)
    _ => Error
  }
}

///|
fn yy_state_455(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    NT_pipe_expr => Shift(yy_state_456)
    _ => Error
  }
}

///|
fn yy_state_456(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PIPE => Shift(yy_state_419)
    NT_catch_keyword => Shift(yy_state_457)
    T_CATCH => Shift(yy_state_466)
    _ => Error
  }
}

///|
fn yy_state_457(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_single_pattern_case => Shift(yy_state_422)
    T_ELLIPSIS => Shift(yy_state_425)
    NT_pattern => Shift(yy_state_426)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_458)
    NT_single_pattern_cases => Shift(yy_state_459)
    NT_list_semis_single_pattern_case_ => Shift(yy_state_465)
    T_RBRACE => Reduce(0, NT_list_semis_single_pattern_case_, yy_action_493)
    _ => Error
  }
}

///|
fn yy_state_458(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_single_pattern_case_, yy_action_473)
}

///|
fn yy_state_459(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_460)
    _ => Error
  }
}

///|
fn yy_state_460(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_461)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(5, NT_try_expr, yy_action_472)
    _ => Error
  }
}

///|
fn yy_state_461(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_462)
    _ => Error
  }
}

///|
fn yy_state_462(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_single_pattern_case => Shift(yy_state_422)
    T_ELLIPSIS => Shift(yy_state_425)
    NT_pattern => Shift(yy_state_426)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_458)
    NT_single_pattern_cases => Shift(yy_state_463)
    NT_list_semis_single_pattern_case_ => Shift(yy_state_465)
    T_RBRACE => Reduce(0, NT_list_semis_single_pattern_case_, yy_action_493)
    _ => Error
  }
}

///|
fn yy_state_463(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_464)
    _ => Error
  }
}

///|
fn yy_state_464(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_try_expr, yy_action_470)
}

///|
fn yy_state_465(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_single_pattern_cases, yy_action_469)
}

///|
fn yy_state_466(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_467)
    T_LBRACE => Shift(yy_state_469)
    _ => Error
  }
}

///|
fn yy_state_467(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_468)
    _ => Error
  }
}

///|
fn yy_state_468(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_catch_keyword, yy_action_468)
}

///|
fn yy_state_469(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_catch_keyword, yy_action_467)
}

///|
fn yy_state_470(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_single_pattern_case, yy_action_466)
}

///|
fn yy_state_471(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_472)
    T_LOOP => Shift(yy_state_525)
    T_WHILE => Shift(yy_state_530)
    _ => Error
  }
}

///|
fn yy_state_472(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_foreach_binder => Shift(yy_state_473)
    NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__ =>
      Shift(yy_state_474)
    NT_non_empty_list_commas_rev_foreach_binder_ => Shift(yy_state_496)
    T_UNDERSCORE => Shift(yy_state_499)
    NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ =>
      Shift(yy_state_502)
    T_LIDENT => Shift(yy_state_503)
    NT_non_empty_list_commas_foreach_binder_ => Shift(yy_state_506)
    NT_for_binders => Shift(yy_state_513)
    NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ =>
      Shift(yy_state_524)
    T_SEMI | T_LBRACE =>
      Reduce(
        0,
        NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__,
        yy_action_465,
      )
    _ => Error
  }
}

///|
fn yy_state_473(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_foreach_binder_,
    yy_action_464,
  )
}

///|
fn yy_state_474(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_475)
    T_SEMI | T_LBRACE =>
      Reduce(
        1,
        NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__,
        yy_action_463,
      )
    _ => Error
  }
}

///|
fn yy_state_475(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_476)
    _ => Error
  }
}

///|
fn yy_state_476(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_477)
    _ => Error
  }
}

///|
fn yy_state_477(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    NT_expr => Shift(yy_state_478)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_478(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    5,
    NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__,
    yy_action_462,
  )
}

///|
fn yy_state_479(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_480)
    _ => Error
  }
}

///|
fn yy_state_480(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_loop_label_colon, yy_action_461)
}

///|
fn yy_state_481(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_FAT_ARROW => Shift(yy_state_482)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_482(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_483)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_483(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_expr, yy_action_460)
}

///|
fn yy_state_484(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_expr_statement_no_break_continue_return,
    yy_action_459,
  )
}

///|
fn yy_state_485(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_486)
    T_AUGMENTED_ASSIGNMENT => Shift(yy_state_488)
    _ => Error
  }
}

///|
fn yy_state_486(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_487)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_487(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_expr_statement_no_break_continue_return,
    yy_action_457,
  )
}

///|
fn yy_state_488(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_489)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_489(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_expr_statement_no_break_continue_return,
    yy_action_454,
  )
}

///|
fn yy_state_490(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_expr_statement_no_break_continue_return,
    yy_action_453,
  )
}

///|
fn yy_state_491(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_492)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_492(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_expr_statement_no_break_continue_return,
    yy_action_452,
  )
}

///|
fn yy_state_493(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_112)
    T_DOT_LIDENT => Shift(yy_state_494)
    _ => Error
  }
}

///|
fn yy_state_494(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(2, NT_qual_ident, yy_action_451)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_qual_ident_simple_expr, yy_action_546)
    T_COLONCOLON => Reduce(2, NT_qual_ident_ty, yy_action_755)
    _ => Error
  }
}

///|
fn yy_state_495(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_FAT_ARROW => Shift(yy_state_482)
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(1, NT_qual_ident, yy_action_450)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_496(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_497)
    NT_option_COMMA_ => Shift(yy_state_501)
    T_IN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_497(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_foreach_binder => Shift(yy_state_498)
    T_UNDERSCORE => Shift(yy_state_499)
    T_LIDENT => Shift(yy_state_500)
    T_IN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_498(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_foreach_binder_,
    yy_action_449,
  )
}

///|
fn yy_state_499(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_foreach_binder, yy_action_448)
}

///|
fn yy_state_500(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_foreach_binder, yy_action_447)
}

///|
fn yy_state_501(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_foreach_binder_, yy_action_446)
}

///|
fn yy_state_502(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__,
    yy_action_445,
  )
}

///|
fn yy_state_503(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_504)
    T_COMMA | T_IN => Reduce(1, NT_foreach_binder, yy_action_447)
    _ => Error
  }
}

///|
fn yy_state_504(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_505)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_505(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__,
    yy_action_443,
  )
}

///|
fn yy_state_506(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_IN => Shift(yy_state_507)
    _ => Error
  }
}

///|
fn yy_state_507(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_508)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_508(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_509)
    _ => Error
  }
}

///|
fn yy_state_509(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_else => Shift(yy_state_510)
    T_ELSE => Shift(yy_state_511)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(0, NT_optional_else, yy_action_442)
    _ => Error
  }
}

///|
fn yy_state_510(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_foreach_expr, yy_action_441)
}

///|
fn yy_state_511(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_512)
    _ => Error
  }
}

///|
fn yy_state_512(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_optional_else, yy_action_440)
}

///|
fn yy_state_513(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_514)
    T_SEMI => Shift(yy_state_516)
    _ => Error
  }
}

///|
fn yy_state_514(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_511)
    NT_optional_else => Shift(yy_state_515)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(0, NT_optional_else, yy_action_442)
    _ => Error
  }
}

///|
fn yy_state_515(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_for_expr, yy_action_439)
}

///|
fn yy_state_516(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_517)
    NT_option_infix_expr_ => Shift(yy_state_518)
    T_SEMI => Reduce(0, NT_option_infix_expr_, yy_action_438)
    _ => Error
  }
}

///|
fn yy_state_517(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_SEMI => Reduce(1, NT_option_infix_expr_, yy_action_437)
    _ => Error
  }
}

///|
fn yy_state_518(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_519)
    _ => Error
  }
}

///|
fn yy_state_519(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_non_empty_list_commas_rev_separated_pair_binder_EQUAL_expr__ =>
      Shift(yy_state_474)
    NT_non_empty_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ =>
      Shift(yy_state_502)
    T_LIDENT => Shift(yy_state_520)
    NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__ =>
      Shift(yy_state_521)
    T_LBRACE =>
      Reduce(
        0,
        NT_list_commas_no_trailing_separated_pair_binder_EQUAL_expr__,
        yy_action_465,
      )
    _ => Error
  }
}

///|
fn yy_state_520(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_504)
    _ => Error
  }
}

///|
fn yy_state_521(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_522)
    _ => Error
  }
}

///|
fn yy_state_522(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_511)
    NT_optional_else => Shift(yy_state_523)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(0, NT_optional_else, yy_action_442)
    _ => Error
  }
}

///|
fn yy_state_523(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_for_expr, yy_action_436)
}

///|
fn yy_state_524(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_for_binders, yy_action_435)
}

///|
fn yy_state_525(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_526)
    _ => Error
  }
}

///|
fn yy_state_526(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_LBRACE => Shift(yy_state_527)
    _ => Error
  }
}

///|
fn yy_state_527(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_single_pattern_case => Shift(yy_state_422)
    T_ELLIPSIS => Shift(yy_state_425)
    NT_pattern => Shift(yy_state_426)
    NT_non_empty_list_semis_single_pattern_case_ => Shift(yy_state_458)
    NT_list_semis_single_pattern_case_ => Shift(yy_state_528)
    T_RBRACE => Reduce(0, NT_list_semis_single_pattern_case_, yy_action_493)
    _ => Error
  }
}

///|
fn yy_state_528(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_529)
    _ => Error
  }
}

///|
fn yy_state_529(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_loop_expr, yy_action_433)
}

///|
fn yy_state_530(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_531)
    _ => Error
  }
}

///|
fn yy_state_531(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    NT_block_expr => Shift(yy_state_532)
    _ => Error
  }
}

///|
fn yy_state_532(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ELSE => Shift(yy_state_511)
    NT_optional_else => Shift(yy_state_533)
    T_EOF
    | T_RPAREN
    | T_COMMA
    | T_COLON
    | T_SEMI
    | T_RBRACKET
    | T_LBRACE
    | T_RBRACE
    | T_AND => Reduce(0, NT_optional_else, yy_action_442)
    _ => Error
  }
}

///|
fn yy_state_533(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_while_expr, yy_action_432)
}

///|
fn yy_state_534(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_expr_statement, yy_action_431)
}

///|
fn yy_state_535(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_536)
    NT_option_expr_ => Shift(yy_state_537)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_expr_, yy_action_430)
    _ => Error
  }
}

///|
fn yy_state_536(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_expr_, yy_action_429)
}

///|
fn yy_state_537(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expr_statement, yy_action_428)
}

///|
fn yy_state_538(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_539)
    NT_non_empty_list_commas_rev_expr_ => Shift(yy_state_540)
    NT_non_empty_list_commas_no_trailing_expr_ => Shift(yy_state_543)
    NT_list_commas_no_trailing_expr_ => Shift(yy_state_544)
    T_POST_LABEL => Shift(yy_state_545)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_SEMI | T_RBRACE =>
      Reduce(0, NT_list_commas_no_trailing_expr_, yy_action_427)
    _ => Error
  }
}

///|
fn yy_state_539(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_non_empty_list_commas_rev_expr_, yy_action_426)
}

///|
fn yy_state_540(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_541)
    T_SEMI | T_RBRACE =>
      Reduce(1, NT_non_empty_list_commas_no_trailing_expr_, yy_action_425)
    _ => Error
  }
}

///|
fn yy_state_541(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_542)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_542(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_commas_rev_expr_, yy_action_424)
}

///|
fn yy_state_543(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_no_trailing_expr_, yy_action_423)
}

///|
fn yy_state_544(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expr_statement, yy_action_422)
}

///|
fn yy_state_545(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_COLON => Shift(yy_state_480)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_539)
    NT_non_empty_list_commas_rev_expr_ => Shift(yy_state_540)
    NT_non_empty_list_commas_no_trailing_expr_ => Shift(yy_state_543)
    NT_list_commas_no_trailing_expr_ => Shift(yy_state_546)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_SEMI | T_RBRACE =>
      Reduce(0, NT_list_commas_no_trailing_expr_, yy_action_427)
    _ => Error
  }
}

///|
fn yy_state_546(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_expr_statement, yy_action_421)
}

///|
fn yy_state_547(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_536)
    NT_option_expr_ => Shift(yy_state_548)
    T_POST_LABEL => Shift(yy_state_549)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_expr_, yy_action_430)
    _ => Error
  }
}

///|
fn yy_state_548(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expr_statement, yy_action_420)
}

///|
fn yy_state_549(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_COLON => Shift(yy_state_480)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_536)
    NT_option_expr_ => Shift(yy_state_550)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_expr_, yy_action_430)
    _ => Error
  }
}

///|
fn yy_state_550(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_expr_statement, yy_action_419)
}

///|
fn yy_state_551(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_semis_single_pattern_case_,
    yy_action_418,
  )
}

///|
fn yy_state_552(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_553)
    _ => Error
  }
}

///|
fn yy_state_553(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_try_expr, yy_action_417)
}

///|
fn yy_state_554(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_COLON => Shift(yy_state_400)
    T_FAT_ARROW => Shift(yy_state_482)
    T_COMMA => Shift(yy_state_555)
    T_RPAREN => Shift(yy_state_559)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_555(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    NT_non_empty_tuple_elems => Shift(yy_state_309)
    NT_expr => Shift(yy_state_317)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_LPAREN => Shift(yy_state_385)
    NT_arrow_fn_prefix => Shift(yy_state_407)
    T_UNDERSCORE => Shift(yy_state_416)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_554)
    NT_non_empty_tuple_elems_with_prefix => Shift(yy_state_556)
    NT_arrow_fn_prefix_no_constraint => Shift(yy_state_557)
    T_RPAREN => Shift(yy_state_558)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_556(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_tuple_elems_with_prefix, yy_action_416)
}

///|
fn yy_state_557(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix_no_constraint, yy_action_415)
}

///|
fn yy_state_558(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Reduce(3, NT_arrow_fn_prefix, yy_action_503)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(3, NT_arrow_fn_prefix_no_constraint, yy_action_413)
    _ => Error
  }
}

///|
fn yy_state_559(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Reduce(2, NT_arrow_fn_prefix, yy_action_502)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_arrow_fn_prefix_no_constraint, yy_action_411)
    _ => Error
  }
}

///|
fn yy_state_560(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_561)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_tuple_expr, yy_action_570)
    _ => Error
  }
}

///|
fn yy_state_561(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_562)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_562(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_arrow_fn_expr, yy_action_410)
}

///|
fn yy_state_563(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_564)
    _ => Error
  }
}

///|
fn yy_state_564(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_565)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_565(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_arrow_fn_expr, yy_action_409)
}

///|
fn yy_state_566(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_FAT_ARROW => Shift(yy_state_482)
    T_COMMA => Shift(yy_state_555)
    T_RPAREN => Shift(yy_state_559)
    T_COLON => Shift(yy_state_567)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_567(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_568)
    _ => Error
  }
}

///|
fn yy_state_568(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_402)
    T_RPAREN => Shift(yy_state_569)
    _ => Error
  }
}

///|
fn yy_state_569(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Reduce(4, NT_arrow_fn_prefix, yy_action_505)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(5, NT_tuple_expr, yy_action_408)
    _ => Error
  }
}

///|
fn yy_state_570(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_480)
    T_EQUAL => Shift(yy_state_571)
    T_RPAREN | T_COMMA => Reduce(1, NT_argument, yy_action_407)
    _ => Error
  }
}

///|
fn yy_state_571(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_572)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_572(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_argument, yy_action_406)
}

///|
fn yy_state_573(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_482)
    NT_optional_question => Shift(yy_state_574)
    T_QUESTION => Shift(yy_state_577)
    T_EQUAL => Reduce(0, NT_optional_question, yy_action_405)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_574(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_575)
    _ => Error
  }
}

///|
fn yy_state_575(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_576)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_576(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_argument, yy_action_403)
}

///|
fn yy_state_577(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_344)
    T_EQUAL => Reduce(1, NT_optional_question, yy_action_402)
    T_RPAREN | T_COMMA => Reduce(2, NT_argument, yy_action_401)
    _ => Error
  }
}

///|
fn yy_state_578(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_579)
    _ => Error
  }
}

///|
fn yy_state_579(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_580)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_580(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_581)
    _ => Error
  }
}

///|
fn yy_state_581(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_400)
}

///|
fn yy_state_582(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_583)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_583(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_584)
    _ => Error
  }
}

///|
fn yy_state_584(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_expr, yy_action_399)
}

///|
fn yy_state_585(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_option_expr_ => Shift(yy_state_586)
    NT_expr => Shift(yy_state_590)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_COLON => Reduce(0, NT_option_expr_, yy_action_430)
    _ => Error
  }
}

///|
fn yy_state_586(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_587)
    _ => Error
  }
}

///|
fn yy_state_587(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_536)
    NT_option_expr_ => Shift(yy_state_588)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACKET => Reduce(0, NT_option_expr_, yy_action_430)
    _ => Error
  }
}

///|
fn yy_state_588(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_589)
    _ => Error
  }
}

///|
fn yy_state_589(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_398)
}

///|
fn yy_state_590(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_591)
    T_COLON => Reduce(1, NT_option_expr_, yy_action_429)
    _ => Error
  }
}

///|
fn yy_state_591(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(4, NT_left_value, yy_action_396)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(4, NT_simple_expr, yy_action_397)
    _ => Error
  }
}

///|
fn yy_state_592(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(2, NT_left_value, yy_action_394)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_LPAREN
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_simple_expr, yy_action_576)
    _ => Error
  }
}

///|
fn yy_state_593(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_594)
    T_EXCLAMATION => Shift(yy_state_598)
    T_LPAREN => Shift(yy_state_602)
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(2, NT_left_value, yy_action_391)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_simple_expr, yy_action_393)
    _ => Error
  }
}

///|
fn yy_state_594(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_595)
    _ => Error
  }
}

///|
fn yy_state_595(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_596)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_596(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_597)
    _ => Error
  }
}

///|
fn yy_state_597(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_390)
}

///|
fn yy_state_598(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_599)
    _ => Error
  }
}

///|
fn yy_state_599(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_600)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_600(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_601)
    _ => Error
  }
}

///|
fn yy_state_601(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_389)
}

///|
fn yy_state_602(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_603)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_603(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_604)
    _ => Error
  }
}

///|
fn yy_state_604(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_388)
}

///|
fn yy_state_605(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_expr, yy_action_387)
}

///|
fn yy_state_606(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_prefix_expr => Shift(yy_state_607)
    _ => Error
  }
}

///|
fn yy_state_607(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_range_expr, yy_action_386)
}

///|
fn yy_state_608(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_parameter, yy_action_385)
}

///|
fn yy_state_609(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_610)
    _ => Error
  }
}

///|
fn yy_state_610(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_611)
    T_RPAREN | T_COMMA => Reduce(3, NT_parameter, yy_action_382)
    _ => Error
  }
}

///|
fn yy_state_611(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_612)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_612(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_parameter, yy_action_381)
}

///|
fn yy_state_613(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_614)
    T_COLON => Shift(yy_state_621)
    T_RPAREN | T_COMMA => Reduce(1, NT_parameter, yy_action_380)
    _ => Error
  }
}

///|
fn yy_state_614(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_615)
    T_EQUAL => Shift(yy_state_619)
    T_RPAREN | T_COMMA => Reduce(2, NT_parameter, yy_action_379)
    _ => Error
  }
}

///|
fn yy_state_615(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_616)
    _ => Error
  }
}

///|
fn yy_state_616(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_617)
    T_RPAREN | T_COMMA => Reduce(4, NT_parameter, yy_action_378)
    _ => Error
  }
}

///|
fn yy_state_617(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_618)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_618(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_parameter, yy_action_377)
}

///|
fn yy_state_619(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_620)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_620(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_parameter, yy_action_376)
}

///|
fn yy_state_621(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_622)
    _ => Error
  }
}

///|
fn yy_state_622(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_parameter, yy_action_375)
}

///|
fn yy_state_623(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_624)
    T_RPAREN | T_COMMA => Reduce(1, NT_parameter, yy_action_374)
    _ => Error
  }
}

///|
fn yy_state_624(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_625)
    _ => Error
  }
}

///|
fn yy_state_625(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_parameter, yy_action_373)
}

///|
fn yy_state_626(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_parameter_, yy_action_372)
}

///|
fn yy_state_627(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_628)
    _ => Error
  }
}

///|
fn yy_state_628(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_parameters, yy_action_370)
}

///|
fn yy_state_629(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_optional_bang, yy_action_369)
}

///|
fn yy_state_630(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_378)
    T_COLON => Shift(yy_state_631)
    T_COMMA => Shift(yy_state_634)
    T_RPAREN => Shift(yy_state_637)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_simple_expr, yy_action_595)
    _ => Error
  }
}

///|
fn yy_state_631(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_632)
    _ => Error
  }
}

///|
fn yy_state_632(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_633)
    _ => Error
  }
}

///|
fn yy_state_633(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_tuple_expr, yy_action_500)
}

///|
fn yy_state_634(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    NT_non_empty_tuple_elems => Shift(yy_state_309)
    NT_expr => Shift(yy_state_317)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_LPAREN => Shift(yy_state_385)
    NT_non_empty_tuple_elems_with_prefix => Shift(yy_state_413)
    NT_arrow_fn_prefix_no_constraint => Shift(yy_state_414)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_RPAREN => Shift(yy_state_635)
    T_UNDERSCORE => Shift(yy_state_636)
    T_LIDENT => Shift(yy_state_638)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_635(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix_no_constraint, yy_action_497)
}

///|
fn yy_state_636(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_378)
    T_COMMA => Shift(yy_state_634)
    T_RPAREN => Shift(yy_state_637)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_simple_expr, yy_action_595)
    _ => Error
  }
}

///|
fn yy_state_637(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_arrow_fn_prefix_no_constraint, yy_action_496)
}

///|
fn yy_state_638(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_FAT_ARROW => Shift(yy_state_482)
    T_COMMA => Shift(yy_state_639)
    T_RPAREN => Shift(yy_state_641)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_639(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    NT_non_empty_tuple_elems => Shift(yy_state_309)
    NT_expr => Shift(yy_state_317)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_non_empty_tuple_elems_with_prefix => Shift(yy_state_556)
    NT_arrow_fn_prefix_no_constraint => Shift(yy_state_557)
    T_UNDERSCORE => Shift(yy_state_636)
    T_LIDENT => Shift(yy_state_638)
    T_RPAREN => Shift(yy_state_640)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_640(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_arrow_fn_prefix_no_constraint, yy_action_413)
}

///|
fn yy_state_641(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_arrow_fn_prefix_no_constraint, yy_action_411)
}

///|
fn yy_state_642(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_FAT_ARROW => Shift(yy_state_482)
    T_COMMA => Shift(yy_state_639)
    T_RPAREN => Shift(yy_state_641)
    T_COLON => Shift(yy_state_643)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_643(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_644)
    _ => Error
  }
}

///|
fn yy_state_644(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_645)
    _ => Error
  }
}

///|
fn yy_state_645(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_tuple_expr, yy_action_408)
}

///|
fn yy_state_646(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_prefix_expr, yy_action_368)
}

///|
fn yy_state_647(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_648)
    _ => Error
  }
}

///|
fn yy_state_648(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_simple_expr, yy_action_366)
}

///|
fn yy_state_649(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_650)
    _ => Error
  }
}

///|
fn yy_state_650(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_651)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_651(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_652)
    _ => Error
  }
}

///|
fn yy_state_652(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_simple_expr, yy_action_364)
}

///|
fn yy_state_653(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_654)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_654(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_655)
    _ => Error
  }
}

///|
fn yy_state_655(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_362)
}

///|
fn yy_state_656(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_594)
    T_EXCLAMATION => Shift(yy_state_598)
    T_LPAREN => Shift(yy_state_602)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_EOF
    | T_CATCH
    | T_RPAREN
    | T_COMMA
    | T_MINUS
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_COLON
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_RBRACKET
    | T_BAR
    | T_LBRACE
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_ELSE
    | T_FAT_ARROW
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS
    | T_AND => Reduce(2, NT_simple_expr, yy_action_393)
    _ => Error
  }
}

///|
fn yy_state_657(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_option_expr_ => Shift(yy_state_586)
    NT_expr => Shift(yy_state_658)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_COLON => Reduce(0, NT_option_expr_, yy_action_430)
    _ => Error
  }
}

///|
fn yy_state_658(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_659)
    T_COLON => Reduce(1, NT_option_expr_, yy_action_429)
    _ => Error
  }
}

///|
fn yy_state_659(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_expr, yy_action_397)
}

///|
fn yy_state_660(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_list_commas_with_trailing_info_record_defn_single_,
    yy_action_361,
  )
}

///|
fn yy_state_661(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_662)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_662(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_663)
    T_RBRACE => Shift(yy_state_669)
    _ => Error
  }
}

///|
fn yy_state_663(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_284)
    T_LIDENT => Shift(yy_state_289)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_664)
    NT_non_empty_list_commas_record_defn_single_ => Shift(yy_state_666)
    NT_list_commas_record_defn_single_ => Shift(yy_state_667)
    T_RBRACE => Reduce(0, NT_list_commas_record_defn_single_, yy_action_360)
    _ => Error
  }
}

///|
fn yy_state_664(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_287)
    NT_option_COMMA_ => Shift(yy_state_665)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_665(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_record_defn_single_,
    yy_action_359,
  )
}

///|
fn yy_state_666(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_record_defn_single_, yy_action_358)
}

///|
fn yy_state_667(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_668)
    _ => Error
  }
}

///|
fn yy_state_668(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_simple_expr, yy_action_356)
}

///|
fn yy_state_669(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_354)
}

///|
fn yy_state_670(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_671)
    _ => Error
  }
}

///|
fn yy_state_671(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_simple_expr, yy_action_353)
}

///|
fn yy_state_672(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_673)
    _ => Error
  }
}

///|
fn yy_state_673(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_ELSE => Shift(yy_state_674)
    T_SEMI | T_RBRACE => Reduce(2, NT_guard_statement, yy_action_352)
    _ => Error
  }
}

///|
fn yy_state_674(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_675)
    _ => Error
  }
}

///|
fn yy_state_675(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_guard_statement, yy_action_351)
}

///|
fn yy_state_676(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_statement, yy_action_350)
}

///|
fn yy_state_677(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    NT_pipe_expr => Shift(yy_state_678)
    _ => Error
  }
}

///|
fn yy_state_678(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PIPE => Shift(yy_state_419)
    T_SEMI | T_RBRACE => Reduce(2, NT_statement, yy_action_349)
    _ => Error
  }
}

///|
fn yy_state_679(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_statement, yy_action_348)
}

///|
fn yy_state_680(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_multi_pattern_case => Shift(yy_state_48)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_52)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_205)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_259)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_264)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_681)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_735)
    _ => Error
  }
}

///|
fn yy_state_681(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_682)
    _ => Error
  }
}

///|
fn yy_state_682(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_statement, yy_action_347)
}

///|
fn yy_state_683(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_263)
    NT_fn_header => Shift(yy_state_684)
    T_FN => Shift(yy_state_687)
    _ => Error
  }
}

///|
fn yy_state_684(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_multi_pattern_case => Shift(yy_state_48)
    NT_non_empty_list_commas_rev_pattern_ => Shift(yy_state_52)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    NT_pattern => Shift(yy_state_205)
    NT_non_empty_list_commas_pattern_ => Shift(yy_state_259)
    NT_non_empty_list_semis_multi_pattern_case_ => Shift(yy_state_264)
    NT_list_semis_multi_pattern_case_ => Shift(yy_state_685)
    T_RBRACE => Reduce(0, NT_list_semis_multi_pattern_case_, yy_action_735)
    _ => Error
  }
}

///|
fn yy_state_685(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_686)
    _ => Error
  }
}

///|
fn yy_state_686(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_statement, yy_action_346)
}

///|
fn yy_state_687(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_268)
    T_EXCLAMATION => Shift(yy_state_629)
    T_LIDENT => Shift(yy_state_688)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_688(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_689)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_689(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_690)
    T_LBRACE => Shift(yy_state_693)
    _ => Error
  }
}

///|
fn yy_state_690(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_691)
    T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_691(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_692)
    _ => Error
  }
}

///|
fn yy_state_692(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_statement, yy_action_345)
}

///|
fn yy_state_693(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_fn_header, yy_action_344)
}

///|
fn yy_state_694(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_695)
    _ => Error
  }
}

///|
fn yy_state_695(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_696)
    T_EQUAL => Shift(yy_state_717)
    _ => Error
  }
}

///|
fn yy_state_696(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_697)
    _ => Error
  }
}

///|
fn yy_state_697(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_698)
    _ => Error
  }
}

///|
fn yy_state_698(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_ASYNC => Shift(yy_state_262)
    T_FN => Shift(yy_state_323)
    T_UNDERSCORE => Shift(yy_state_699)
    T_LIDENT => Shift(yy_state_700)
    T_LPAREN => Shift(yy_state_701)
    NT_letand_func => Shift(yy_state_703)
    NT_anony_fn => Shift(yy_state_712)
    NT_arrow_fn_expr => Shift(yy_state_713)
    _ => Error
  }
}

///|
fn yy_state_699(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_378)
    _ => Error
  }
}

///|
fn yy_state_700(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_482)
    _ => Error
  }
}

///|
fn yy_state_701(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UNDERSCORE => Shift(yy_state_392)
    T_LIDENT => Shift(yy_state_399)
    NT_arrow_fn_prefix => Shift(yy_state_563)
    T_RPAREN => Shift(yy_state_702)
    _ => Error
  }
}

///|
fn yy_state_702(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_561)
    _ => Error
  }
}

///|
fn yy_state_703(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_and_func => Shift(yy_state_704)
    T_AND => Shift(yy_state_706)
    NT_list_and_func_ => Shift(yy_state_716)
    T_SEMI | T_RBRACE => Reduce(0, NT_list_and_func_, yy_action_343)
    _ => Error
  }
}

///|
fn yy_state_704(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_and_func => Shift(yy_state_704)
    NT_list_and_func_ => Shift(yy_state_705)
    T_AND => Shift(yy_state_706)
    T_SEMI | T_RBRACE => Reduce(0, NT_list_and_func_, yy_action_343)
    _ => Error
  }
}

///|
fn yy_state_705(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_list_and_func_, yy_action_342)
}

///|
fn yy_state_706(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_707)
    _ => Error
  }
}

///|
fn yy_state_707(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_708)
    T_EQUAL => Shift(yy_state_714)
    _ => Error
  }
}

///|
fn yy_state_708(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_709)
    _ => Error
  }
}

///|
fn yy_state_709(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_710)
    _ => Error
  }
}

///|
fn yy_state_710(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_ASYNC => Shift(yy_state_262)
    T_FN => Shift(yy_state_323)
    T_UNDERSCORE => Shift(yy_state_699)
    T_LIDENT => Shift(yy_state_700)
    T_LPAREN => Shift(yy_state_701)
    NT_letand_func => Shift(yy_state_711)
    NT_anony_fn => Shift(yy_state_712)
    NT_arrow_fn_expr => Shift(yy_state_713)
    _ => Error
  }
}

///|
fn yy_state_711(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_and_func, yy_action_341)
}

///|
fn yy_state_712(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_letand_func, yy_action_340)
}

///|
fn yy_state_713(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_letand_func, yy_action_339)
}

///|
fn yy_state_714(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_ASYNC => Shift(yy_state_262)
    T_FN => Shift(yy_state_323)
    T_UNDERSCORE => Shift(yy_state_699)
    T_LIDENT => Shift(yy_state_700)
    T_LPAREN => Shift(yy_state_701)
    NT_anony_fn => Shift(yy_state_712)
    NT_arrow_fn_expr => Shift(yy_state_713)
    NT_letand_func => Shift(yy_state_715)
    _ => Error
  }
}

///|
fn yy_state_715(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_and_func, yy_action_338)
}

///|
fn yy_state_716(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_statement, yy_action_337)
}

///|
fn yy_state_717(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_ASYNC => Shift(yy_state_262)
    T_FN => Shift(yy_state_323)
    T_UNDERSCORE => Shift(yy_state_699)
    T_LIDENT => Shift(yy_state_700)
    T_LPAREN => Shift(yy_state_701)
    NT_anony_fn => Shift(yy_state_712)
    NT_arrow_fn_expr => Shift(yy_state_713)
    NT_letand_func => Shift(yy_state_718)
    _ => Error
  }
}

///|
fn yy_state_718(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_and_func => Shift(yy_state_704)
    T_AND => Shift(yy_state_706)
    NT_list_and_func_ => Shift(yy_state_719)
    T_SEMI | T_RBRACE => Reduce(0, NT_list_and_func_, yy_action_343)
    _ => Error
  }
}

///|
fn yy_state_719(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_statement, yy_action_336)
}

///|
fn yy_state_720(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACE => Shift(yy_state_54)
    T_LBRACKET => Shift(yy_state_58)
    T_LPAREN => Shift(yy_state_72)
    NT_constr => Shift(yy_state_73)
    T_LIDENT => Shift(yy_state_86)
    T_UNDERSCORE => Shift(yy_state_91)
    T_BYTES => Shift(yy_state_92)
    T_STRING => Shift(yy_state_93)
    T_MINUS => Shift(yy_state_94)
    T_FLOAT => Shift(yy_state_98)
    T_DOUBLE => Shift(yy_state_99)
    T_BYTE => Shift(yy_state_100)
    T_INT => Shift(yy_state_101)
    T_CHAR => Shift(yy_state_102)
    T_FALSE => Shift(yy_state_103)
    T_TRUE => Shift(yy_state_104)
    NT_simple_pattern => Shift(yy_state_105)
    NT_type_name => Shift(yy_state_108)
    T_PACKAGE_NAME => Shift(yy_state_111)
    T_UIDENT => Shift(yy_state_113)
    NT_range_pattern => Shift(yy_state_116)
    NT_or_pattern => Shift(yy_state_119)
    T_MUTABLE => Shift(yy_state_721)
    NT_pattern => Shift(yy_state_729)
    _ => Error
  }
}

///|
fn yy_state_721(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_722)
    _ => Error
  }
}

///|
fn yy_state_722(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_723)
    T_EQUAL => Shift(yy_state_727)
    _ => Error
  }
}

///|
fn yy_state_723(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_724)
    _ => Error
  }
}

///|
fn yy_state_724(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_725)
    _ => Error
  }
}

///|
fn yy_state_725(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_726)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_726(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_statement, yy_action_335)
}

///|
fn yy_state_727(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_728)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_728(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_statement, yy_action_334)
}

///|
fn yy_state_729(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_121)
    T_COLON => Shift(yy_state_730)
    T_EQUAL => Shift(yy_state_734)
    _ => Error
  }
}

///|
fn yy_state_730(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_731)
    _ => Error
  }
}

///|
fn yy_state_731(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_732)
    _ => Error
  }
}

///|
fn yy_state_732(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_733)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_733(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_statement, yy_action_333)
}

///|
fn yy_state_734(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_735)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_735(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_statement, yy_action_332)
}

///|
fn yy_state_736(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_optional_bang => Shift(yy_state_324)
    T_EXCLAMATION => Shift(yy_state_629)
    T_LIDENT => Shift(yy_state_737)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_737(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_738)
    T_LPAREN | T_LBRACE => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_738(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    T_LBRACE => Shift(yy_state_693)
    NT_parameters => Shift(yy_state_739)
    _ => Error
  }
}

///|
fn yy_state_739(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_740)
    T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_740(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_741)
    _ => Error
  }
}

///|
fn yy_state_741(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_statement, yy_action_331)
}

///|
fn yy_state_742(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_rev_statement_, yy_action_330)
}

///|
fn yy_state_743(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_rev_statement_, yy_action_329)
}

///|
fn yy_state_744(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_745)
    _ => Error
  }
}

///|
fn yy_state_745(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_block_expr, yy_action_328)
}

///|
fn yy_state_746(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_BARBAR => Shift(yy_state_355)
    T_AMPERAMPER => Shift(yy_state_357)
    T_BAR => Shift(yy_state_359)
    T_CARET => Shift(yy_state_361)
    T_AMPER => Shift(yy_state_363)
    T_MINUS => Shift(yy_state_365)
    T_PLUS => Shift(yy_state_367)
    T_INFIX1 => Shift(yy_state_369)
    T_INFIX2 => Shift(yy_state_371)
    T_INFIX3 => Shift(yy_state_373)
    T_INFIX4 => Shift(yy_state_375)
    T_FAT_ARROW => Reduce(2, NT_option_preceded_IF_infix_expr__, yy_action_326)
    _ => Error
  }
}

///|
fn yy_state_747(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FAT_ARROW => Shift(yy_state_748)
    _ => Error
  }
}

///|
fn yy_state_748(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_534)
    T_RETURN => Shift(yy_state_535)
    T_CONTINUE => Shift(yy_state_538)
    T_BREAK => Shift(yy_state_547)
    NT_expr_statement => Shift(yy_state_749)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_749(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_multi_pattern_case, yy_action_325)
}

///|
fn yy_state_750(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_751)
    _ => Error
  }
}

///|
fn yy_state_751(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_anony_fn, yy_action_324)
}

///|
fn yy_state_752(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_map_expr_elem_, yy_action_323)
}

///|
fn yy_state_753(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_278)
    NT_option_SEMI_ => Shift(yy_state_754)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_754(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_none_empty_list_semis_rev_with_trailing_info_statement_,
    yy_action_322,
  )
}

///|
fn yy_state_755(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_atomic_expr, yy_action_758)
    T_COLON => Reduce(1, NT_map_syntax_key, yy_action_614)
    _ => Error
  }
}

///|
fn yy_state_756(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_757)
    _ => Error
  }
}

///|
fn yy_state_757(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_321)
}

///|
fn yy_state_758(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_759)
    _ => Error
  }
}

///|
fn yy_state_759(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_319)
}

///|
fn yy_state_760(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_761)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_761(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_762)
    T_RBRACE => Shift(yy_state_765)
    _ => Error
  }
}

///|
fn yy_state_762(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_284)
    T_LIDENT => Shift(yy_state_289)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_664)
    NT_non_empty_list_commas_record_defn_single_ => Shift(yy_state_666)
    NT_list_commas_record_defn_single_ => Shift(yy_state_763)
    T_RBRACE => Reduce(0, NT_list_commas_record_defn_single_, yy_action_360)
    _ => Error
  }
}

///|
fn yy_state_763(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_764)
    _ => Error
  }
}

///|
fn yy_state_764(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_simple_expr, yy_action_318)
}

///|
fn yy_state_765(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_simple_expr, yy_action_316)
}

///|
fn yy_state_766(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_767)
    _ => Error
  }
}

///|
fn yy_state_767(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_315)
}

///|
fn yy_state_768(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_UNDERSCORE => Shift(yy_state_261)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_LPAREN => Shift(yy_state_305)
    T_MINUS => Shift(yy_state_319)
    NT_prefix_expr => Shift(yy_state_320)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    T_PACKAGE_NAME => Shift(yy_state_340)
    T_LIDENT => Shift(yy_state_342)
    T_FLOAT => Shift(yy_state_769)
    T_DOUBLE => Shift(yy_state_770)
    T_INT => Shift(yy_state_771)
    _ => Error
  }
}

///|
fn yy_state_769(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_simple_constant, yy_action_768)
    T_COLON => Reduce(2, NT_map_syntax_key, yy_action_617)
    _ => Error
  }
}

///|
fn yy_state_770(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_simple_constant, yy_action_767)
    T_COLON => Reduce(2, NT_map_syntax_key, yy_action_616)
    _ => Error
  }
}

///|
fn yy_state_771(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_QUESTION
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_simple_constant, yy_action_766)
    T_COLON => Reduce(2, NT_map_syntax_key, yy_action_615)
    _ => Error
  }
}

///|
fn yy_state_772(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_QUESTION => Shift(yy_state_343)
    T_FAT_ARROW => Shift(yy_state_482)
    T_COLON => Shift(yy_state_773)
    T_COMMA => Shift(yy_state_778)
    T_AUGMENTED_ASSIGNMENT | T_EQUAL => Reduce(1, NT_qual_ident, yy_action_450)
    T_INFIX1
    | T_INFIX2
    | T_INFIX3
    | T_INFIX4
    | T_CATCH
    | T_LPAREN
    | T_MINUS
    | T_EXCLAMATION
    | T_DOT_LIDENT
    | T_DOT_INT
    | T_SEMI
    | T_LBRACKET
    | T_PLUS
    | T_BAR
    | T_RBRACE
    | T_AMPERAMPER
    | T_AMPER
    | T_CARET
    | T_BARBAR
    | T_AS
    | T_PIPE
    | T_DOTDOT
    | T_RANGE_INCLUSIVE
    | T_RANGE_EXCLUSIVE
    | T_IS => Reduce(1, NT_qual_ident_simple_expr, yy_action_545)
    _ => Error
  }
}

///|
fn yy_state_773(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_774)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_774(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_775)
    NT_option_COMMA_ => Shift(yy_state_777)
    T_RBRACE => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_775(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_284)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_285)
    T_LIDENT => Shift(yy_state_289)
    NT_non_empty_list_commas_with_trailing_info_record_defn_single_ =>
      Shift(yy_state_776)
    T_RBRACE => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_776(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_record_defn, yy_action_314)
}

///|
fn yy_state_777(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_record_defn, yy_action_312)
}

///|
fn yy_state_778(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_record_defn_single => Shift(yy_state_284)
    NT_non_empty_list_commas_rev_record_defn_single_ => Shift(yy_state_285)
    T_LIDENT => Shift(yy_state_289)
    NT_non_empty_list_commas_with_trailing_info_record_defn_single_ =>
      Shift(yy_state_660)
    NT_list_commas_with_trailing_info_record_defn_single_ => Shift(yy_state_779)
    T_RBRACE =>
      Reduce(
        0,
        NT_list_commas_with_trailing_info_record_defn_single_,
        yy_action_583,
      )
    _ => Error
  }
}

///|
fn yy_state_779(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_record_defn, yy_action_310)
}

///|
fn yy_state_780(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_spreadable_elem, yy_action_309)
}

///|
fn yy_state_781(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_spreadable_elem_, yy_action_308)
}

///|
fn yy_state_782(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_783)
    _ => Error
  }
}

///|
fn yy_state_783(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_simple_expr, yy_action_307)
}

///|
fn yy_state_784(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EOF => Shift(yy_state_785)
    _ => Error
  }
}

///|
fn yy_state_785(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_expression, yy_action_306)
}

///|
fn yy_state_786(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_structure => Shift(yy_state_787)
    NT_structure_item => Shift(yy_state_788)
    T_ATTRIBUTE => Shift(yy_state_791)
    T_ENUM => Shift(yy_state_793)
    T_STRUCT => Shift(yy_state_807)
    T_SUBERROR => Shift(yy_state_810)
    T_TYPE => Shift(yy_state_812)
    T_ENUMVIEW => Shift(yy_state_815)
    T_IMPL => Shift(yy_state_872)
    T_TEST => Shift(yy_state_974)
    T_TRAITALIAS => Shift(yy_state_980)
    T_TYPEALIAS => Shift(yy_state_999)
    T_TRAIT => Shift(yy_state_1008)
    T_FNALIAS => Shift(yy_state_1072)
    NT_extern_fun_header => Shift(yy_state_1109)
    NT_fun_header => Shift(yy_state_1115)
    NT_val_header => Shift(yy_state_1121)
    NT_enum_header => Shift(yy_state_1124)
    NT_struct_header => Shift(yy_state_1129)
    NT_suberror_header => Shift(yy_state_1138)
    NT_type_header => Shift(yy_state_1146)
    T_CONST => Shift(yy_state_1150)
    T_LET => Shift(yy_state_1154)
    T_EXTERN => Shift(yy_state_1158)
    T_FN => Shift(yy_state_1174)
    NT_non_empty_list_attribute_ => Shift(yy_state_1181)
    T_PUB => Shift(yy_state_1442)
    T_PRIV => Shift(yy_state_1527)
    NT_fun_header_generic => Shift(yy_state_1611)
    T_ASYNC => Shift(yy_state_1614)
    NT_non_empty_list_semis_structure_item_ => Shift(yy_state_1623)
    NT_list_semis_structure_item_ => Shift(yy_state_1624)
    T_EOF => Reduce(0, NT_list_semis_structure_item_, yy_action_305)
    _ => Error
  }
}

///|
fn yy_state_787(_lookahead : YYSymbol) -> YYDecision {
  Accept
}

///|
fn yy_state_788(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_789)
    NT_option_SEMI_ => Shift(yy_state_1622)
    T_EOF => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_789(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_structure_item => Shift(yy_state_788)
    NT_non_empty_list_semis_structure_item_ => Shift(yy_state_790)
    T_ATTRIBUTE => Shift(yy_state_791)
    T_ENUM => Shift(yy_state_793)
    T_STRUCT => Shift(yy_state_807)
    T_SUBERROR => Shift(yy_state_810)
    T_TYPE => Shift(yy_state_812)
    T_ENUMVIEW => Shift(yy_state_815)
    T_IMPL => Shift(yy_state_872)
    T_TEST => Shift(yy_state_974)
    T_TRAITALIAS => Shift(yy_state_980)
    T_TYPEALIAS => Shift(yy_state_999)
    T_TRAIT => Shift(yy_state_1008)
    T_FNALIAS => Shift(yy_state_1072)
    NT_extern_fun_header => Shift(yy_state_1109)
    NT_fun_header => Shift(yy_state_1115)
    NT_val_header => Shift(yy_state_1121)
    NT_enum_header => Shift(yy_state_1124)
    NT_struct_header => Shift(yy_state_1129)
    NT_suberror_header => Shift(yy_state_1138)
    NT_type_header => Shift(yy_state_1146)
    T_CONST => Shift(yy_state_1150)
    T_LET => Shift(yy_state_1154)
    T_EXTERN => Shift(yy_state_1158)
    T_FN => Shift(yy_state_1174)
    NT_non_empty_list_attribute_ => Shift(yy_state_1181)
    T_PUB => Shift(yy_state_1442)
    T_PRIV => Shift(yy_state_1527)
    NT_fun_header_generic => Shift(yy_state_1611)
    T_ASYNC => Shift(yy_state_1614)
    T_EOF => Reduce(1, NT_option_SEMI_, yy_action_732)
    _ => Error
  }
}

///|
fn yy_state_790(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semis_structure_item_, yy_action_304)
}

///|
fn yy_state_791(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_non_empty_list_attribute_ => Shift(yy_state_792)
    T_LIDENT
    | T_UIDENT
    | T_PUB
    | T_PRIV
    | T_EXTERN
    | T_STRUCT
    | T_ENUM
    | T_TRAIT
    | T_IMPL
    | T_ASYNC
    | T_TYPEALIAS
    | T_TRAITALIAS
    | T_FNALIAS
    | T_FN
    | T_LET
    | T_CONST
    | T_MUTABLE
    | T_TYPE
    | T_TEST
    | T_SUBERROR
    | T_ENUMVIEW => Reduce(1, NT_non_empty_list_attribute_, yy_action_303)
    _ => Error
  }
}

///|
fn yy_state_792(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_attribute_, yy_action_301)
}

///|
fn yy_state_793(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_794)
    _ => Error
  }
}

///|
fn yy_state_794(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_805)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_795(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_decl_binder => Shift(yy_state_796)
    NT_non_empty_list_commas_id_type_decl_binder__ => Shift(yy_state_797)
    NT_non_empty_list_commas_rev_id_type_decl_binder__ => Shift(yy_state_799)
    T_UNDERSCORE => Shift(yy_state_802)
    T_UIDENT => Shift(yy_state_803)
    _ => Error
  }
}

///|
fn yy_state_796(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_id_type_decl_binder__,
    yy_action_299,
  )
}

///|
fn yy_state_797(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_798)
    _ => Error
  }
}

///|
fn yy_state_798(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
    yy_action_297,
  )
}

///|
fn yy_state_799(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_800)
    NT_option_COMMA_ => Shift(yy_state_804)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_800(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_decl_binder => Shift(yy_state_801)
    T_UNDERSCORE => Shift(yy_state_802)
    T_UIDENT => Shift(yy_state_803)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_801(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_id_type_decl_binder__,
    yy_action_295,
  )
}

///|
fn yy_state_802(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_type_decl_binder, yy_action_294)
}

///|
fn yy_state_803(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_type_decl_binder, yy_action_293)
}

///|
fn yy_state_804(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_id_type_decl_binder__,
    yy_action_292,
  )
}

///|
fn yy_state_805(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_enum_header, yy_action_291)
}

///|
fn yy_state_806(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_optional_type_parameters_no_constraints,
    yy_action_290,
  )
}

///|
fn yy_state_807(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_808)
    _ => Error
  }
}

///|
fn yy_state_808(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_809)
    T_LPAREN | T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_809(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_struct_header, yy_action_289)
}

///|
fn yy_state_810(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_811)
    _ => Error
  }
}

///|
fn yy_state_811(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_suberror_header, yy_action_288)
}

///|
fn yy_state_812(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_813)
    _ => Error
  }
}

///|
fn yy_state_813(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_814)
    T_UIDENT
    | T_EOF
    | T_DERIVE
    | T_ASYNC
    | T_LPAREN
    | T_SEMI
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_814(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_type_header, yy_action_287)
}

///|
fn yy_state_815(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_optional_type_parameters => Shift(yy_state_817)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    T_UIDENT => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_816(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_type_parameters_, yy_action_285)
}

///|
fn yy_state_817(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_818)
    _ => Error
  }
}

///|
fn yy_state_818(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_819)
    _ => Error
  }
}

///|
fn yy_state_819(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_848)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_820(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_821)
    NT_option_SEMI_ => Shift(yy_state_846)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_821(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_822)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_732)
    _ => Error
  }
}

///|
fn yy_state_822(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_non_empty_list_semis_enum_constructor_, yy_action_283)
}

///|
fn yy_state_823(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_824)
    _ => Error
  }
}

///|
fn yy_state_824(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_825)
    NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__ =>
      Shift(yy_state_839)
    T_EQUAL | T_SEMI | T_RBRACE =>
      Reduce(
        0,
        NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__,
        yy_action_282,
      )
    _ => Error
  }
}

///|
fn yy_state_825(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_constructor_param => Shift(yy_state_826)
    NT_non_empty_list_commas_constructor_param_ => Shift(yy_state_827)
    NT_non_empty_list_commas_rev_constructor_param_ => Shift(yy_state_829)
    T_MUTABLE => Shift(yy_state_833)
    NT_option_MUTABLE_ => Shift(yy_state_834)
    T_UIDENT
    | T_POST_LABEL
    | T_ASYNC
    | T_LPAREN
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_826(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_constructor_param_,
    yy_action_280,
  )
}

///|
fn yy_state_827(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_828)
    _ => Error
  }
}

///|
fn yy_state_828(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__,
    yy_action_278,
  )
}

///|
fn yy_state_829(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_830)
    T_COMMA => Shift(yy_state_831)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_830(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_constructor_param_,
    yy_action_277,
  )
}

///|
fn yy_state_831(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_constructor_param => Shift(yy_state_832)
    T_MUTABLE => Shift(yy_state_833)
    NT_option_MUTABLE_ => Shift(yy_state_834)
    T_UIDENT
    | T_POST_LABEL
    | T_ASYNC
    | T_LPAREN
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_832(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_constructor_param_,
    yy_action_276,
  )
}

///|
fn yy_state_833(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_MUTABLE_, yy_action_275)
}

///|
fn yy_state_834(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    T_POST_LABEL => Shift(yy_state_835)
    NT_type_ => Shift(yy_state_838)
    _ => Error
  }
}

///|
fn yy_state_835(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_836)
    _ => Error
  }
}

///|
fn yy_state_836(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_837)
    _ => Error
  }
}

///|
fn yy_state_837(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_constructor_param, yy_action_274)
}

///|
fn yy_state_838(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_constructor_param, yy_action_273)
}

///|
fn yy_state_839(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_840)
    NT_option_eq_int_tag_ => Shift(yy_state_842)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_eq_int_tag_, yy_action_272)
    _ => Error
  }
}

///|
fn yy_state_840(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_INT => Shift(yy_state_841)
    _ => Error
  }
}

///|
fn yy_state_841(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_eq_int_tag_, yy_action_270)
}

///|
fn yy_state_842(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_enum_constructor, yy_action_269)
}

///|
fn yy_state_843(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_825)
    NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__ =>
      Shift(yy_state_844)
    T_EQUAL | T_SEMI | T_RBRACE =>
      Reduce(
        0,
        NT_option_delimited_LPAREN_non_empty_list_commas_constructor_param__RPAREN__,
        yy_action_282,
      )
    _ => Error
  }
}

///|
fn yy_state_844(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_840)
    NT_option_eq_int_tag_ => Shift(yy_state_845)
    T_SEMI | T_RBRACE => Reduce(0, NT_option_eq_int_tag_, yy_action_272)
    _ => Error
  }
}

///|
fn yy_state_845(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_enum_constructor, yy_action_268)
}

///|
fn yy_state_846(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_enum_constructor_, yy_action_267)
}

///|
fn yy_state_847(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_enum_constructor_, yy_action_266)
}

///|
fn yy_state_848(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_849)
    _ => Error
  }
}

///|
fn yy_state_849(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_850)
    _ => Error
  }
}

///|
fn yy_state_850(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_851)
    _ => Error
  }
}

///|
fn yy_state_851(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_852)
    _ => Error
  }
}

///|
fn yy_state_852(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_853)
    _ => Error
  }
}

///|
fn yy_state_853(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_854)
    _ => Error
  }
}

///|
fn yy_state_854(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_855)
    _ => Error
  }
}

///|
fn yy_state_855(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(12, NT_structure_item, yy_action_265)
}

///|
fn yy_state_856(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_optional_type_parameters, yy_action_264)
}

///|
fn yy_state_857(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_tvar_binder => Shift(yy_state_858)
    NT_non_empty_list_commas_rev_id_tvar_binder__ => Shift(yy_state_859)
    T_UIDENT => Shift(yy_state_862)
    NT_non_empty_list_commas_id_tvar_binder__ => Shift(yy_state_870)
    _ => Error
  }
}

///|
fn yy_state_858(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_id_tvar_binder__,
    yy_action_263,
  )
}

///|
fn yy_state_859(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_860)
    NT_option_COMMA_ => Shift(yy_state_869)
    T_RBRACKET => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_860(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_tvar_binder => Shift(yy_state_861)
    T_UIDENT => Shift(yy_state_862)
    T_RBRACKET => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_861(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_id_tvar_binder__,
    yy_action_261,
  )
}

///|
fn yy_state_862(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_863)
    T_COMMA | T_RBRACKET => Reduce(1, NT_tvar_binder, yy_action_260)
    _ => Error
  }
}

///|
fn yy_state_863(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_tvar_constraint => Shift(yy_state_864)
    NT_qual_ident_ty => Shift(yy_state_867)
    NT_separated_nonempty_list_PLUS_tvar_constraint_ => Shift(yy_state_868)
    _ => Error
  }
}

///|
fn yy_state_864(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PLUS => Shift(yy_state_865)
    T_COMMA | T_RBRACKET | T_LBRACE =>
      Reduce(1, NT_separated_nonempty_list_PLUS_tvar_constraint_, yy_action_259)
    _ => Error
  }
}

///|
fn yy_state_865(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_tvar_constraint => Shift(yy_state_864)
    NT_separated_nonempty_list_PLUS_tvar_constraint_ => Shift(yy_state_866)
    NT_qual_ident_ty => Shift(yy_state_867)
    _ => Error
  }
}

///|
fn yy_state_866(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_separated_nonempty_list_PLUS_tvar_constraint_,
    yy_action_258,
  )
}

///|
fn yy_state_867(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_tvar_constraint, yy_action_257)
}

///|
fn yy_state_868(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_tvar_binder, yy_action_256)
}

///|
fn yy_state_869(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_commas_id_tvar_binder__, yy_action_255)
}

///|
fn yy_state_870(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACKET => Shift(yy_state_871)
    _ => Error
  }
}

///|
fn yy_state_871(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_type_parameters, yy_action_253)
}

///|
fn yy_state_872(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_873)
    T_UIDENT | T_AMPER | T_PACKAGE_NAME =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_873(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_type_name => Shift(yy_state_874)
    _ => Error
  }
}

///|
fn yy_state_874(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_875)
    T_FOR => Shift(yy_state_966)
    _ => Error
  }
}

///|
fn yy_state_875(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_876)
    _ => Error
  }
}

///|
fn yy_state_876(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_877)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_877(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_878)
    _ => Error
  }
}

///|
fn yy_state_878(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_879)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_879(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_impl_body => Shift(yy_state_880)
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    _ => Error
  }
}

///|
fn yy_state_880(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_structure_item, yy_action_252)
}

///|
fn yy_state_881(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_882)
    _ => Error
  }
}

///|
fn yy_state_882(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_impl_body, yy_action_251)
}

///|
fn yy_state_883(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_impl_body, yy_action_250)
}

///|
fn yy_state_884(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    NT_statement => Shift(yy_state_276)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_277)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_534)
    T_RETURN => Shift(yy_state_535)
    T_CONTINUE => Shift(yy_state_538)
    T_BREAK => Shift(yy_state_547)
    T_GUARD => Shift(yy_state_672)
    NT_expr_statement => Shift(yy_state_676)
    T_DEFER => Shift(yy_state_677)
    NT_guard_statement => Shift(yy_state_679)
    NT_fn_header => Shift(yy_state_680)
    T_ASYNC => Shift(yy_state_683)
    T_LETREC => Shift(yy_state_694)
    T_LET => Shift(yy_state_720)
    T_FN => Shift(yy_state_736)
    NT_non_empty_list_semis_rev_statement_ => Shift(yy_state_743)
    NT_local_types_and_stmts => Shift(yy_state_885)
    NT_list_semis_rev_statement_ => Shift(yy_state_887)
    NT_local_type_decl => Shift(yy_state_888)
    T_TYPE => Shift(yy_state_891)
    T_ENUM => Shift(yy_state_909)
    T_STRUCT => Shift(yy_state_915)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACE => Reduce(0, NT_list_semis_rev_statement_, yy_action_587)
    _ => Error
  }
}

///|
fn yy_state_885(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_886)
    _ => Error
  }
}

///|
fn yy_state_886(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_block_expr_with_local_types, yy_action_249)
}

///|
fn yy_state_887(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_local_types_and_stmts, yy_action_248)
}

///|
fn yy_state_888(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_889)
    T_RBRACE => Reduce(1, NT_local_types_and_stmts, yy_action_247)
    _ => Error
  }
}

///|
fn yy_state_889(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    NT_statement => Shift(yy_state_276)
    NT_non_empty_list_semi_rev_aux_statement_ => Shift(yy_state_277)
    NT_type_name => Shift(yy_state_280)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    NT_prefix_expr => Shift(yy_state_337)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    NT_qual_ident => Shift(yy_state_379)
    NT_simple_expr => Shift(yy_state_380)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    NT_expr => Shift(yy_state_484)
    NT_left_value => Shift(yy_state_485)
    T_ELLIPSIS => Shift(yy_state_490)
    T_RAISE => Shift(yy_state_491)
    T_PACKAGE_NAME => Shift(yy_state_493)
    T_LIDENT => Shift(yy_state_495)
    NT_expr_statement_no_break_continue_return => Shift(yy_state_534)
    T_RETURN => Shift(yy_state_535)
    T_CONTINUE => Shift(yy_state_538)
    T_BREAK => Shift(yy_state_547)
    T_GUARD => Shift(yy_state_672)
    NT_expr_statement => Shift(yy_state_676)
    T_DEFER => Shift(yy_state_677)
    NT_guard_statement => Shift(yy_state_679)
    NT_fn_header => Shift(yy_state_680)
    T_ASYNC => Shift(yy_state_683)
    T_LETREC => Shift(yy_state_694)
    T_LET => Shift(yy_state_720)
    T_FN => Shift(yy_state_736)
    NT_non_empty_list_semis_rev_statement_ => Shift(yy_state_743)
    NT_list_semis_rev_statement_ => Shift(yy_state_887)
    NT_local_type_decl => Shift(yy_state_888)
    NT_local_types_and_stmts => Shift(yy_state_890)
    T_TYPE => Shift(yy_state_891)
    T_ENUM => Shift(yy_state_909)
    T_STRUCT => Shift(yy_state_915)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RBRACE => Reduce(0, NT_list_semis_rev_statement_, yy_action_587)
    _ => Error
  }
}

///|
fn yy_state_890(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_local_types_and_stmts, yy_action_246)
}

///|
fn yy_state_891(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_892)
    _ => Error
  }
}

///|
fn yy_state_892(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_893)
    _ => Error
  }
}

///|
fn yy_state_893(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_908)
    T_SEMI | T_RBRACE => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_894(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_895)
    _ => Error
  }
}

///|
fn yy_state_895(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_deriving_directive => Shift(yy_state_896)
    NT_non_empty_list_commas_rev_deriving_directive_ => Shift(yy_state_897)
    NT_type_name => Shift(yy_state_901)
    NT_non_empty_list_commas_deriving_directive_ => Shift(yy_state_905)
    NT_list_commas_deriving_directive_ => Shift(yy_state_906)
    T_RPAREN => Reduce(0, NT_list_commas_deriving_directive_, yy_action_244)
    _ => Error
  }
}

///|
fn yy_state_896(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_deriving_directive_,
    yy_action_243,
  )
}

///|
fn yy_state_897(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_898)
    T_COMMA => Shift(yy_state_899)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_898(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_deriving_directive_,
    yy_action_242,
  )
}

///|
fn yy_state_899(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_deriving_directive => Shift(yy_state_900)
    NT_type_name => Shift(yy_state_901)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_900(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_deriving_directive_,
    yy_action_241,
  )
}

///|
fn yy_state_901(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_902)
    T_RPAREN | T_COMMA => Reduce(1, NT_deriving_directive, yy_action_240)
    _ => Error
  }
}

///|
fn yy_state_902(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    NT_argument => Shift(yy_state_298)
    NT_non_empty_list_commas_rev_argument_ => Shift(yy_state_299)
    NT_expr => Shift(yy_state_303)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_non_empty_list_commas_argument_ => Shift(yy_state_345)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_570)
    T_LIDENT => Shift(yy_state_573)
    NT_list_commas_argument_ => Shift(yy_state_903)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    T_RPAREN => Reduce(0, NT_list_commas_argument_, yy_action_575)
    _ => Error
  }
}

///|
fn yy_state_903(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_904)
    _ => Error
  }
}

///|
fn yy_state_904(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_deriving_directive, yy_action_239)
}

///|
fn yy_state_905(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_deriving_directive_, yy_action_238)
}

///|
fn yy_state_906(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_907)
    _ => Error
  }
}

///|
fn yy_state_907(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_deriving_directive_list, yy_action_237)
}

///|
fn yy_state_908(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_local_type_decl, yy_action_236)
}

///|
fn yy_state_909(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_910)
    _ => Error
  }
}

///|
fn yy_state_910(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_911)
    _ => Error
  }
}

///|
fn yy_state_911(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_912)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_912(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_913)
    _ => Error
  }
}

///|
fn yy_state_913(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_914)
    T_SEMI | T_RBRACE => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_914(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_local_type_decl, yy_action_235)
}

///|
fn yy_state_915(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_916)
    _ => Error
  }
}

///|
fn yy_state_916(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_917)
    T_LBRACE => Shift(yy_state_921)
    _ => Error
  }
}

///|
fn yy_state_917(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_142)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_143)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_non_empty_list_commas_type__ => Shift(yy_state_918)
    _ => Error
  }
}

///|
fn yy_state_918(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_919)
    _ => Error
  }
}

///|
fn yy_state_919(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_920)
    T_SEMI | T_RBRACE => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_920(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_local_type_decl, yy_action_234)
}

///|
fn yy_state_921(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    T_MUTABLE => Shift(yy_state_833)
    NT_record_decl_field => Shift(yy_state_922)
    NT_non_empty_list_attribute_ => Shift(yy_state_925)
    T_PUB => Shift(yy_state_946)
    T_PRIV => Shift(yy_state_952)
    NT_option_MUTABLE_ => Shift(yy_state_957)
    NT_non_empty_list_semis_record_decl_field_ => Shift(yy_state_962)
    NT_list_semis_record_decl_field_ => Shift(yy_state_963)
    T_RBRACE => Reduce(0, NT_list_semis_record_decl_field_, yy_action_233)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_922(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_923)
    NT_option_SEMI_ => Shift(yy_state_961)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_923(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    T_MUTABLE => Shift(yy_state_833)
    NT_record_decl_field => Shift(yy_state_922)
    NT_non_empty_list_semis_record_decl_field_ => Shift(yy_state_924)
    NT_non_empty_list_attribute_ => Shift(yy_state_925)
    T_PUB => Shift(yy_state_946)
    T_PRIV => Shift(yy_state_952)
    NT_option_MUTABLE_ => Shift(yy_state_957)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_732)
    _ => Error
  }
}

///|
fn yy_state_924(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_semis_record_decl_field_,
    yy_action_232,
  )
}

///|
fn yy_state_925(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_833)
    T_PUB => Shift(yy_state_926)
    T_PRIV => Shift(yy_state_937)
    NT_option_MUTABLE_ => Shift(yy_state_942)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_926(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_pub_attr => Shift(yy_state_927)
    T_LPAREN => Shift(yy_state_932)
    T_LIDENT | T_MUTABLE => Reduce(0, NT_pub_attr, yy_action_231)
    _ => Error
  }
}

///|
fn yy_state_927(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_833)
    NT_option_MUTABLE_ => Shift(yy_state_928)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_928(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_929)
    _ => Error
  }
}

///|
fn yy_state_929(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_930)
    _ => Error
  }
}

///|
fn yy_state_930(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_931)
    _ => Error
  }
}

///|
fn yy_state_931(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_record_decl_field, yy_action_230)
}

///|
fn yy_state_932(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_933)
    T_READONLY => Shift(yy_state_935)
    _ => Error
  }
}

///|
fn yy_state_933(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_934)
    _ => Error
  }
}

///|
fn yy_state_934(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_pub_attr, yy_action_229)
}

///|
fn yy_state_935(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_936)
    _ => Error
  }
}

///|
fn yy_state_936(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_pub_attr, yy_action_228)
}

///|
fn yy_state_937(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_833)
    NT_option_MUTABLE_ => Shift(yy_state_938)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_938(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_939)
    _ => Error
  }
}

///|
fn yy_state_939(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_940)
    _ => Error
  }
}

///|
fn yy_state_940(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_941)
    _ => Error
  }
}

///|
fn yy_state_941(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_record_decl_field, yy_action_227)
}

///|
fn yy_state_942(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_943)
    _ => Error
  }
}

///|
fn yy_state_943(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_944)
    _ => Error
  }
}

///|
fn yy_state_944(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_945)
    _ => Error
  }
}

///|
fn yy_state_945(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_record_decl_field, yy_action_226)
}

///|
fn yy_state_946(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_932)
    NT_pub_attr => Shift(yy_state_947)
    T_LIDENT | T_MUTABLE => Reduce(0, NT_pub_attr, yy_action_231)
    _ => Error
  }
}

///|
fn yy_state_947(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_833)
    NT_option_MUTABLE_ => Shift(yy_state_948)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_948(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_949)
    _ => Error
  }
}

///|
fn yy_state_949(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_950)
    _ => Error
  }
}

///|
fn yy_state_950(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_951)
    _ => Error
  }
}

///|
fn yy_state_951(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_record_decl_field, yy_action_225)
}

///|
fn yy_state_952(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MUTABLE => Shift(yy_state_833)
    NT_option_MUTABLE_ => Shift(yy_state_953)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_953(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_954)
    _ => Error
  }
}

///|
fn yy_state_954(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_955)
    _ => Error
  }
}

///|
fn yy_state_955(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_956)
    _ => Error
  }
}

///|
fn yy_state_956(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_record_decl_field, yy_action_224)
}

///|
fn yy_state_957(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_958)
    _ => Error
  }
}

///|
fn yy_state_958(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_959)
    _ => Error
  }
}

///|
fn yy_state_959(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_960)
    _ => Error
  }
}

///|
fn yy_state_960(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_record_decl_field, yy_action_223)
}

///|
fn yy_state_961(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_semis_record_decl_field_,
    yy_action_222,
  )
}

///|
fn yy_state_962(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_record_decl_field_, yy_action_221)
}

///|
fn yy_state_963(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_964)
    _ => Error
  }
}

///|
fn yy_state_964(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_965)
    T_SEMI | T_RBRACE => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_965(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_local_type_decl, yy_action_220)
}

///|
fn yy_state_966(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_967)
    _ => Error
  }
}

///|
fn yy_state_967(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_968)
    T_EOF | T_SEMI => Reduce(5, NT_structure_item, yy_action_219)
    _ => Error
  }
}

///|
fn yy_state_968(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_969)
    _ => Error
  }
}

///|
fn yy_state_969(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_970)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_970(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_971)
    _ => Error
  }
}

///|
fn yy_state_971(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_972)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_972(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_973)
    _ => Error
  }
}

///|
fn yy_state_973(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_structure_item, yy_action_218)
}

///|
fn yy_state_974(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_975)
    NT_option_loced_string_ => Shift(yy_state_976)
    T_LPAREN | T_LBRACE => Reduce(0, NT_option_loced_string_, yy_action_217)
    _ => Error
  }
}

///|
fn yy_state_975(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_loced_string_, yy_action_215)
}

///|
fn yy_state_976(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_978)
    T_LBRACE => Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_977(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_parameters_, yy_action_213)
}

///|
fn yy_state_978(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_884)
    NT_block_expr_with_local_types => Shift(yy_state_979)
    _ => Error
  }
}

///|
fn yy_state_979(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_212)
}

///|
fn yy_state_980(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_PACKAGE_NAME => Shift(yy_state_985)
    NT_batch_type_alias_targets => Shift(yy_state_998)
    _ => Error
  }
}

///|
fn yy_state_981(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_982)
    T_EOF | T_RPAREN | T_COMMA | T_SEMI =>
      Reduce(1, NT_batch_type_alias_target_UIDENT_, yy_action_211)
    _ => Error
  }
}

///|
fn yy_state_982(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_983)
    _ => Error
  }
}

///|
fn yy_state_983(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_batch_type_alias_target_UIDENT_, yy_action_210)
}

///|
fn yy_state_984(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_batch_type_alias_targets, yy_action_209)
}

///|
fn yy_state_985(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_986)
    T_DOT_LPAREN => Shift(yy_state_989)
    NT_batch_type_alias_target_DOT_UIDENT_ => Shift(yy_state_997)
    _ => Error
  }
}

///|
fn yy_state_986(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_987)
    T_EOF | T_SEMI =>
      Reduce(1, NT_batch_type_alias_target_DOT_UIDENT_, yy_action_208)
    _ => Error
  }
}

///|
fn yy_state_987(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_988)
    _ => Error
  }
}

///|
fn yy_state_988(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_batch_type_alias_target_DOT_UIDENT_, yy_action_207)
}

///|
fn yy_state_989(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_990)
    NT_non_empty_list_commas_rev_batch_type_alias_target_UIDENT__ =>
      Shift(yy_state_991)
    NT_non_empty_list_commas_batch_type_alias_target_UIDENT__ =>
      Shift(yy_state_995)
    _ => Error
  }
}

///|
fn yy_state_990(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_batch_type_alias_target_UIDENT__,
    yy_action_206,
  )
}

///|
fn yy_state_991(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_992)
    NT_option_COMMA_ => Shift(yy_state_994)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_992(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_993)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_993(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_batch_type_alias_target_UIDENT__,
    yy_action_205,
  )
}

///|
fn yy_state_994(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_batch_type_alias_target_UIDENT__,
    yy_action_204,
  )
}

///|
fn yy_state_995(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_996)
    _ => Error
  }
}

///|
fn yy_state_996(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_batch_type_alias_targets, yy_action_203)
}

///|
fn yy_state_997(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_batch_type_alias_targets, yy_action_202)
}

///|
fn yy_state_998(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_201)
}

///|
fn yy_state_999(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_UIDENT => Shift(yy_state_1000)
    T_PACKAGE_NAME => Shift(yy_state_1001)
    NT_type_ => Shift(yy_state_1003)
    NT_batch_type_alias_targets => Shift(yy_state_1007)
    _ => Error
  }
}

///|
fn yy_state_1000(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_147)
    T_AS => Shift(yy_state_982)
    T_QUESTION => Reduce(1, NT_simple_type, yy_action_674)
    T_EOF | T_SEMI =>
      Reduce(1, NT_batch_type_alias_target_UIDENT_, yy_action_211)
    _ => Error
  }
}

///|
fn yy_state_1001(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_LIDENT => Shift(yy_state_184)
    T_DOT_LPAREN => Shift(yy_state_989)
    NT_batch_type_alias_target_DOT_UIDENT_ => Shift(yy_state_997)
    T_DOT_UIDENT => Shift(yy_state_1002)
    _ => Error
  }
}

///|
fn yy_state_1002(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_141)
    T_AS => Shift(yy_state_987)
    T_EOF | T_SEMI =>
      Reduce(1, NT_batch_type_alias_target_DOT_UIDENT_, yy_action_208)
    T_QUESTION => Reduce(2, NT_simple_type, yy_action_677)
    _ => Error
  }
}

///|
fn yy_state_1003(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1004)
    _ => Error
  }
}

///|
fn yy_state_1004(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1005)
    _ => Error
  }
}

///|
fn yy_state_1005(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1006)
    T_EOF | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1006(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_200)
}

///|
fn yy_state_1007(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_199)
}

///|
fn yy_state_1008(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1009)
    _ => Error
  }
}

///|
fn yy_state_1009(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1010)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ =>
      Shift(yy_state_1012)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___,
        yy_action_198,
      )
    _ => Error
  }
}

///|
fn yy_state_1010(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_tvar_constraint => Shift(yy_state_864)
    NT_qual_ident_ty => Shift(yy_state_867)
    NT_separated_nonempty_list_PLUS_tvar_constraint_ => Shift(yy_state_1011)
    _ => Error
  }
}

///|
fn yy_state_1011(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___,
    yy_action_196,
  )
}

///|
fn yy_state_1012(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1013)
    _ => Error
  }
}

///|
fn yy_state_1013(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_trait_method_decl => Shift(yy_state_1014)
    NT_non_empty_list_attribute_ => Shift(yy_state_1017)
    T_LIDENT => Shift(yy_state_1051)
    T_ASYNC => Shift(yy_state_1059)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_1069)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1070)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_195)
    _ => Error
  }
}

///|
fn yy_state_1014(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_SEMI => Shift(yy_state_1015)
    NT_option_SEMI_ => Shift(yy_state_1068)
    T_RBRACE => Reduce(0, NT_option_SEMI_, yy_action_734)
    _ => Error
  }
}

///|
fn yy_state_1015(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_trait_method_decl => Shift(yy_state_1014)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_1016)
    NT_non_empty_list_attribute_ => Shift(yy_state_1017)
    T_LIDENT => Shift(yy_state_1051)
    T_ASYNC => Shift(yy_state_1059)
    T_RBRACE => Reduce(1, NT_option_SEMI_, yy_action_732)
    _ => Error
  }
}

///|
fn yy_state_1016(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_semis_trait_method_decl_,
    yy_action_194,
  )
}

///|
fn yy_state_1017(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1018)
    T_ASYNC => Shift(yy_state_1042)
    _ => Error
  }
}

///|
fn yy_state_1018(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1019)
    T_LPAREN | T_LBRACKET => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1019(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1020)
    T_LPAREN => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1020(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_1021)
    _ => Error
  }
}

///|
fn yy_state_1021(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_trait_method_param => Shift(yy_state_1022)
    NT_non_empty_list_commas_rev_trait_method_param_ => Shift(yy_state_1023)
    T_POST_LABEL => Shift(yy_state_1027)
    T_LIDENT => Shift(yy_state_1030)
    NT_type_ => Shift(yy_state_1033)
    NT_non_empty_list_commas_trait_method_param_ => Shift(yy_state_1034)
    NT_list_commas_trait_method_param_ => Shift(yy_state_1035)
    T_RPAREN => Reduce(0, NT_list_commas_trait_method_param_, yy_action_193)
    _ => Error
  }
}

///|
fn yy_state_1022(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_trait_method_param_,
    yy_action_192,
  )
}

///|
fn yy_state_1023(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_option_COMMA_ => Shift(yy_state_1024)
    T_COMMA => Shift(yy_state_1025)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_1024(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_trait_method_param_,
    yy_action_191,
  )
}

///|
fn yy_state_1025(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_trait_method_param => Shift(yy_state_1026)
    T_POST_LABEL => Shift(yy_state_1027)
    T_LIDENT => Shift(yy_state_1030)
    NT_type_ => Shift(yy_state_1033)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_1026(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_trait_method_param_,
    yy_action_190,
  )
}

///|
fn yy_state_1027(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1028)
    _ => Error
  }
}

///|
fn yy_state_1028(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1029)
    _ => Error
  }
}

///|
fn yy_state_1029(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_trait_method_param, yy_action_189)
}

///|
fn yy_state_1030(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1031)
    _ => Error
  }
}

///|
fn yy_state_1031(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1032)
    _ => Error
  }
}

///|
fn yy_state_1032(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_trait_method_param, yy_action_188)
}

///|
fn yy_state_1033(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_trait_method_param, yy_action_187)
}

///|
fn yy_state_1034(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_commas_trait_method_param_, yy_action_186)
}

///|
fn yy_state_1035(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1036)
    _ => Error
  }
}

///|
fn yy_state_1036(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1037)
    T_EQUAL | T_SEMI | T_RBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1037(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1038)
    NT_option_preceded_EQUAL_wildcard__ => Shift(yy_state_1041)
    T_SEMI | T_RBRACE =>
      Reduce(0, NT_option_preceded_EQUAL_wildcard__, yy_action_185)
    _ => Error
  }
}

///|
fn yy_state_1038(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_wildcard => Shift(yy_state_1039)
    T_UNDERSCORE => Shift(yy_state_1040)
    _ => Error
  }
}

///|
fn yy_state_1039(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_preceded_EQUAL_wildcard__, yy_action_183)
}

///|
fn yy_state_1040(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_wildcard, yy_action_182)
}

///|
fn yy_state_1041(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_trait_method_decl, yy_action_181)
}

///|
fn yy_state_1042(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1043)
    _ => Error
  }
}

///|
fn yy_state_1043(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1044)
    T_LPAREN | T_LBRACKET => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1044(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1045)
    T_LPAREN => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1045(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_1046)
    _ => Error
  }
}

///|
fn yy_state_1046(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_trait_method_param => Shift(yy_state_1022)
    NT_non_empty_list_commas_rev_trait_method_param_ => Shift(yy_state_1023)
    T_POST_LABEL => Shift(yy_state_1027)
    T_LIDENT => Shift(yy_state_1030)
    NT_type_ => Shift(yy_state_1033)
    NT_non_empty_list_commas_trait_method_param_ => Shift(yy_state_1034)
    NT_list_commas_trait_method_param_ => Shift(yy_state_1047)
    T_RPAREN => Reduce(0, NT_list_commas_trait_method_param_, yy_action_193)
    _ => Error
  }
}

///|
fn yy_state_1047(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1048)
    _ => Error
  }
}

///|
fn yy_state_1048(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1049)
    T_EQUAL | T_SEMI | T_RBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1049(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1038)
    NT_option_preceded_EQUAL_wildcard__ => Shift(yy_state_1050)
    T_SEMI | T_RBRACE =>
      Reduce(0, NT_option_preceded_EQUAL_wildcard__, yy_action_185)
    _ => Error
  }
}

///|
fn yy_state_1050(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_trait_method_decl, yy_action_180)
}

///|
fn yy_state_1051(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1052)
    T_LPAREN | T_LBRACKET => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1052(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1053)
    T_LPAREN => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1053(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_1054)
    _ => Error
  }
}

///|
fn yy_state_1054(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_trait_method_param => Shift(yy_state_1022)
    NT_non_empty_list_commas_rev_trait_method_param_ => Shift(yy_state_1023)
    T_POST_LABEL => Shift(yy_state_1027)
    T_LIDENT => Shift(yy_state_1030)
    NT_type_ => Shift(yy_state_1033)
    NT_non_empty_list_commas_trait_method_param_ => Shift(yy_state_1034)
    NT_list_commas_trait_method_param_ => Shift(yy_state_1055)
    T_RPAREN => Reduce(0, NT_list_commas_trait_method_param_, yy_action_193)
    _ => Error
  }
}

///|
fn yy_state_1055(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1056)
    _ => Error
  }
}

///|
fn yy_state_1056(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1057)
    T_EQUAL | T_SEMI | T_RBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1057(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1038)
    NT_option_preceded_EQUAL_wildcard__ => Shift(yy_state_1058)
    T_SEMI | T_RBRACE =>
      Reduce(0, NT_option_preceded_EQUAL_wildcard__, yy_action_185)
    _ => Error
  }
}

///|
fn yy_state_1058(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_trait_method_decl, yy_action_179)
}

///|
fn yy_state_1059(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1060)
    _ => Error
  }
}

///|
fn yy_state_1060(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1061)
    T_LPAREN | T_LBRACKET => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1061(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1062)
    T_LPAREN => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1062(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_1063)
    _ => Error
  }
}

///|
fn yy_state_1063(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_trait_method_param => Shift(yy_state_1022)
    NT_non_empty_list_commas_rev_trait_method_param_ => Shift(yy_state_1023)
    T_POST_LABEL => Shift(yy_state_1027)
    T_LIDENT => Shift(yy_state_1030)
    NT_type_ => Shift(yy_state_1033)
    NT_non_empty_list_commas_trait_method_param_ => Shift(yy_state_1034)
    NT_list_commas_trait_method_param_ => Shift(yy_state_1064)
    T_RPAREN => Reduce(0, NT_list_commas_trait_method_param_, yy_action_193)
    _ => Error
  }
}

///|
fn yy_state_1064(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1065)
    _ => Error
  }
}

///|
fn yy_state_1065(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1066)
    T_EQUAL | T_SEMI | T_RBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1066(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1038)
    NT_option_preceded_EQUAL_wildcard__ => Shift(yy_state_1067)
    T_SEMI | T_RBRACE =>
      Reduce(0, NT_option_preceded_EQUAL_wildcard__, yy_action_185)
    _ => Error
  }
}

///|
fn yy_state_1067(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_trait_method_decl, yy_action_178)
}

///|
fn yy_state_1068(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_semis_trait_method_decl_,
    yy_action_177,
  )
}

///|
fn yy_state_1069(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_trait_method_decl_, yy_action_176)
}

///|
fn yy_state_1070(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1071)
    _ => Error
  }
}

///|
fn yy_state_1071(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_175)
}

///|
fn yy_state_1072(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1073)
    T_LIDENT => Shift(yy_state_1075)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_1080)
    T_PACKAGE_NAME => Shift(yy_state_1090)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_1105)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1107)
    NT_func_alias_targets => Shift(yy_state_1108)
    T_LPAREN =>
      Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_174)
    _ => Error
  }
}

///|
fn yy_state_1073(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_1074)
    _ => Error
  }
}

///|
fn yy_state_1074(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_type_name_LIDENT_UIDENT_, yy_action_173)
}

///|
fn yy_state_1075(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1076)
    NT_option_preceded_AS_binder__ => Shift(yy_state_1078)
    T_COLONCOLON => Shift(yy_state_1079)
    T_EOF | T_SEMI => Reduce(0, NT_option_preceded_AS_binder__, yy_action_172)
    _ => Error
  }
}

///|
fn yy_state_1076(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1077)
    _ => Error
  }
}

///|
fn yy_state_1077(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_option_preceded_AS_binder__, yy_action_170)
}

///|
fn yy_state_1078(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_target_LIDENT_, yy_action_169)
}

///|
fn yy_state_1079(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_type_name_LIDENT_UIDENT_, yy_action_168)
}

///|
fn yy_state_1080(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_1081)
    _ => Error
  }
}

///|
fn yy_state_1081(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1082)
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__ =>
      Shift(yy_state_1083)
    T_LIDENT => Shift(yy_state_1086)
    NT_non_empty_list_commas_func_alias_target_LIDENT__ => Shift(yy_state_1088)
    _ => Error
  }
}

///|
fn yy_state_1082(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    1,
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__,
    yy_action_167,
  )
}

///|
fn yy_state_1083(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COMMA => Shift(yy_state_1084)
    NT_option_COMMA_ => Shift(yy_state_1087)
    T_RPAREN => Reduce(0, NT_option_COMMA_, yy_action_749)
    _ => Error
  }
}

///|
fn yy_state_1084(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1085)
    T_LIDENT => Shift(yy_state_1086)
    T_RPAREN => Reduce(1, NT_option_COMMA_, yy_action_747)
    _ => Error
  }
}

///|
fn yy_state_1085(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    3,
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__,
    yy_action_166,
  )
}

///|
fn yy_state_1086(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1076)
    NT_option_preceded_AS_binder__ => Shift(yy_state_1078)
    T_EOF | T_RPAREN | T_COMMA | T_SEMI =>
      Reduce(0, NT_option_preceded_AS_binder__, yy_action_172)
    _ => Error
  }
}

///|
fn yy_state_1087(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_non_empty_list_commas_func_alias_target_LIDENT__,
    yy_action_165,
  )
}

///|
fn yy_state_1088(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1089)
    _ => Error
  }
}

///|
fn yy_state_1089(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_func_alias_targets, yy_action_164)
}

///|
fn yy_state_1090(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DOT_UIDENT => Shift(yy_state_1091)
    T_DOT_LIDENT => Shift(yy_state_1093)
    T_DOT_LPAREN => Shift(yy_state_1096)
    NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_ => Shift(yy_state_1099)
    NT_func_alias_target_DOT_LIDENT_ => Shift(yy_state_1104)
    _ => Error
  }
}

///|
fn yy_state_1091(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_1092)
    _ => Error
  }
}

///|
fn yy_state_1092(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_,
    yy_action_163,
  )
}

///|
fn yy_state_1093(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1076)
    T_COLONCOLON => Shift(yy_state_1094)
    NT_option_preceded_AS_binder__ => Shift(yy_state_1095)
    T_EOF | T_SEMI => Reduce(0, NT_option_preceded_AS_binder__, yy_action_172)
    _ => Error
  }
}

///|
fn yy_state_1094(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(
    2,
    NT_func_alias_type_name_DOT_LIDENT_DOT_UIDENT_,
    yy_action_162,
  )
}

///|
fn yy_state_1095(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_target_DOT_LIDENT_, yy_action_161)
}

///|
fn yy_state_1096(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1082)
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__ =>
      Shift(yy_state_1083)
    T_LIDENT => Shift(yy_state_1086)
    NT_non_empty_list_commas_func_alias_target_LIDENT__ => Shift(yy_state_1097)
    _ => Error
  }
}

///|
fn yy_state_1097(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1098)
    _ => Error
  }
}

///|
fn yy_state_1098(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_func_alias_targets, yy_action_160)
}

///|
fn yy_state_1099(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1086)
    T_LPAREN => Shift(yy_state_1100)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1103)
    _ => Error
  }
}

///|
fn yy_state_1100(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1082)
    NT_non_empty_list_commas_rev_func_alias_target_LIDENT__ =>
      Shift(yy_state_1083)
    T_LIDENT => Shift(yy_state_1086)
    NT_non_empty_list_commas_func_alias_target_LIDENT__ => Shift(yy_state_1101)
    _ => Error
  }
}

///|
fn yy_state_1101(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1102)
    _ => Error
  }
}

///|
fn yy_state_1102(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_func_alias_targets, yy_action_159)
}

///|
fn yy_state_1103(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_func_alias_targets, yy_action_158)
}

///|
fn yy_state_1104(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_targets, yy_action_157)
}

///|
fn yy_state_1105(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1086)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1106)
    T_LPAREN =>
      Reduce(1, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_156)
    _ => Error
  }
}

///|
fn yy_state_1106(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_func_alias_targets, yy_action_154)
}

///|
fn yy_state_1107(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_func_alias_targets, yy_action_152)
}

///|
fn yy_state_1108(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_151)
}

///|
fn yy_state_1109(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1110)
    _ => Error
  }
}

///|
fn yy_state_1110(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MULTILINE_STRING => Shift(yy_state_1111)
    NT_non_empty_list_MULTILINE_STRING_ => Shift(yy_state_1113)
    T_STRING => Shift(yy_state_1114)
    _ => Error
  }
}

///|
fn yy_state_1111(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MULTILINE_STRING => Shift(yy_state_1111)
    NT_non_empty_list_MULTILINE_STRING_ => Shift(yy_state_1112)
    T_EOF | T_SEMI =>
      Reduce(1, NT_non_empty_list_MULTILINE_STRING_, yy_action_150)
    _ => Error
  }
}

///|
fn yy_state_1112(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_MULTILINE_STRING_, yy_action_149)
}

///|
fn yy_state_1113(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_148)
}

///|
fn yy_state_1114(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_147)
}

///|
fn yy_state_1115(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_884)
    NT_block_expr_with_local_types => Shift(yy_state_1116)
    T_EQUAL => Shift(yy_state_1117)
    _ => Error
  }
}

///|
fn yy_state_1116(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_146)
}

///|
fn yy_state_1117(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_MULTILINE_STRING => Shift(yy_state_1111)
    NT_non_empty_list_MULTILINE_STRING_ => Shift(yy_state_1118)
    T_STRING => Shift(yy_state_1119)
    _ => Error
  }
}

///|
fn yy_state_1118(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_145)
}

///|
fn yy_state_1119(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_1120)
    T_EOF | T_SEMI => Reduce(3, NT_structure_item, yy_action_144)
    _ => Error
  }
}

///|
fn yy_state_1120(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_143)
}

///|
fn yy_state_1121(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_1122)
    _ => Error
  }
}

///|
fn yy_state_1122(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_multiline_string => Shift(yy_state_2)
    T_MULTILINE_INTERP => Shift(yy_state_4)
    T_MULTILINE_STRING => Shift(yy_state_5)
    T_STRING => Shift(yy_state_6)
    T_FLOAT => Shift(yy_state_7)
    T_DOUBLE => Shift(yy_state_8)
    T_INT => Shift(yy_state_9)
    T_CHAR => Shift(yy_state_10)
    T_BYTES => Shift(yy_state_11)
    T_BYTE => Shift(yy_state_12)
    T_FALSE => Shift(yy_state_13)
    T_TRUE => Shift(yy_state_14)
    T_INTERP => Shift(yy_state_15)
    NT_non_empty_list_multiline_string_ => Shift(yy_state_16)
    NT_simple_constant => Shift(yy_state_17)
    T_AMPER => Shift(yy_state_18)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_tuple_expr => Shift(yy_state_25)
    T_LBRACKET => Shift(yy_state_26)
    NT_constr => Shift(yy_state_34)
    NT_qual_ident_simple_expr => Shift(yy_state_35)
    NT_atomic_expr => Shift(yy_state_36)
    NT_anony_fn => Shift(yy_state_37)
    T_LBRACE => Shift(yy_state_38)
    NT_fn_header_no_binder => Shift(yy_state_47)
    T_UIDENT => Shift(yy_state_113)
    T_ASYNC => Shift(yy_state_262)
    NT_type_name => Shift(yy_state_280)
    NT_simple_expr => Shift(yy_state_292)
    T_EXCLAMATION => Shift(yy_state_304)
    T_MINUS => Shift(yy_state_319)
    T_PLUS => Shift(yy_state_321)
    T_FN => Shift(yy_state_323)
    NT_prefix_expr => Shift(yy_state_337)
    T_PACKAGE_NAME => Shift(yy_state_340)
    NT_range_expr => Shift(yy_state_348)
    NT_postfix_expr => Shift(yy_state_353)
    NT_infix_expr => Shift(yy_state_354)
    T_UNDERSCORE => Shift(yy_state_377)
    T_LPAREN => Shift(yy_state_385)
    NT_pipe_expr => Shift(yy_state_418)
    NT_arrow_fn_expr => Shift(yy_state_429)
    NT_simple_try_expr => Shift(yy_state_430)
    NT_match_expr => Shift(yy_state_431)
    NT_if_expr => Shift(yy_state_432)
    NT_try_expr => Shift(yy_state_433)
    NT_while_expr => Shift(yy_state_434)
    NT_foreach_expr => Shift(yy_state_435)
    NT_for_expr => Shift(yy_state_436)
    NT_loop_expr => Shift(yy_state_437)
    NT_match_header => Shift(yy_state_438)
    T_MATCH => Shift(yy_state_442)
    T_IF => Shift(yy_state_445)
    T_TRY_EXCLAMATION => Shift(yy_state_451)
    T_TRY_QUESTION => Shift(yy_state_453)
    T_TRY => Shift(yy_state_455)
    NT_loop_label_colon => Shift(yy_state_471)
    T_POST_LABEL => Shift(yy_state_479)
    T_LIDENT => Shift(yy_state_481)
    NT_expr => Shift(yy_state_1123)
    T_WHILE | T_LOOP | T_FOR => Reduce(0, NT_loop_label_colon, yy_action_774)
    _ => Error
  }
}

///|
fn yy_state_1123(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_142)
}

///|
fn yy_state_1124(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1125)
    _ => Error
  }
}

///|
fn yy_state_1125(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_1126)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_1126(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1127)
    _ => Error
  }
}

///|
fn yy_state_1127(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1128)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1128(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_141)
}

///|
fn yy_state_1129(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_1130)
    T_LBRACE => Shift(yy_state_1134)
    _ => Error
  }
}

///|
fn yy_state_1130(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    NT_type_ => Shift(yy_state_142)
    NT_non_empty_list_commas_rev_type__ => Shift(yy_state_143)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_non_empty_list_commas_type__ => Shift(yy_state_1131)
    _ => Error
  }
}

///|
fn yy_state_1131(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RPAREN => Shift(yy_state_1132)
    _ => Error
  }
}

///|
fn yy_state_1132(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1133)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1133(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_140)
}

///|
fn yy_state_1134(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    T_MUTABLE => Shift(yy_state_833)
    NT_record_decl_field => Shift(yy_state_922)
    NT_non_empty_list_attribute_ => Shift(yy_state_925)
    T_PUB => Shift(yy_state_946)
    T_PRIV => Shift(yy_state_952)
    NT_option_MUTABLE_ => Shift(yy_state_957)
    NT_non_empty_list_semis_record_decl_field_ => Shift(yy_state_962)
    NT_list_semis_record_decl_field_ => Shift(yy_state_1135)
    T_RBRACE => Reduce(0, NT_list_semis_record_decl_field_, yy_action_233)
    T_LIDENT => Reduce(0, NT_option_MUTABLE_, yy_action_281)
    _ => Error
  }
}

///|
fn yy_state_1135(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1136)
    _ => Error
  }
}

///|
fn yy_state_1136(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1137)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1137(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_139)
}

///|
fn yy_state_1138(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1139)
    T_LBRACE => Shift(yy_state_1140)
    NT_option_type__ => Shift(yy_state_1144)
    T_EOF | T_DERIVE | T_SEMI => Reduce(0, NT_option_type__, yy_action_138)
    _ => Error
  }
}

///|
fn yy_state_1139(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_option_type__, yy_action_137)
}

///|
fn yy_state_1140(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_1141)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_1141(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1142)
    _ => Error
  }
}

///|
fn yy_state_1142(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1143)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1143(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_136)
}

///|
fn yy_state_1144(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1145)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1145(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_135)
}

///|
fn yy_state_1146(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    T_DERIVE => Shift(yy_state_894)
    NT_type_ => Shift(yy_state_1147)
    NT_deriving_directive_list => Shift(yy_state_1149)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1147(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1148)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1148(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_134)
}

///|
fn yy_state_1149(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure_item, yy_action_133)
}

///|
fn yy_state_1150(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1151)
    _ => Error
  }
}

///|
fn yy_state_1151(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1152)
    T_EQUAL => Reduce(2, NT_val_header, yy_action_132)
    _ => Error
  }
}

///|
fn yy_state_1152(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1153)
    _ => Error
  }
}

///|
fn yy_state_1153(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_val_header, yy_action_131)
}

///|
fn yy_state_1154(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1155)
    _ => Error
  }
}

///|
fn yy_state_1155(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1156)
    T_EQUAL => Reduce(2, NT_val_header, yy_action_130)
    _ => Error
  }
}

///|
fn yy_state_1156(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1157)
    _ => Error
  }
}

///|
fn yy_state_1157(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_val_header, yy_action_129)
}

///|
fn yy_state_1158(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1159)
    T_STRING => Shift(yy_state_1163)
    _ => Error
  }
}

///|
fn yy_state_1159(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1160)
    _ => Error
  }
}

///|
fn yy_state_1160(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1161)
    T_EOF | T_DERIVE | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1161(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1162)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1162(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_128)
}

///|
fn yy_state_1163(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1164)
    _ => Error
  }
}

///|
fn yy_state_1164(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_fun_binder => Shift(yy_state_1165)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    _ => Error
  }
}

///|
fn yy_state_1165(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1166)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1166(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1167)
    T_RAISE | T_EQUAL | T_LPAREN | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1167(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1168)
    T_RAISE | T_EQUAL | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1168(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1169)
    T_EQUAL => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1169(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_extern_fun_header, yy_action_127)
}

///|
fn yy_state_1170(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_fun_binder, yy_action_126)
}

///|
fn yy_state_1171(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLONCOLON => Shift(yy_state_1172)
    _ => Error
  }
}

///|
fn yy_state_1172(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1173)
    _ => Error
  }
}

///|
fn yy_state_1173(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_fun_binder, yy_action_125)
}

///|
fn yy_state_1174(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LBRACKET => Shift(yy_state_857)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    NT_fun_binder => Shift(yy_state_1175)
    NT_type_parameters => Shift(yy_state_1178)
    _ => Error
  }
}

///|
fn yy_state_1175(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1176)
    T_RAISE
    | T_EQUAL
    | T_LPAREN
    | T_LBRACKET
    | T_LBRACE
    | T_THIN_ARROW
    | T_NORAISE => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1176(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1177)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1177(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_fun_header_generic, yy_action_124)
}

///|
fn yy_state_1178(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    NT_fun_binder => Shift(yy_state_1179)
    _ => Error
  }
}

///|
fn yy_state_1179(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1180)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1180(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_fun_header_generic, yy_action_123)
}

///|
fn yy_state_1181(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    T_ENUM => Shift(yy_state_1182)
    T_STRUCT => Shift(yy_state_1185)
    T_SUBERROR => Shift(yy_state_1188)
    T_TYPE => Shift(yy_state_1190)
    T_ENUMVIEW => Shift(yy_state_1193)
    T_IMPL => Shift(yy_state_1205)
    T_TEST => Shift(yy_state_1222)
    T_TRAITALIAS => Shift(yy_state_1226)
    T_TYPEALIAS => Shift(yy_state_1228)
    T_TRAIT => Shift(yy_state_1234)
    T_FNALIAS => Shift(yy_state_1240)
    T_CONST => Shift(yy_state_1242)
    T_LET => Shift(yy_state_1246)
    T_EXTERN => Shift(yy_state_1250)
    T_PUB => Shift(yy_state_1262)
    T_PRIV => Shift(yy_state_1347)
    NT_fun_header_generic => Shift(yy_state_1431)
    T_ASYNC => Shift(yy_state_1434)
    _ => Error
  }
}

///|
fn yy_state_1182(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1183)
    _ => Error
  }
}

///|
fn yy_state_1183(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1184)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1184(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_enum_header, yy_action_122)
}

///|
fn yy_state_1185(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1186)
    _ => Error
  }
}

///|
fn yy_state_1186(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1187)
    T_LPAREN | T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1187(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_struct_header, yy_action_121)
}

///|
fn yy_state_1188(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1189)
    _ => Error
  }
}

///|
fn yy_state_1189(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_suberror_header, yy_action_120)
}

///|
fn yy_state_1190(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1191)
    _ => Error
  }
}

///|
fn yy_state_1191(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1192)
    T_UIDENT
    | T_EOF
    | T_DERIVE
    | T_ASYNC
    | T_LPAREN
    | T_SEMI
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1192(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_header, yy_action_119)
}

///|
fn yy_state_1193(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1194)
    T_UIDENT => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1194(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1195)
    _ => Error
  }
}

///|
fn yy_state_1195(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1196)
    _ => Error
  }
}

///|
fn yy_state_1196(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_1197)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_1197(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1198)
    _ => Error
  }
}

///|
fn yy_state_1198(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_1199)
    _ => Error
  }
}

///|
fn yy_state_1199(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1200)
    _ => Error
  }
}

///|
fn yy_state_1200(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1201)
    _ => Error
  }
}

///|
fn yy_state_1201(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1202)
    _ => Error
  }
}

///|
fn yy_state_1202(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1203)
    _ => Error
  }
}

///|
fn yy_state_1203(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_1204)
    _ => Error
  }
}

///|
fn yy_state_1204(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(13, NT_structure_item, yy_action_118)
}

///|
fn yy_state_1205(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1206)
    T_UIDENT | T_AMPER | T_PACKAGE_NAME =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1206(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_type_name => Shift(yy_state_1207)
    _ => Error
  }
}

///|
fn yy_state_1207(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1208)
    T_FOR => Shift(yy_state_1214)
    _ => Error
  }
}

///|
fn yy_state_1208(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1209)
    _ => Error
  }
}

///|
fn yy_state_1209(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1210)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1210(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1211)
    _ => Error
  }
}

///|
fn yy_state_1211(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1212)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1212(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1213)
    _ => Error
  }
}

///|
fn yy_state_1213(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_structure_item, yy_action_117)
}

///|
fn yy_state_1214(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1215)
    _ => Error
  }
}

///|
fn yy_state_1215(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1216)
    T_EOF | T_SEMI => Reduce(6, NT_structure_item, yy_action_116)
    _ => Error
  }
}

///|
fn yy_state_1216(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1217)
    _ => Error
  }
}

///|
fn yy_state_1217(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1218)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1218(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1219)
    _ => Error
  }
}

///|
fn yy_state_1219(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1220)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1220(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1221)
    _ => Error
  }
}

///|
fn yy_state_1221(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(12, NT_structure_item, yy_action_115)
}

///|
fn yy_state_1222(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_975)
    NT_option_loced_string_ => Shift(yy_state_1223)
    T_LPAREN | T_LBRACE => Reduce(0, NT_option_loced_string_, yy_action_217)
    _ => Error
  }
}

///|
fn yy_state_1223(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1224)
    T_LBRACE => Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1224(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_884)
    NT_block_expr_with_local_types => Shift(yy_state_1225)
    _ => Error
  }
}

///|
fn yy_state_1225(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_114)
}

///|
fn yy_state_1226(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_PACKAGE_NAME => Shift(yy_state_985)
    NT_batch_type_alias_targets => Shift(yy_state_1227)
    _ => Error
  }
}

///|
fn yy_state_1227(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_113)
}

///|
fn yy_state_1228(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_UIDENT => Shift(yy_state_1000)
    T_PACKAGE_NAME => Shift(yy_state_1001)
    NT_type_ => Shift(yy_state_1229)
    NT_batch_type_alias_targets => Shift(yy_state_1233)
    _ => Error
  }
}

///|
fn yy_state_1229(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1230)
    _ => Error
  }
}

///|
fn yy_state_1230(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1231)
    _ => Error
  }
}

///|
fn yy_state_1231(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1232)
    T_EOF | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1232(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_112)
}

///|
fn yy_state_1233(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_111)
}

///|
fn yy_state_1234(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1235)
    _ => Error
  }
}

///|
fn yy_state_1235(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1010)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ =>
      Shift(yy_state_1236)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___,
        yy_action_198,
      )
    _ => Error
  }
}

///|
fn yy_state_1236(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1237)
    _ => Error
  }
}

///|
fn yy_state_1237(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_trait_method_decl => Shift(yy_state_1014)
    NT_non_empty_list_attribute_ => Shift(yy_state_1017)
    T_LIDENT => Shift(yy_state_1051)
    T_ASYNC => Shift(yy_state_1059)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_1069)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1238)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_195)
    _ => Error
  }
}

///|
fn yy_state_1238(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1239)
    _ => Error
  }
}

///|
fn yy_state_1239(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_110)
}

///|
fn yy_state_1240(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1073)
    T_LIDENT => Shift(yy_state_1075)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_1080)
    T_PACKAGE_NAME => Shift(yy_state_1090)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_1105)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1107)
    NT_func_alias_targets => Shift(yy_state_1241)
    T_LPAREN =>
      Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_174)
    _ => Error
  }
}

///|
fn yy_state_1241(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_109)
}

///|
fn yy_state_1242(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1243)
    _ => Error
  }
}

///|
fn yy_state_1243(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1244)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_108)
    _ => Error
  }
}

///|
fn yy_state_1244(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1245)
    _ => Error
  }
}

///|
fn yy_state_1245(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_val_header, yy_action_107)
}

///|
fn yy_state_1246(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1247)
    _ => Error
  }
}

///|
fn yy_state_1247(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1248)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_106)
    _ => Error
  }
}

///|
fn yy_state_1248(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1249)
    _ => Error
  }
}

///|
fn yy_state_1249(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_val_header, yy_action_105)
}

///|
fn yy_state_1250(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1251)
    T_STRING => Shift(yy_state_1255)
    _ => Error
  }
}

///|
fn yy_state_1251(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1252)
    _ => Error
  }
}

///|
fn yy_state_1252(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1253)
    T_EOF | T_DERIVE | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1253(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1254)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1254(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_104)
}

///|
fn yy_state_1255(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1256)
    _ => Error
  }
}

///|
fn yy_state_1256(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    NT_fun_binder => Shift(yy_state_1257)
    _ => Error
  }
}

///|
fn yy_state_1257(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1258)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1258(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1259)
    T_RAISE | T_EQUAL | T_LPAREN | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1259(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1260)
    T_RAISE | T_EQUAL | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1260(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1261)
    T_EQUAL => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1261(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_extern_fun_header, yy_action_103)
}

///|
fn yy_state_1262(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_932)
    NT_pub_attr => Shift(yy_state_1263)
    T_EXTERN
    | T_STRUCT
    | T_ENUM
    | T_TRAIT
    | T_IMPL
    | T_ASYNC
    | T_TYPEALIAS
    | T_TRAITALIAS
    | T_FNALIAS
    | T_FN
    | T_LET
    | T_CONST
    | T_TYPE
    | T_SUBERROR
    | T_ENUMVIEW => Reduce(0, NT_pub_attr, yy_action_231)
    _ => Error
  }
}

///|
fn yy_state_1263(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    T_ENUM => Shift(yy_state_1264)
    T_STRUCT => Shift(yy_state_1267)
    T_SUBERROR => Shift(yy_state_1270)
    T_TYPE => Shift(yy_state_1272)
    T_ENUMVIEW => Shift(yy_state_1275)
    T_IMPL => Shift(yy_state_1287)
    T_TRAITALIAS => Shift(yy_state_1304)
    T_TYPEALIAS => Shift(yy_state_1306)
    T_TRAIT => Shift(yy_state_1312)
    T_FNALIAS => Shift(yy_state_1318)
    T_CONST => Shift(yy_state_1320)
    T_LET => Shift(yy_state_1324)
    T_EXTERN => Shift(yy_state_1328)
    NT_fun_header_generic => Shift(yy_state_1340)
    T_ASYNC => Shift(yy_state_1343)
    _ => Error
  }
}

///|
fn yy_state_1264(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1265)
    _ => Error
  }
}

///|
fn yy_state_1265(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1266)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1266(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_enum_header, yy_action_102)
}

///|
fn yy_state_1267(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1268)
    _ => Error
  }
}

///|
fn yy_state_1268(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1269)
    T_LPAREN | T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1269(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_struct_header, yy_action_101)
}

///|
fn yy_state_1270(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1271)
    _ => Error
  }
}

///|
fn yy_state_1271(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_suberror_header, yy_action_100)
}

///|
fn yy_state_1272(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1273)
    _ => Error
  }
}

///|
fn yy_state_1273(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1274)
    T_UIDENT
    | T_EOF
    | T_DERIVE
    | T_ASYNC
    | T_LPAREN
    | T_SEMI
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1274(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_type_header, yy_action_99)
}

///|
fn yy_state_1275(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1276)
    T_UIDENT => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1276(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1277)
    _ => Error
  }
}

///|
fn yy_state_1277(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1278)
    _ => Error
  }
}

///|
fn yy_state_1278(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_1279)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_1279(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1280)
    _ => Error
  }
}

///|
fn yy_state_1280(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_1281)
    _ => Error
  }
}

///|
fn yy_state_1281(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1282)
    _ => Error
  }
}

///|
fn yy_state_1282(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1283)
    _ => Error
  }
}

///|
fn yy_state_1283(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1284)
    _ => Error
  }
}

///|
fn yy_state_1284(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1285)
    _ => Error
  }
}

///|
fn yy_state_1285(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_1286)
    _ => Error
  }
}

///|
fn yy_state_1286(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(15, NT_structure_item, yy_action_98)
}

///|
fn yy_state_1287(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1288)
    T_UIDENT | T_AMPER | T_PACKAGE_NAME =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1288(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_type_name => Shift(yy_state_1289)
    _ => Error
  }
}

///|
fn yy_state_1289(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1290)
    T_FOR => Shift(yy_state_1296)
    _ => Error
  }
}

///|
fn yy_state_1290(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1291)
    _ => Error
  }
}

///|
fn yy_state_1291(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1292)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1292(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1293)
    _ => Error
  }
}

///|
fn yy_state_1293(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1294)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1294(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1295)
    _ => Error
  }
}

///|
fn yy_state_1295(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(12, NT_structure_item, yy_action_97)
}

///|
fn yy_state_1296(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1297)
    _ => Error
  }
}

///|
fn yy_state_1297(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1298)
    T_EOF | T_SEMI => Reduce(8, NT_structure_item, yy_action_96)
    _ => Error
  }
}

///|
fn yy_state_1298(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1299)
    _ => Error
  }
}

///|
fn yy_state_1299(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1300)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1300(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1301)
    _ => Error
  }
}

///|
fn yy_state_1301(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1302)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1302(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1303)
    _ => Error
  }
}

///|
fn yy_state_1303(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(14, NT_structure_item, yy_action_95)
}

///|
fn yy_state_1304(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_PACKAGE_NAME => Shift(yy_state_985)
    NT_batch_type_alias_targets => Shift(yy_state_1305)
    _ => Error
  }
}

///|
fn yy_state_1305(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_94)
}

///|
fn yy_state_1306(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_UIDENT => Shift(yy_state_1000)
    T_PACKAGE_NAME => Shift(yy_state_1001)
    NT_type_ => Shift(yy_state_1307)
    NT_batch_type_alias_targets => Shift(yy_state_1311)
    _ => Error
  }
}

///|
fn yy_state_1307(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1308)
    _ => Error
  }
}

///|
fn yy_state_1308(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1309)
    _ => Error
  }
}

///|
fn yy_state_1309(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1310)
    T_EOF | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1310(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_structure_item, yy_action_93)
}

///|
fn yy_state_1311(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_92)
}

///|
fn yy_state_1312(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1313)
    _ => Error
  }
}

///|
fn yy_state_1313(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1010)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ =>
      Shift(yy_state_1314)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___,
        yy_action_198,
      )
    _ => Error
  }
}

///|
fn yy_state_1314(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1315)
    _ => Error
  }
}

///|
fn yy_state_1315(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_trait_method_decl => Shift(yy_state_1014)
    NT_non_empty_list_attribute_ => Shift(yy_state_1017)
    T_LIDENT => Shift(yy_state_1051)
    T_ASYNC => Shift(yy_state_1059)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_1069)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1316)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_195)
    _ => Error
  }
}

///|
fn yy_state_1316(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1317)
    _ => Error
  }
}

///|
fn yy_state_1317(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_structure_item, yy_action_91)
}

///|
fn yy_state_1318(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1073)
    T_LIDENT => Shift(yy_state_1075)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_1080)
    T_PACKAGE_NAME => Shift(yy_state_1090)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_1105)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1107)
    NT_func_alias_targets => Shift(yy_state_1319)
    T_LPAREN =>
      Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_174)
    _ => Error
  }
}

///|
fn yy_state_1319(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_90)
}

///|
fn yy_state_1320(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1321)
    _ => Error
  }
}

///|
fn yy_state_1321(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1322)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_89)
    _ => Error
  }
}

///|
fn yy_state_1322(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1323)
    _ => Error
  }
}

///|
fn yy_state_1323(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_val_header, yy_action_88)
}

///|
fn yy_state_1324(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1325)
    _ => Error
  }
}

///|
fn yy_state_1325(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1326)
    T_EQUAL => Reduce(5, NT_val_header, yy_action_87)
    _ => Error
  }
}

///|
fn yy_state_1326(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1327)
    _ => Error
  }
}

///|
fn yy_state_1327(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_val_header, yy_action_86)
}

///|
fn yy_state_1328(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1329)
    T_STRING => Shift(yy_state_1333)
    _ => Error
  }
}

///|
fn yy_state_1329(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1330)
    _ => Error
  }
}

///|
fn yy_state_1330(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1331)
    T_EOF | T_DERIVE | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1331(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1332)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1332(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_structure_item, yy_action_85)
}

///|
fn yy_state_1333(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1334)
    _ => Error
  }
}

///|
fn yy_state_1334(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    NT_fun_binder => Shift(yy_state_1335)
    _ => Error
  }
}

///|
fn yy_state_1335(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1336)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1336(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1337)
    T_RAISE | T_EQUAL | T_LPAREN | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1337(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1338)
    T_RAISE | T_EQUAL | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1338(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1339)
    T_EQUAL => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1339(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_extern_fun_header, yy_action_84)
}

///|
fn yy_state_1340(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1341)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1341(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1342)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1342(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_fun_header, yy_action_83)
}

///|
fn yy_state_1343(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    NT_fun_header_generic => Shift(yy_state_1344)
    _ => Error
  }
}

///|
fn yy_state_1344(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1345)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1345(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1346)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1346(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_fun_header, yy_action_82)
}

///|
fn yy_state_1347(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    T_ENUM => Shift(yy_state_1348)
    T_STRUCT => Shift(yy_state_1351)
    T_SUBERROR => Shift(yy_state_1354)
    T_TYPE => Shift(yy_state_1356)
    T_ENUMVIEW => Shift(yy_state_1359)
    T_IMPL => Shift(yy_state_1371)
    T_TRAITALIAS => Shift(yy_state_1388)
    T_TYPEALIAS => Shift(yy_state_1390)
    T_TRAIT => Shift(yy_state_1396)
    T_FNALIAS => Shift(yy_state_1402)
    T_CONST => Shift(yy_state_1404)
    T_LET => Shift(yy_state_1408)
    T_EXTERN => Shift(yy_state_1412)
    NT_fun_header_generic => Shift(yy_state_1424)
    T_ASYNC => Shift(yy_state_1427)
    _ => Error
  }
}

///|
fn yy_state_1348(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1349)
    _ => Error
  }
}

///|
fn yy_state_1349(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1350)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1350(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_enum_header, yy_action_81)
}

///|
fn yy_state_1351(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1352)
    _ => Error
  }
}

///|
fn yy_state_1352(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1353)
    T_LPAREN | T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1353(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_struct_header, yy_action_80)
}

///|
fn yy_state_1354(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1355)
    _ => Error
  }
}

///|
fn yy_state_1355(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_suberror_header, yy_action_79)
}

///|
fn yy_state_1356(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1357)
    _ => Error
  }
}

///|
fn yy_state_1357(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1358)
    T_UIDENT
    | T_EOF
    | T_DERIVE
    | T_ASYNC
    | T_LPAREN
    | T_SEMI
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1358(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_header, yy_action_78)
}

///|
fn yy_state_1359(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1360)
    T_UIDENT => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1360(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1361)
    _ => Error
  }
}

///|
fn yy_state_1361(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1362)
    _ => Error
  }
}

///|
fn yy_state_1362(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_1363)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_1363(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1364)
    _ => Error
  }
}

///|
fn yy_state_1364(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_1365)
    _ => Error
  }
}

///|
fn yy_state_1365(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1366)
    _ => Error
  }
}

///|
fn yy_state_1366(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1367)
    _ => Error
  }
}

///|
fn yy_state_1367(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1368)
    _ => Error
  }
}

///|
fn yy_state_1368(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1369)
    _ => Error
  }
}

///|
fn yy_state_1369(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_1370)
    _ => Error
  }
}

///|
fn yy_state_1370(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(14, NT_structure_item, yy_action_77)
}

///|
fn yy_state_1371(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1372)
    T_UIDENT | T_AMPER | T_PACKAGE_NAME =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1372(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_type_name => Shift(yy_state_1373)
    _ => Error
  }
}

///|
fn yy_state_1373(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1374)
    T_FOR => Shift(yy_state_1380)
    _ => Error
  }
}

///|
fn yy_state_1374(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1375)
    _ => Error
  }
}

///|
fn yy_state_1375(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1376)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1376(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1377)
    _ => Error
  }
}

///|
fn yy_state_1377(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1378)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1378(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1379)
    _ => Error
  }
}

///|
fn yy_state_1379(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_structure_item, yy_action_76)
}

///|
fn yy_state_1380(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1381)
    _ => Error
  }
}

///|
fn yy_state_1381(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1382)
    T_EOF | T_SEMI => Reduce(7, NT_structure_item, yy_action_75)
    _ => Error
  }
}

///|
fn yy_state_1382(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1383)
    _ => Error
  }
}

///|
fn yy_state_1383(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1384)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1384(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1385)
    _ => Error
  }
}

///|
fn yy_state_1385(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1386)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1386(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1387)
    _ => Error
  }
}

///|
fn yy_state_1387(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(13, NT_structure_item, yy_action_74)
}

///|
fn yy_state_1388(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_PACKAGE_NAME => Shift(yy_state_985)
    NT_batch_type_alias_targets => Shift(yy_state_1389)
    _ => Error
  }
}

///|
fn yy_state_1389(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_73)
}

///|
fn yy_state_1390(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_UIDENT => Shift(yy_state_1000)
    T_PACKAGE_NAME => Shift(yy_state_1001)
    NT_type_ => Shift(yy_state_1391)
    NT_batch_type_alias_targets => Shift(yy_state_1395)
    _ => Error
  }
}

///|
fn yy_state_1391(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1392)
    _ => Error
  }
}

///|
fn yy_state_1392(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1393)
    _ => Error
  }
}

///|
fn yy_state_1393(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1394)
    T_EOF | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1394(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_72)
}

///|
fn yy_state_1395(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_71)
}

///|
fn yy_state_1396(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1397)
    _ => Error
  }
}

///|
fn yy_state_1397(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1010)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ =>
      Shift(yy_state_1398)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___,
        yy_action_198,
      )
    _ => Error
  }
}

///|
fn yy_state_1398(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1399)
    _ => Error
  }
}

///|
fn yy_state_1399(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_trait_method_decl => Shift(yy_state_1014)
    NT_non_empty_list_attribute_ => Shift(yy_state_1017)
    T_LIDENT => Shift(yy_state_1051)
    T_ASYNC => Shift(yy_state_1059)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_1069)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1400)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_195)
    _ => Error
  }
}

///|
fn yy_state_1400(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1401)
    _ => Error
  }
}

///|
fn yy_state_1401(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_structure_item, yy_action_70)
}

///|
fn yy_state_1402(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1073)
    T_LIDENT => Shift(yy_state_1075)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_1080)
    T_PACKAGE_NAME => Shift(yy_state_1090)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_1105)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1107)
    NT_func_alias_targets => Shift(yy_state_1403)
    T_LPAREN =>
      Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_174)
    _ => Error
  }
}

///|
fn yy_state_1403(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_69)
}

///|
fn yy_state_1404(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1405)
    _ => Error
  }
}

///|
fn yy_state_1405(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1406)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_68)
    _ => Error
  }
}

///|
fn yy_state_1406(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1407)
    _ => Error
  }
}

///|
fn yy_state_1407(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_val_header, yy_action_67)
}

///|
fn yy_state_1408(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1409)
    _ => Error
  }
}

///|
fn yy_state_1409(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1410)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_66)
    _ => Error
  }
}

///|
fn yy_state_1410(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1411)
    _ => Error
  }
}

///|
fn yy_state_1411(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_val_header, yy_action_65)
}

///|
fn yy_state_1412(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1413)
    T_STRING => Shift(yy_state_1417)
    _ => Error
  }
}

///|
fn yy_state_1413(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1414)
    _ => Error
  }
}

///|
fn yy_state_1414(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1415)
    T_EOF | T_DERIVE | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1415(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1416)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1416(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_64)
}

///|
fn yy_state_1417(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1418)
    _ => Error
  }
}

///|
fn yy_state_1418(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    NT_fun_binder => Shift(yy_state_1419)
    _ => Error
  }
}

///|
fn yy_state_1419(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1420)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1420(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1421)
    T_RAISE | T_EQUAL | T_LPAREN | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1421(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1422)
    T_RAISE | T_EQUAL | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1422(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1423)
    T_EQUAL => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1423(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_extern_fun_header, yy_action_63)
}

///|
fn yy_state_1424(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1425)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1425(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1426)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1426(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_fun_header, yy_action_62)
}

///|
fn yy_state_1427(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    NT_fun_header_generic => Shift(yy_state_1428)
    _ => Error
  }
}

///|
fn yy_state_1428(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1429)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1429(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1430)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1430(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_fun_header, yy_action_61)
}

///|
fn yy_state_1431(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1432)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1432(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1433)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1433(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_fun_header, yy_action_60)
}

///|
fn yy_state_1434(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    T_TEST => Shift(yy_state_1435)
    NT_fun_header_generic => Shift(yy_state_1439)
    _ => Error
  }
}

///|
fn yy_state_1435(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_975)
    NT_option_loced_string_ => Shift(yy_state_1436)
    T_LPAREN | T_LBRACE => Reduce(0, NT_option_loced_string_, yy_action_217)
    _ => Error
  }
}

///|
fn yy_state_1436(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1437)
    T_LBRACE => Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1437(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_884)
    NT_block_expr_with_local_types => Shift(yy_state_1438)
    _ => Error
  }
}

///|
fn yy_state_1438(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_59)
}

///|
fn yy_state_1439(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1440)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1440(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1441)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1441(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_fun_header, yy_action_57)
}

///|
fn yy_state_1442(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_932)
    NT_pub_attr => Shift(yy_state_1443)
    T_EXTERN
    | T_STRUCT
    | T_ENUM
    | T_TRAIT
    | T_IMPL
    | T_ASYNC
    | T_TYPEALIAS
    | T_TRAITALIAS
    | T_FNALIAS
    | T_FN
    | T_LET
    | T_CONST
    | T_TYPE
    | T_SUBERROR
    | T_ENUMVIEW => Reduce(0, NT_pub_attr, yy_action_231)
    _ => Error
  }
}

///|
fn yy_state_1443(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    T_ENUM => Shift(yy_state_1444)
    T_STRUCT => Shift(yy_state_1447)
    T_SUBERROR => Shift(yy_state_1450)
    T_TYPE => Shift(yy_state_1452)
    T_ENUMVIEW => Shift(yy_state_1455)
    T_IMPL => Shift(yy_state_1467)
    T_TRAITALIAS => Shift(yy_state_1484)
    T_TYPEALIAS => Shift(yy_state_1486)
    T_TRAIT => Shift(yy_state_1492)
    T_FNALIAS => Shift(yy_state_1498)
    T_CONST => Shift(yy_state_1500)
    T_LET => Shift(yy_state_1504)
    T_EXTERN => Shift(yy_state_1508)
    NT_fun_header_generic => Shift(yy_state_1520)
    T_ASYNC => Shift(yy_state_1523)
    _ => Error
  }
}

///|
fn yy_state_1444(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1445)
    _ => Error
  }
}

///|
fn yy_state_1445(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1446)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1446(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_enum_header, yy_action_56)
}

///|
fn yy_state_1447(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1448)
    _ => Error
  }
}

///|
fn yy_state_1448(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1449)
    T_LPAREN | T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1449(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_struct_header, yy_action_55)
}

///|
fn yy_state_1450(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1451)
    _ => Error
  }
}

///|
fn yy_state_1451(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_suberror_header, yy_action_54)
}

///|
fn yy_state_1452(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1453)
    _ => Error
  }
}

///|
fn yy_state_1453(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1454)
    T_UIDENT
    | T_EOF
    | T_DERIVE
    | T_ASYNC
    | T_LPAREN
    | T_SEMI
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1454(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_type_header, yy_action_53)
}

///|
fn yy_state_1455(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1456)
    T_UIDENT => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1456(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1457)
    _ => Error
  }
}

///|
fn yy_state_1457(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1458)
    _ => Error
  }
}

///|
fn yy_state_1458(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_1459)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_1459(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1460)
    _ => Error
  }
}

///|
fn yy_state_1460(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_1461)
    _ => Error
  }
}

///|
fn yy_state_1461(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1462)
    _ => Error
  }
}

///|
fn yy_state_1462(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1463)
    _ => Error
  }
}

///|
fn yy_state_1463(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1464)
    _ => Error
  }
}

///|
fn yy_state_1464(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1465)
    _ => Error
  }
}

///|
fn yy_state_1465(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_1466)
    _ => Error
  }
}

///|
fn yy_state_1466(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(14, NT_structure_item, yy_action_52)
}

///|
fn yy_state_1467(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1468)
    T_UIDENT | T_AMPER | T_PACKAGE_NAME =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1468(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_type_name => Shift(yy_state_1469)
    _ => Error
  }
}

///|
fn yy_state_1469(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1470)
    T_FOR => Shift(yy_state_1476)
    _ => Error
  }
}

///|
fn yy_state_1470(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1471)
    _ => Error
  }
}

///|
fn yy_state_1471(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1472)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1472(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1473)
    _ => Error
  }
}

///|
fn yy_state_1473(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1474)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1474(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1475)
    _ => Error
  }
}

///|
fn yy_state_1475(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(11, NT_structure_item, yy_action_51)
}

///|
fn yy_state_1476(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1477)
    _ => Error
  }
}

///|
fn yy_state_1477(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1478)
    T_EOF | T_SEMI => Reduce(7, NT_structure_item, yy_action_50)
    _ => Error
  }
}

///|
fn yy_state_1478(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1479)
    _ => Error
  }
}

///|
fn yy_state_1479(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1480)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1480(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1481)
    _ => Error
  }
}

///|
fn yy_state_1481(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1482)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1482(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1483)
    _ => Error
  }
}

///|
fn yy_state_1483(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(13, NT_structure_item, yy_action_49)
}

///|
fn yy_state_1484(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_PACKAGE_NAME => Shift(yy_state_985)
    NT_batch_type_alias_targets => Shift(yy_state_1485)
    _ => Error
  }
}

///|
fn yy_state_1485(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_48)
}

///|
fn yy_state_1486(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_UIDENT => Shift(yy_state_1000)
    T_PACKAGE_NAME => Shift(yy_state_1001)
    NT_type_ => Shift(yy_state_1487)
    NT_batch_type_alias_targets => Shift(yy_state_1491)
    _ => Error
  }
}

///|
fn yy_state_1487(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1488)
    _ => Error
  }
}

///|
fn yy_state_1488(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1489)
    _ => Error
  }
}

///|
fn yy_state_1489(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1490)
    T_EOF | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1490(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_47)
}

///|
fn yy_state_1491(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_46)
}

///|
fn yy_state_1492(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1493)
    _ => Error
  }
}

///|
fn yy_state_1493(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1010)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ =>
      Shift(yy_state_1494)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___,
        yy_action_198,
      )
    _ => Error
  }
}

///|
fn yy_state_1494(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1495)
    _ => Error
  }
}

///|
fn yy_state_1495(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_trait_method_decl => Shift(yy_state_1014)
    NT_non_empty_list_attribute_ => Shift(yy_state_1017)
    T_LIDENT => Shift(yy_state_1051)
    T_ASYNC => Shift(yy_state_1059)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_1069)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1496)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_195)
    _ => Error
  }
}

///|
fn yy_state_1496(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1497)
    _ => Error
  }
}

///|
fn yy_state_1497(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(8, NT_structure_item, yy_action_45)
}

///|
fn yy_state_1498(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1073)
    T_LIDENT => Shift(yy_state_1075)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_1080)
    T_PACKAGE_NAME => Shift(yy_state_1090)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_1105)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1107)
    NT_func_alias_targets => Shift(yy_state_1499)
    T_LPAREN =>
      Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_174)
    _ => Error
  }
}

///|
fn yy_state_1499(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_structure_item, yy_action_44)
}

///|
fn yy_state_1500(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1501)
    _ => Error
  }
}

///|
fn yy_state_1501(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1502)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_43)
    _ => Error
  }
}

///|
fn yy_state_1502(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1503)
    _ => Error
  }
}

///|
fn yy_state_1503(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_val_header, yy_action_42)
}

///|
fn yy_state_1504(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1505)
    _ => Error
  }
}

///|
fn yy_state_1505(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1506)
    T_EQUAL => Reduce(4, NT_val_header, yy_action_41)
    _ => Error
  }
}

///|
fn yy_state_1506(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1507)
    _ => Error
  }
}

///|
fn yy_state_1507(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_val_header, yy_action_40)
}

///|
fn yy_state_1508(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1509)
    T_STRING => Shift(yy_state_1513)
    _ => Error
  }
}

///|
fn yy_state_1509(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1510)
    _ => Error
  }
}

///|
fn yy_state_1510(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1511)
    T_EOF | T_DERIVE | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1511(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1512)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1512(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_39)
}

///|
fn yy_state_1513(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1514)
    _ => Error
  }
}

///|
fn yy_state_1514(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    NT_fun_binder => Shift(yy_state_1515)
    _ => Error
  }
}

///|
fn yy_state_1515(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1516)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1516(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1517)
    T_RAISE | T_EQUAL | T_LPAREN | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1517(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1518)
    T_RAISE | T_EQUAL | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1518(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1519)
    T_EQUAL => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1519(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_extern_fun_header, yy_action_38)
}

///|
fn yy_state_1520(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1521)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1521(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1522)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1522(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_fun_header, yy_action_37)
}

///|
fn yy_state_1523(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    NT_fun_header_generic => Shift(yy_state_1524)
    _ => Error
  }
}

///|
fn yy_state_1524(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1525)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1525(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1526)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1526(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_fun_header, yy_action_35)
}

///|
fn yy_state_1527(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    T_ENUM => Shift(yy_state_1528)
    T_STRUCT => Shift(yy_state_1531)
    T_SUBERROR => Shift(yy_state_1534)
    T_TYPE => Shift(yy_state_1536)
    T_ENUMVIEW => Shift(yy_state_1539)
    T_IMPL => Shift(yy_state_1551)
    T_TRAITALIAS => Shift(yy_state_1568)
    T_TYPEALIAS => Shift(yy_state_1570)
    T_TRAIT => Shift(yy_state_1576)
    T_FNALIAS => Shift(yy_state_1582)
    T_CONST => Shift(yy_state_1584)
    T_LET => Shift(yy_state_1588)
    T_EXTERN => Shift(yy_state_1592)
    NT_fun_header_generic => Shift(yy_state_1604)
    T_ASYNC => Shift(yy_state_1607)
    _ => Error
  }
}

///|
fn yy_state_1528(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1529)
    _ => Error
  }
}

///|
fn yy_state_1529(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1530)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1530(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_enum_header, yy_action_34)
}

///|
fn yy_state_1531(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1532)
    _ => Error
  }
}

///|
fn yy_state_1532(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1533)
    T_LPAREN | T_LBRACE =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1533(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_struct_header, yy_action_33)
}

///|
fn yy_state_1534(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1535)
    _ => Error
  }
}

///|
fn yy_state_1535(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_suberror_header, yy_action_32)
}

///|
fn yy_state_1536(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1537)
    _ => Error
  }
}

///|
fn yy_state_1537(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1538)
    T_UIDENT
    | T_EOF
    | T_DERIVE
    | T_ASYNC
    | T_LPAREN
    | T_SEMI
    | T_UNDERSCORE
    | T_AMPER
    | T_PACKAGE_NAME =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1538(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_type_header, yy_action_31)
}

///|
fn yy_state_1539(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1540)
    T_UIDENT => Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1540(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1541)
    _ => Error
  }
}

///|
fn yy_state_1541(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1542)
    _ => Error
  }
}

///|
fn yy_state_1542(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_enum_constructor => Shift(yy_state_820)
    NT_non_empty_list_attribute_ => Shift(yy_state_823)
    T_UIDENT => Shift(yy_state_843)
    NT_non_empty_list_semis_enum_constructor_ => Shift(yy_state_847)
    NT_list_semis_enum_constructor_ => Shift(yy_state_1543)
    T_RBRACE => Reduce(0, NT_list_semis_enum_constructor_, yy_action_284)
    _ => Error
  }
}

///|
fn yy_state_1543(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1544)
    _ => Error
  }
}

///|
fn yy_state_1544(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FOR => Shift(yy_state_1545)
    _ => Error
  }
}

///|
fn yy_state_1545(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1546)
    _ => Error
  }
}

///|
fn yy_state_1546(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1547)
    _ => Error
  }
}

///|
fn yy_state_1547(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1548)
    _ => Error
  }
}

///|
fn yy_state_1548(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1549)
    _ => Error
  }
}

///|
fn yy_state_1549(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_275)
    NT_block_expr => Shift(yy_state_1550)
    _ => Error
  }
}

///|
fn yy_state_1550(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(13, NT_structure_item, yy_action_30)
}

///|
fn yy_state_1551(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1552)
    T_UIDENT | T_AMPER | T_PACKAGE_NAME =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1552(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    NT_type_name => Shift(yy_state_1553)
    _ => Error
  }
}

///|
fn yy_state_1553(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1554)
    T_FOR => Shift(yy_state_1560)
    _ => Error
  }
}

///|
fn yy_state_1554(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1555)
    _ => Error
  }
}

///|
fn yy_state_1555(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1556)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1556(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1557)
    _ => Error
  }
}

///|
fn yy_state_1557(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1558)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1558(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1559)
    _ => Error
  }
}

///|
fn yy_state_1559(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(10, NT_structure_item, yy_action_29)
}

///|
fn yy_state_1560(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1561)
    _ => Error
  }
}

///|
fn yy_state_1561(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_WITH => Shift(yy_state_1562)
    T_EOF | T_SEMI => Reduce(6, NT_structure_item, yy_action_28)
    _ => Error
  }
}

///|
fn yy_state_1562(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1563)
    _ => Error
  }
}

///|
fn yy_state_1563(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1564)
    T_LPAREN => Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1564(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_1565)
    _ => Error
  }
}

///|
fn yy_state_1565(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1566)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1566(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EQUAL => Shift(yy_state_881)
    NT_block_expr_with_local_types => Shift(yy_state_883)
    T_LBRACE => Shift(yy_state_884)
    NT_impl_body => Shift(yy_state_1567)
    _ => Error
  }
}

///|
fn yy_state_1567(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(12, NT_structure_item, yy_action_27)
}

///|
fn yy_state_1568(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_981)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_PACKAGE_NAME => Shift(yy_state_985)
    NT_batch_type_alias_targets => Shift(yy_state_1569)
    _ => Error
  }
}

///|
fn yy_state_1569(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_26)
}

///|
fn yy_state_1570(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_batch_type_alias_target_UIDENT_ => Shift(yy_state_984)
    T_UIDENT => Shift(yy_state_1000)
    T_PACKAGE_NAME => Shift(yy_state_1001)
    NT_type_ => Shift(yy_state_1571)
    NT_batch_type_alias_targets => Shift(yy_state_1575)
    _ => Error
  }
}

///|
fn yy_state_1571(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AS => Shift(yy_state_1572)
    _ => Error
  }
}

///|
fn yy_state_1572(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1573)
    _ => Error
  }
}

///|
fn yy_state_1573(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1574)
    T_EOF | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1574(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_25)
}

///|
fn yy_state_1575(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_24)
}

///|
fn yy_state_1576(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1577)
    _ => Error
  }
}

///|
fn yy_state_1577(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1010)
    NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___ =>
      Shift(yy_state_1578)
    T_LBRACE =>
      Reduce(
        0,
        NT_option_preceded_COLON_separated_nonempty_list_PLUS_tvar_constraint___,
        yy_action_198,
      )
    _ => Error
  }
}

///|
fn yy_state_1578(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_1579)
    _ => Error
  }
}

///|
fn yy_state_1579(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ATTRIBUTE => Shift(yy_state_791)
    NT_trait_method_decl => Shift(yy_state_1014)
    NT_non_empty_list_attribute_ => Shift(yy_state_1017)
    T_LIDENT => Shift(yy_state_1051)
    T_ASYNC => Shift(yy_state_1059)
    NT_non_empty_list_semis_trait_method_decl_ => Shift(yy_state_1069)
    NT_list_semis_trait_method_decl_ => Shift(yy_state_1580)
    T_RBRACE => Reduce(0, NT_list_semis_trait_method_decl_, yy_action_195)
    _ => Error
  }
}

///|
fn yy_state_1580(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_RBRACE => Shift(yy_state_1581)
    _ => Error
  }
}

///|
fn yy_state_1581(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(7, NT_structure_item, yy_action_23)
}

///|
fn yy_state_1582(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1073)
    T_LIDENT => Shift(yy_state_1075)
    NT_option_func_alias_type_name_LIDENT_UIDENT__ => Shift(yy_state_1080)
    T_PACKAGE_NAME => Shift(yy_state_1090)
    NT_func_alias_type_name_LIDENT_UIDENT_ => Shift(yy_state_1105)
    NT_func_alias_target_LIDENT_ => Shift(yy_state_1107)
    NT_func_alias_targets => Shift(yy_state_1583)
    T_LPAREN =>
      Reduce(0, NT_option_func_alias_type_name_LIDENT_UIDENT__, yy_action_174)
    _ => Error
  }
}

///|
fn yy_state_1583(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_structure_item, yy_action_22)
}

///|
fn yy_state_1584(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1585)
    _ => Error
  }
}

///|
fn yy_state_1585(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1586)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_21)
    _ => Error
  }
}

///|
fn yy_state_1586(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1587)
    _ => Error
  }
}

///|
fn yy_state_1587(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_val_header, yy_action_20)
}

///|
fn yy_state_1588(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LIDENT => Shift(yy_state_1589)
    _ => Error
  }
}

///|
fn yy_state_1589(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_COLON => Shift(yy_state_1590)
    T_EQUAL => Reduce(3, NT_val_header, yy_action_18)
    _ => Error
  }
}

///|
fn yy_state_1590(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_ASYNC => Shift(yy_state_131)
    T_UNDERSCORE => Shift(yy_state_136)
    T_AMPER => Shift(yy_state_137)
    T_PACKAGE_NAME => Shift(yy_state_139)
    T_UIDENT => Shift(yy_state_146)
    T_LPAREN => Shift(yy_state_150)
    NT_simple_type => Shift(yy_state_179)
    NT_type_ => Shift(yy_state_1591)
    _ => Error
  }
}

///|
fn yy_state_1591(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_val_header, yy_action_15)
}

///|
fn yy_state_1592(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_TYPE => Shift(yy_state_1593)
    T_STRING => Shift(yy_state_1597)
    _ => Error
  }
}

///|
fn yy_state_1593(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_UIDENT => Shift(yy_state_1594)
    _ => Error
  }
}

///|
fn yy_state_1594(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACKET => Shift(yy_state_795)
    NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__ =>
      Shift(yy_state_806)
    NT_optional_type_parameters_no_constraints => Shift(yy_state_1595)
    T_EOF | T_DERIVE | T_SEMI =>
      Reduce(
        0,
        NT_option_delimited_LBRACKET_non_empty_list_commas_id_type_decl_binder___RBRACKET__,
        yy_action_300,
      )
    _ => Error
  }
}

///|
fn yy_state_1595(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_DERIVE => Shift(yy_state_894)
    NT_deriving_directive_list => Shift(yy_state_1596)
    T_EOF | T_SEMI => Reduce(0, NT_deriving_directive_list, yy_action_245)
    _ => Error
  }
}

///|
fn yy_state_1596(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(6, NT_structure_item, yy_action_14)
}

///|
fn yy_state_1597(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1598)
    _ => Error
  }
}

///|
fn yy_state_1598(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_AMPER => Shift(yy_state_18)
    T_PACKAGE_NAME => Shift(yy_state_20)
    T_UIDENT => Shift(yy_state_23)
    NT_qual_ident_ty => Shift(yy_state_24)
    T_LIDENT => Shift(yy_state_1170)
    NT_type_name => Shift(yy_state_1171)
    NT_fun_binder => Shift(yy_state_1599)
    _ => Error
  }
}

///|
fn yy_state_1599(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EXCLAMATION => Shift(yy_state_629)
    NT_optional_bang => Shift(yy_state_1600)
    T_RAISE | T_EQUAL | T_LPAREN | T_LBRACKET | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_optional_bang, yy_action_592)
    _ => Error
  }
}

///|
fn yy_state_1600(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    NT_type_parameters => Shift(yy_state_816)
    NT_option_type_parameters_ => Shift(yy_state_856)
    T_LBRACKET => Shift(yy_state_857)
    NT_optional_type_parameters => Shift(yy_state_1601)
    T_RAISE | T_EQUAL | T_LPAREN | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_type_parameters_, yy_action_286)
    _ => Error
  }
}

///|
fn yy_state_1601(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1602)
    T_RAISE | T_EQUAL | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1602(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1603)
    T_EQUAL => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1603(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(9, NT_extern_fun_header, yy_action_13)
}

///|
fn yy_state_1604(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1605)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1605(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1606)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1606(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_fun_header, yy_action_12)
}

///|
fn yy_state_1607(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    NT_fun_header_generic => Shift(yy_state_1608)
    _ => Error
  }
}

///|
fn yy_state_1608(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1609)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1609(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1610)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1610(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_fun_header, yy_action_10)
}

///|
fn yy_state_1611(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1612)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1612(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1613)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1613(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(3, NT_fun_header, yy_action_8)
}

///|
fn yy_state_1614(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_FN => Shift(yy_state_1174)
    T_TEST => Shift(yy_state_1615)
    NT_fun_header_generic => Shift(yy_state_1619)
    _ => Error
  }
}

///|
fn yy_state_1615(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_STRING => Shift(yy_state_975)
    NT_option_loced_string_ => Shift(yy_state_1616)
    T_LPAREN | T_LBRACE => Reduce(0, NT_option_loced_string_, yy_action_217)
    _ => Error
  }
}

///|
fn yy_state_1616(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1617)
    T_LBRACE => Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1617(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LBRACE => Shift(yy_state_884)
    NT_block_expr_with_local_types => Shift(yy_state_1618)
    _ => Error
  }
}

///|
fn yy_state_1618(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(5, NT_structure_item, yy_action_7)
}

///|
fn yy_state_1619(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_LPAREN => Shift(yy_state_329)
    NT_parameters => Shift(yy_state_977)
    NT_option_parameters_ => Shift(yy_state_1620)
    T_RAISE | T_EQUAL | T_LBRACE | T_THIN_ARROW | T_NORAISE =>
      Reduce(0, NT_option_parameters_, yy_action_214)
    _ => Error
  }
}

///|
fn yy_state_1620(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_NORAISE => Shift(yy_state_162)
    T_RAISE => Shift(yy_state_163)
    NT_error_annotation => Shift(yy_state_270)
    T_THIN_ARROW => Shift(yy_state_271)
    NT_func_return_type => Shift(yy_state_1621)
    T_EQUAL | T_LBRACE => Reduce(0, NT_func_return_type, yy_action_591)
    _ => Error
  }
}

///|
fn yy_state_1621(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(4, NT_fun_header, yy_action_3)
}

///|
fn yy_state_1622(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_non_empty_list_semis_structure_item_, yy_action_2)
}

///|
fn yy_state_1623(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(1, NT_list_semis_structure_item_, yy_action_1)
}

///|
fn yy_state_1624(_lookahead : YYSymbol) -> YYDecision {
  match _lookahead {
    T_EOF => Shift(yy_state_1625)
    _ => Error
  }
}

///|
fn yy_state_1625(_lookahead : YYSymbol) -> YYDecision {
  ReduceNoLookahead(2, NT_structure, yy_action_0)
}

///|
fn[T] yy_parse(
  tokens : Array[(Token, Position, Position)],
  start : YYState,
  return_ : (YYObj) -> T,
  initial_pos? : Position,
) -> T raise ParseError {
  let mut cursor = 0
  let mut state_stack : @list.List[YYState] = @list.cons(start, @list.empty())
  let data_stack : Array[(YYObj, Position, Position)] = []
  let mut last_pos = initial_pos.unwrap_or(tokens[0].1)
  let mut state = start
  let mut lookahead : (YYSymbol, (YYObj, Position, Position), Token?)? = None
  let mut last_shifted_state_stack = state_stack
  while true {
    let decision = match state(EOI) {
      ReduceNoLookahead(_) | Accept as t => t
      _ =>
        match lookahead {
          Some(la) => state(la.0)
          None =>
            if cursor < tokens.length() {
              let (token, start_pos, end_pos) = tokens[cursor]
              cursor += 1
              let (symbol, data) = yy_input(token, start_pos, end_pos)
              lookahead = Some(
                (symbol, (data, start_pos, end_pos), Some(token)),
              )
              state(symbol)
            } else {
              lookahead = Some((EOI, (YYObj_Void, last_pos, last_pos), None))
              state(EOI)
            }
        }
    }
    match decision {
      Accept => return return_(data_stack.unsafe_pop().0)
      Shift(next_state) => {
        guard lookahead is Some(la)
        data_stack.push(la.1)
        state_stack = @list.cons(next_state, state_stack)
        last_shifted_state_stack = state_stack
        state = next_state
        last_pos = la.1.2
        lookahead = None
      }
      Reduce(count, symbol, action)
      | ReduceNoLookahead(count, symbol, action) =>
        loop (count, symbol, action) {
          _ => {
            let args = data_stack[data_stack.length() - count:]
            let data = action(last_pos, args)
            let (start_pos, end_pos) = if args.length() == 0 {
              (last_pos, last_pos)
            } else {
              (args[0].1, args[args.length() - 1].2)
            }
            for i in 0..<count {
              ignore(data_stack.unsafe_pop())
              state_stack = state_stack.unsafe_tail()
            }
            state = state_stack.unsafe_head()
            data_stack.push((data, start_pos, end_pos))
            match state(symbol) {
              Accept => return return_(data_stack.unsafe_pop().0)
              Shift(next_state) => {
                state_stack = @list.cons(next_state, state_stack)
                state = next_state
              }
              Reduce(count, symbol, action)
              | ReduceNoLookahead(count, symbol, action) =>
                continue (count, symbol, action)
              _ => panic()
            }
          }
        }
      Error => {
        let (_, (_, start_pos, end_pos), token) = lookahead.unwrap()
        error(last_shifted_state_stack, token, (start_pos, end_pos))
      }
    }
  }
  panic()
}

///|
fn error(
  stack : @list.List[YYState],
  token : Token?,
  loc : (Position, Position),
) -> Unit raise ParseError {
  let expected = []
  fn try_add(symbol : YYSymbol, kind : TokenKind) {
    fn go(stack : @list.List[YYState]) {
      match stack {
        Empty => ()
        More(state, ..) =>
          match state(symbol) {
            Accept | Shift(_) => expected.push(kind)
            Reduce(count, symbol, _) | ReduceNoLookahead(count, symbol, _) => {
              fn inner_go(stack : @list.List[YYState], count, symbol) {
                let stack = stack.drop(count)
                guard stack is More(state, ..)
                match state(symbol) {
                  Shift(state) => go(@list.cons(state, stack))
                  Reduce(count, symbol, _)
                  | ReduceNoLookahead(count, symbol, _) =>
                    inner_go(stack, count, symbol)
                  _ => panic()
                }
              }

              inner_go(stack, count, symbol)
            }
            Error => ()
          }
      }
    }

    go(stack)
  }

  for
    term in (
      [
        (T_CHAR, TK_CHAR),
        (T_INT, TK_INT),
        (T_BYTE, TK_BYTE),
        (T_BYTES, TK_BYTES),
        (T_FLOAT, TK_FLOAT),
        (T_DOUBLE, TK_DOUBLE),
        (T_STRING, TK_STRING),
        (T_MULTILINE_STRING, TK_MULTILINE_STRING),
        (T_MULTILINE_INTERP, TK_MULTILINE_INTERP),
        (T_INTERP, TK_INTERP),
        (T_ATTRIBUTE, TK_ATTRIBUTE),
        (T_LIDENT, TK_LIDENT),
        (T_UIDENT, TK_UIDENT),
        (T_POST_LABEL, TK_POST_LABEL),
        (T_COMMENT, TK_COMMENT),
        (T_NEWLINE, TK_NEWLINE),
        (T_INFIX1, TK_INFIX1),
        (T_INFIX2, TK_INFIX2),
        (T_INFIX3, TK_INFIX3),
        (T_INFIX4, TK_INFIX4),
        (T_AUGMENTED_ASSIGNMENT, TK_AUGMENTED_ASSIGNMENT),
        (T_EOF, TK_EOF),
        (T_FALSE, TK_FALSE),
        (T_TRUE, TK_TRUE),
        (T_PUB, TK_PUB),
        (T_PRIV, TK_PRIV),
        (T_READONLY, TK_READONLY),
        (T_IMPORT, TK_IMPORT),
        (T_EXTERN, TK_EXTERN),
        (T_BREAK, TK_BREAK),
        (T_CONTINUE, TK_CONTINUE),
        (T_STRUCT, TK_STRUCT),
        (T_ENUM, TK_ENUM),
        (T_TRAIT, TK_TRAIT),
        (T_DERIVE, TK_DERIVE),
        (T_IMPL, TK_IMPL),
        (T_WITH, TK_WITH),
        (T_RAISE, TK_RAISE),
        (T_THROW, TK_THROW),
        (T_TRY, TK_TRY),
        (T_CATCH, TK_CATCH),
        (T_ASYNC, TK_ASYNC),
        (T_TYPEALIAS, TK_TYPEALIAS),
        (T_TRAITALIAS, TK_TRAITALIAS),
        (T_FNALIAS, TK_FNALIAS),
        (T_EQUAL, TK_EQUAL),
        (T_LPAREN, TK_LPAREN),
        (T_RPAREN, TK_RPAREN),
        (T_COMMA, TK_COMMA),
        (T_MINUS, TK_MINUS),
        (T_QUESTION, TK_QUESTION),
        (T_EXCLAMATION, TK_EXCLAMATION),
        (T_DOT_LIDENT, TK_DOT_LIDENT),
        (T_DOT_UIDENT, TK_DOT_UIDENT),
        (T_DOT_INT, TK_DOT_INT),
        (T_DOT_LPAREN, TK_DOT_LPAREN),
        (T_COLONCOLON, TK_COLONCOLON),
        (T_COLON, TK_COLON),
        (T_SEMI, TK_SEMI),
        (T_LBRACKET, TK_LBRACKET),
        (T_PLUS, TK_PLUS),
        (T_RBRACKET, TK_RBRACKET),
        (T_UNDERSCORE, TK_UNDERSCORE),
        (T_BAR, TK_BAR),
        (T_LBRACE, TK_LBRACE),
        (T_RBRACE, TK_RBRACE),
        (T_AMPERAMPER, TK_AMPERAMPER),
        (T_AMPER, TK_AMPER),
        (T_CARET, TK_CARET),
        (T_BARBAR, TK_BARBAR),
        (T_PACKAGE_NAME, TK_PACKAGE_NAME),
        (T_AS, TK_AS),
        (T_PIPE, TK_PIPE),
        (T_ELSE, TK_ELSE),
        (T_FN, TK_FN),
        (T_IF, TK_IF),
        (T_LET, TK_LET),
        (T_CONST, TK_CONST),
        (T_MATCH, TK_MATCH),
        (T_USING, TK_USING),
        (T_MUTABLE, TK_MUTABLE),
        (T_TYPE, TK_TYPE),
        (T_FAT_ARROW, TK_FAT_ARROW),
        (T_THIN_ARROW, TK_THIN_ARROW),
        (T_WHILE, TK_WHILE),
        (T_RETURN, TK_RETURN),
        (T_DOTDOT, TK_DOTDOT),
        (T_RANGE_INCLUSIVE, TK_RANGE_INCLUSIVE),
        (T_RANGE_EXCLUSIVE, TK_RANGE_EXCLUSIVE),
        (T_ELLIPSIS, TK_ELLIPSIS),
        (T_TEST, TK_TEST),
        (T_LOOP, TK_LOOP),
        (T_GUARD, TK_GUARD),
        (T_DEFER, TK_DEFER),
        (T_FOR, TK_FOR),
        (T_IN, TK_IN),
        (T_IS, TK_IS),
        (T_SUBERROR, TK_SUBERROR),
        (T_AND, TK_AND),
        (T_LETREC, TK_LETREC),
        (T_ENUMVIEW, TK_ENUMVIEW),
        (T_NORAISE, TK_NORAISE),
        (T_TRY_QUESTION, TK_TRY_QUESTION),
        (T_TRY_EXCLAMATION, TK_TRY_EXCLAMATION),
      ] : Array[(YYSymbol, TokenKind)]) {
    try_add(term.0, term.1)
  }
  match token {
    None => raise UnexpectedEndOfInput(loc.1, expected)
    Some(token) => raise UnexpectedToken(token, loc, expected)
  }
}

///|
pub fn structure(
  tokens : Array[(Token, Position, Position)],
  initial_pos? : Position,
) -> List[Impl] raise ParseError {
  yy_parse(
    tokens,
    yy_state_786,
    it => {
      guard it is YYObj_List_Impl_(result)
      result
    },
    initial_pos?,
  )
}

///|
pub fn expression(
  tokens : Array[(Token, Position, Position)],
  initial_pos? : Position,
) -> Expr raise ParseError {
  yy_parse(
    tokens,
    yy_state_0,
    it => {
      guard it is YYObj_Expr(result)
      result
    },
    initial_pos?,
  )
}

///|
fn _get_symbol_start_pos(
  args : ArrayView[(YYObj, Position, Position)],
  last_pos : Position,
) -> Position {
  if args.length() == 0 {
    last_pos
  } else {
    for i = 0; i < args.length(); i = i + 1 {
      let (_, start_pos, end_pos) = args[i]
      if start_pos == end_pos {
        continue
      }
      return start_pos
    }
    args[args.length() - 1].2
  }
}
