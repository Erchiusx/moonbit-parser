// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/parser/yacc_parser"

import(
  "moonbitlang/core/list"
  "moonbitlang/parser/basic"
  "moonbitlang/parser/syntax"
  "moonbitlang/parser/tokens"
)

// Values
fn expression(Array[(@tokens.Token, @basic.Position, @basic.Position)], initial_pos? : @basic.Position) -> @syntax.Expr raise ParseError

fn structure(Array[(@tokens.Token, @basic.Position, @basic.Position)], initial_pos? : @basic.Position) -> @list.List[@syntax.Impl] raise ParseError

// Errors
pub suberror ParseError {
  UnexpectedToken(@tokens.Token, (@basic.Position, @basic.Position), Array[@tokens.TokenKind])
  UnexpectedEndOfInput(@basic.Position, Array[@tokens.TokenKind])
}
fn ParseError::output(Self, &Logger) -> Unit // from trait `Show`
fn ParseError::to_string(Self) -> String // from trait `Show`
impl Show for ParseError

// Types and methods

// Type aliases

// Traits

